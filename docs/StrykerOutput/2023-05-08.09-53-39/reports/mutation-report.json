{"schemaVersion":"2","thresholds":{"high":80,"low":60},"projectRoot":"C:\\Users\\kushal\\src\\mydotnet\\hellolib","files":{"BubbleSort.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class BubbleSort\r\n{\r\n    public static int[] SortIntegers(int[] input)\r\n    {\r\n        for (int i = 0; i \u003C input.Length; i\u002B\u002B)\r\n        {\r\n            for (int j = 0; j \u003C input.Length - 1; j\u002B\u002B)\r\n            {\r\n                if (input[j] \u003E input[j \u002B 1])\r\n                {\r\n                    (input[j], input[j \u002B 1]) = (input[j \u002B 1], input[j]);\r\n                }\r\n            }\r\n        }\r\n        return input;\r\n    }\r\n}","mutants":[{"id":"0","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":18,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"1","mutatorName":"Equality mutation","replacement":"i \u003E input.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":41}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"2","mutatorName":"Equality mutation","replacement":"i \u003C= input.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":41}},"status":"Survived","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"3","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":7,"column":43},"end":{"line":7,"column":46}},"status":"Timeout","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"4","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":16,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"5","mutatorName":"Equality mutation","replacement":"j \u003E input.Length - 1","location":{"start":{"line":9,"column":29},"end":{"line":9,"column":49}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"6","mutatorName":"Equality mutation","replacement":"j \u003C= input.Length - 1","location":{"start":{"line":9,"column":29},"end":{"line":9,"column":49}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"7","mutatorName":"Arithmetic mutation","replacement":"input.Length \u002B 1","location":{"start":{"line":9,"column":33},"end":{"line":9,"column":49}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"8","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"j--","location":{"start":{"line":9,"column":51},"end":{"line":9,"column":54}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","b0ccf2ae-631f-fff2-1875-809f04ffca3d","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"9","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":10,"column":13},"end":{"line":15,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"10","mutatorName":"Equality mutation","replacement":"input[j] \u003C input[j \u002B 1]","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":44}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"11","mutatorName":"Equality mutation","replacement":"input[j] \u003E= input[j \u002B 1]","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":44}},"status":"Survived","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"12","mutatorName":"Negate expression","replacement":"!(input[j] \u003E input[j \u002B 1])","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":44}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"13","mutatorName":"Arithmetic mutation","replacement":"j - 1","location":{"start":{"line":11,"column":38},"end":{"line":11,"column":43}},"status":"Killed","static":false,"coveredBy":["b74b1831-3ca4-6aea-9eda-92df66068c43","5f445bed-e608-58ea-1e53-9469716a7956","31b4d58c-a32c-2fc1-7dba-f960babab4a6","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"14","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":12,"column":17},"end":{"line":14,"column":18}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6"]},{"id":"15","mutatorName":"Arithmetic mutation","replacement":"j - 1","location":{"start":{"line":13,"column":38},"end":{"line":13,"column":43}},"status":"Killed","static":false,"coveredBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6"]},{"id":"16","mutatorName":"Arithmetic mutation","replacement":"j - 1","location":{"start":{"line":13,"column":55},"end":{"line":13,"column":60}},"status":"Killed","static":false,"coveredBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6"]}]},"Entity.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic abstract class Entity\r\n{\r\n    public Guid Guid { get; set; } = Guid.NewGuid();\r\n    public string CreatedBy { get; set; } = \u0022System\u0022;\r\n    public DateTime CreatedDate { get; set; } = DateTime.UtcNow;\r\n    public string ModifiedBy { get; set; }\r\n    public DateTime ModifiedDate { get; set; }\r\n}\r\n","mutants":[{"id":"17","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":6,"column":45},"end":{"line":6,"column":53}},"status":"Killed","static":false,"coveredBy":["355cce6c-71ea-1aaa-5396-efa48648a5ad"]}]},"MinimumCoin.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class MinimumCoin\r\n{\r\n    public List\u003Cint\u003E CoinSet { get; private set; }\r\n    public int RepeatFactor { get; private set; }\r\n\r\n    public MinimumCoin(List\u003Cint\u003E CoinSet, int RepeatFactor)\r\n    {\r\n        this.CoinSet = CoinSet;\r\n        this.RepeatFactor = RepeatFactor;\r\n    }\r\n\r\n    private static IEnumerable\u003CIEnumerable\u003CT\u003E\u003E SubSetsOf\u003CT\u003E(IEnumerable\u003CT\u003E source)\r\n    {\r\n        if (!source.Any())\r\n        {\r\n            return Enumerable.Repeat(Enumerable.Empty\u003CT\u003E(), 1);\r\n        }\r\n\r\n        IEnumerable\u003CT\u003E element = source.Take(1);\r\n\r\n        IEnumerable\u003CIEnumerable\u003CT\u003E\u003E haveNots = SubSetsOf(source.Skip(1));\r\n        IEnumerable\u003CIEnumerable\u003CT\u003E\u003E haves = haveNots.Select(set =\u003E element.Concat(set));\r\n\r\n        return haves.Concat(haveNots);\r\n    }\r\n\r\n    private static int GetCountInternal(int total, List\u003Cint\u003E repeatedList)\r\n    {\r\n        int currentCount = int.MaxValue;\r\n        IEnumerable\u003CIEnumerable\u003Cint\u003E\u003E x = SubSetsOf\u003Cint\u003E(repeatedList);\r\n        foreach (IEnumerable\u003Cint\u003E y in x)\r\n        {\r\n            int sum = y.Sum();\r\n            if (sum == total \u0026\u0026 currentCount \u003E y.Count())\r\n            {\r\n                currentCount = y.Count();\r\n            }\r\n        }\r\n        return currentCount;\r\n    }\r\n\r\n    public int GetCount(int total)\r\n    {\r\n        if (CoinSet.Contains(total))\r\n        {\r\n            return 1;\r\n        }\r\n        else if (CoinSet.Min() \u003E total)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            List\u003Cint\u003E repeatedList = new();\r\n            for (int i = 0; i \u003C RepeatFactor; i\u002B\u002B)\r\n            {\r\n                foreach (int x in CoinSet)\r\n                {\r\n                    repeatedList.Add(x);\r\n                }\r\n            }\r\n            return GetCountInternal(total, repeatedList);\r\n        }\r\n    }\r\n}\r\n","mutants":[{"id":"18","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":9,"column":5},"end":{"line":12,"column":6}},"status":"Killed","static":false,"coveredBy":["3a647d9d-4ccb-2f02-188f-e813e8fa605d","7b12073b-4caf-0278-4223-253feac2f41f","2e11568c-b519-147a-4fad-dc7e4cf97d36","a7b83bdd-5dd9-2392-f6fd-25d15a221026","91c00e68-908b-20bc-40b2-66d9554d6cca","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a4243e4d-a0ed-16a6-45d4-6d66872b1aae","1ebd7347-1c60-2e79-6f0e-186e51c1f869","277e994e-7f1c-0621-9879-825415314b44","7b55b4ad-fbf4-9946-f369-9ae17323ae09","9e01b8cd-1ddd-f798-b5b5-2fa7d0d284ac"]},{"id":"19","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":15,"column":5},"end":{"line":27,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"20","mutatorName":"LogicalNotExpression to un-LogicalNotExpression mutation","replacement":"source.Any()","location":{"start":{"line":16,"column":13},"end":{"line":16,"column":26}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"21","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":17,"column":9},"end":{"line":19,"column":10}},"status":"Timeout","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"22","mutatorName":"Linq method mutation (Take() to Skip())","replacement":"source.Skip(1)","location":{"start":{"line":21,"column":34},"end":{"line":21,"column":48}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"23","mutatorName":"Linq method mutation (Skip() to Take())","replacement":"source.Take(1)","location":{"start":{"line":23,"column":58},"end":{"line":23,"column":72}},"status":"Timeout","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"24","mutatorName":"Linq method mutation (Concat() to Except())","replacement":"element.Except(set)","location":{"start":{"line":24,"column":68},"end":{"line":24,"column":87}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"25","mutatorName":"Linq method mutation (Concat() to Except())","replacement":"haves.Except(haveNots)","location":{"start":{"line":26,"column":16},"end":{"line":26,"column":38}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"26","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":30,"column":5},"end":{"line":42,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"27","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":34,"column":9},"end":{"line":40,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"28","mutatorName":"Linq method mutation (Sum() to Max())","replacement":"y.Max()","location":{"start":{"line":35,"column":23},"end":{"line":35,"column":30}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"29","mutatorName":"Logical mutation","replacement":"sum == total || currentCount \u003E y.Count()","location":{"start":{"line":36,"column":17},"end":{"line":36,"column":57}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"30","mutatorName":"Negate expression","replacement":"!(sum == total \u0026\u0026 currentCount \u003E y.Count())","location":{"start":{"line":36,"column":17},"end":{"line":36,"column":57}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"31","mutatorName":"Equality mutation","replacement":"sum != total","location":{"start":{"line":36,"column":17},"end":{"line":36,"column":29}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"32","mutatorName":"Equality mutation","replacement":"currentCount \u003C y.Count()","location":{"start":{"line":36,"column":33},"end":{"line":36,"column":57}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"33","mutatorName":"Equality mutation","replacement":"currentCount \u003E= y.Count()","location":{"start":{"line":36,"column":33},"end":{"line":36,"column":57}},"status":"Survived","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"34","mutatorName":"Linq method mutation (Count() to Sum())","replacement":"y.Sum()","location":{"start":{"line":36,"column":48},"end":{"line":36,"column":57}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"35","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":37,"column":13},"end":{"line":39,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"36","mutatorName":"Linq method mutation (Count() to Sum())","replacement":"y.Sum()","location":{"start":{"line":38,"column":32},"end":{"line":38,"column":41}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"37","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":45,"column":5},"end":{"line":66,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a4243e4d-a0ed-16a6-45d4-6d66872b1aae","1ebd7347-1c60-2e79-6f0e-186e51c1f869"]},{"id":"38","mutatorName":"Negate expression","replacement":"!(CoinSet.Contains(total))","location":{"start":{"line":46,"column":13},"end":{"line":46,"column":36}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a4243e4d-a0ed-16a6-45d4-6d66872b1aae","1ebd7347-1c60-2e79-6f0e-186e51c1f869"]},{"id":"39","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":47,"column":9},"end":{"line":49,"column":10}},"status":"Killed","static":false,"coveredBy":["a4243e4d-a0ed-16a6-45d4-6d66872b1aae"]},{"id":"40","mutatorName":"Equality mutation","replacement":"CoinSet.Min() \u003C total","location":{"start":{"line":50,"column":18},"end":{"line":50,"column":39}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","1ebd7347-1c60-2e79-6f0e-186e51c1f869"]},{"id":"41","mutatorName":"Equality mutation","replacement":"CoinSet.Min() \u003E= total","location":{"start":{"line":50,"column":18},"end":{"line":50,"column":39}},"status":"Survived","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","1ebd7347-1c60-2e79-6f0e-186e51c1f869"]},{"id":"42","mutatorName":"Negate expression","replacement":"!(CoinSet.Min() \u003E total)","location":{"start":{"line":50,"column":18},"end":{"line":50,"column":39}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","1ebd7347-1c60-2e79-6f0e-186e51c1f869"]},{"id":"43","mutatorName":"Linq method mutation (Min() to Max())","replacement":"CoinSet.Max()","location":{"start":{"line":50,"column":18},"end":{"line":50,"column":31}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","1ebd7347-1c60-2e79-6f0e-186e51c1f869"]},{"id":"44","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":51,"column":9},"end":{"line":53,"column":10}},"status":"Survived","static":false,"coveredBy":["1ebd7347-1c60-2e79-6f0e-186e51c1f869"]},{"id":"45","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":55,"column":9},"end":{"line":65,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"46","mutatorName":"Equality mutation","replacement":"i \u003E RepeatFactor","location":{"start":{"line":57,"column":29},"end":{"line":57,"column":45}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"47","mutatorName":"Equality mutation","replacement":"i \u003C= RepeatFactor","location":{"start":{"line":57,"column":29},"end":{"line":57,"column":45}},"status":"Timeout","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"48","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":57,"column":47},"end":{"line":57,"column":50}},"status":"Timeout","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"49","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":58,"column":13},"end":{"line":63,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"50","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":60,"column":17},"end":{"line":62,"column":18}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"51","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":61,"column":21},"end":{"line":61,"column":41}},"status":"Killed","static":false,"coveredBy":["7b12073b-4caf-0278-4223-253feac2f41f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]}]},"MySearch.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class MySearch\r\n{\r\n    public static bool LinearSearchIntegers(int[] arrayToSearch, int queryItem)\r\n    {\r\n        for (int i = 0; i \u003C arrayToSearch.Length; i\u002B\u002B)\r\n        {\r\n            if (arrayToSearch[i] == queryItem)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static int BinarySearchIntegers(int[] arrayToSearch, int queryItem)\r\n    {\r\n        int[] inputArray = arrayToSearch;\r\n        Array.Sort(inputArray);\r\n        int lowerBound = 0;\r\n        int upperBound = inputArray.Length - 1;\r\n        int midPoint;\r\n        while (lowerBound \u003C= upperBound)\r\n        {\r\n            midPoint = (upperBound \u002B lowerBound) / 2;\r\n            if (inputArray[midPoint] == queryItem)\r\n            {\r\n                return midPoint;\r\n            }\r\n            else if (inputArray[midPoint] \u003C queryItem)\r\n            {\r\n                lowerBound = midPoint \u002B 1;\r\n            }\r\n            else if (inputArray[midPoint] \u003E queryItem)\r\n            {\r\n                upperBound = midPoint - 1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public static int ReverseBinarySearchIntegers(int[] arrayToSearch, int queryItem)\r\n    {\r\n        int[] inputArray = arrayToSearch;\r\n        Array.Sort(inputArray);\r\n        int lowerBound = 0;\r\n        int upperBound = inputArray.Length - 1;\r\n        int midPoint;\r\n        while (lowerBound \u003C= upperBound)\r\n        {\r\n            midPoint = (upperBound \u002B lowerBound) / 2;\r\n            if (inputArray[midPoint] == queryItem)\r\n            {\r\n                return midPoint;\r\n            }\r\n            else if (inputArray[midPoint] \u003E queryItem)\r\n            {\r\n                upperBound = midPoint - 1;\r\n            }\r\n            else if (inputArray[midPoint] \u003C queryItem)\r\n            {\r\n                lowerBound = midPoint \u002B 1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}","mutants":[{"id":"52","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":15,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"53","mutatorName":"Equality mutation","replacement":"i \u003E arrayToSearch.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":49}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"54","mutatorName":"Equality mutation","replacement":"i \u003C= arrayToSearch.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":49}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"55","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":7,"column":51},"end":{"line":7,"column":54}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"56","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":13,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"57","mutatorName":"Equality mutation","replacement":"arrayToSearch[i] != queryItem","location":{"start":{"line":9,"column":17},"end":{"line":9,"column":46}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"58","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":10,"column":13},"end":{"line":12,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491"]},{"id":"59","mutatorName":"Boolean mutation","replacement":"false","location":{"start":{"line":11,"column":24},"end":{"line":11,"column":28}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491"]},{"id":"60","mutatorName":"Boolean mutation","replacement":"true","location":{"start":{"line":14,"column":16},"end":{"line":14,"column":21}},"status":"Killed","static":false,"coveredBy":["502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"61","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":18,"column":5},"end":{"line":41,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"62","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":20,"column":9},"end":{"line":20,"column":32}},"status":"Survived","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"63","mutatorName":"Arithmetic mutation","replacement":"inputArray.Length \u002B 1","location":{"start":{"line":22,"column":26},"end":{"line":22,"column":47}},"status":"Killed","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"64","mutatorName":"Equality mutation","replacement":"lowerBound \u003E upperBound","location":{"start":{"line":24,"column":16},"end":{"line":24,"column":40}},"status":"Killed","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"65","mutatorName":"Equality mutation","replacement":"lowerBound \u003C upperBound","location":{"start":{"line":24,"column":16},"end":{"line":24,"column":40}},"status":"Killed","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"66","mutatorName":"Negate expression","replacement":"!(lowerBound \u003C= upperBound)","location":{"start":{"line":24,"column":16},"end":{"line":24,"column":40}},"status":"Killed","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"67","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":25,"column":9},"end":{"line":39,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"68","mutatorName":"Arithmetic mutation","replacement":"(upperBound \u002B lowerBound) * 2","location":{"start":{"line":26,"column":24},"end":{"line":26,"column":53}},"status":"Killed","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"69","mutatorName":"Arithmetic mutation","replacement":"upperBound - lowerBound","location":{"start":{"line":26,"column":25},"end":{"line":26,"column":48}},"status":"Timeout","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"70","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] != queryItem","location":{"start":{"line":27,"column":17},"end":{"line":27,"column":50}},"status":"Killed","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","7191c288-1d1b-359b-35d8-15911f29bb34","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"71","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":28,"column":13},"end":{"line":30,"column":14}},"status":"Timeout","static":false,"coveredBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"72","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E queryItem","location":{"start":{"line":31,"column":22},"end":{"line":31,"column":54}},"status":"Killed","static":false,"coveredBy":["7191c288-1d1b-359b-35d8-15911f29bb34","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"73","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C= queryItem","location":{"start":{"line":31,"column":22},"end":{"line":31,"column":54}},"status":"Survived","static":false,"coveredBy":["7191c288-1d1b-359b-35d8-15911f29bb34","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"74","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003C queryItem)","location":{"start":{"line":31,"column":22},"end":{"line":31,"column":54}},"status":"Killed","static":false,"coveredBy":["7191c288-1d1b-359b-35d8-15911f29bb34","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"75","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":32,"column":13},"end":{"line":34,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7191c288-1d1b-359b-35d8-15911f29bb34","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"76","mutatorName":"Arithmetic mutation","replacement":"midPoint - 1","location":{"start":{"line":33,"column":30},"end":{"line":33,"column":42}},"status":"Timeout","static":false,"coveredBy":["7191c288-1d1b-359b-35d8-15911f29bb34","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"77","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C queryItem","location":{"start":{"line":35,"column":22},"end":{"line":35,"column":54}},"status":"Timeout","static":false,"coveredBy":["5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"78","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E= queryItem","location":{"start":{"line":35,"column":22},"end":{"line":35,"column":54}},"status":"Survived","static":false,"coveredBy":["5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"79","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003E queryItem)","location":{"start":{"line":35,"column":22},"end":{"line":35,"column":54}},"status":"Timeout","static":false,"coveredBy":["5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"80","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":36,"column":13},"end":{"line":38,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"81","mutatorName":"Arithmetic mutation","replacement":"midPoint \u002B 1","location":{"start":{"line":37,"column":30},"end":{"line":37,"column":42}},"status":"Timeout","static":false,"coveredBy":["5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","5507614f-2e67-d4ee-b0bd-b1a022f939fe","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"82","mutatorName":"UnaryMinusExpression to UnaryPlusExpression mutation","replacement":"\u002B1","location":{"start":{"line":40,"column":16},"end":{"line":40,"column":18}},"status":"Killed","static":false,"coveredBy":["7191c288-1d1b-359b-35d8-15911f29bb34","3df404e0-c303-ce1a-90ba-d39c35bd1189"]},{"id":"83","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":44,"column":5},"end":{"line":67,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"84","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":46,"column":9},"end":{"line":46,"column":32}},"status":"Survived","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"85","mutatorName":"Arithmetic mutation","replacement":"inputArray.Length \u002B 1","location":{"start":{"line":48,"column":26},"end":{"line":48,"column":47}},"status":"Killed","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"86","mutatorName":"Equality mutation","replacement":"lowerBound \u003E upperBound","location":{"start":{"line":50,"column":16},"end":{"line":50,"column":40}},"status":"Killed","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"87","mutatorName":"Equality mutation","replacement":"lowerBound \u003C upperBound","location":{"start":{"line":50,"column":16},"end":{"line":50,"column":40}},"status":"Killed","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"88","mutatorName":"Negate expression","replacement":"!(lowerBound \u003C= upperBound)","location":{"start":{"line":50,"column":16},"end":{"line":50,"column":40}},"status":"Killed","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"89","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":51,"column":9},"end":{"line":65,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"90","mutatorName":"Arithmetic mutation","replacement":"(upperBound \u002B lowerBound) * 2","location":{"start":{"line":52,"column":24},"end":{"line":52,"column":53}},"status":"Killed","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"91","mutatorName":"Arithmetic mutation","replacement":"upperBound - lowerBound","location":{"start":{"line":52,"column":25},"end":{"line":52,"column":48}},"status":"Timeout","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"92","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] != queryItem","location":{"start":{"line":53,"column":17},"end":{"line":53,"column":50}},"status":"Killed","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"93","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":54,"column":13},"end":{"line":56,"column":14}},"status":"Timeout","static":false,"coveredBy":["6ef2944e-9d8d-6b74-d27d-95bb0a893b14","6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","bbdefb79-028f-be2b-05a7-ef4ea8be416f"]},{"id":"94","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C queryItem","location":{"start":{"line":57,"column":22},"end":{"line":57,"column":54}},"status":"Killed","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"95","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E= queryItem","location":{"start":{"line":57,"column":22},"end":{"line":57,"column":54}},"status":"Survived","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"96","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003E queryItem)","location":{"start":{"line":57,"column":22},"end":{"line":57,"column":54}},"status":"Killed","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"97","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":58,"column":13},"end":{"line":60,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","54126116-86fa-4260-3817-8332d0a799f6","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"98","mutatorName":"Arithmetic mutation","replacement":"midPoint \u002B 1","location":{"start":{"line":59,"column":30},"end":{"line":59,"column":42}},"status":"Timeout","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","17113666-da63-5ab3-a75b-e0cf4167fb8e","54126116-86fa-4260-3817-8332d0a799f6","3f955e28-0bb7-fc0d-1447-b7d272cedeba","db4f3a93-b6de-53f9-1103-3efa90090697","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"99","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E queryItem","location":{"start":{"line":61,"column":22},"end":{"line":61,"column":54}},"status":"Timeout","static":false,"coveredBy":["17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"100","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C= queryItem","location":{"start":{"line":61,"column":22},"end":{"line":61,"column":54}},"status":"Survived","static":false,"coveredBy":["17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"101","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003C queryItem)","location":{"start":{"line":61,"column":22},"end":{"line":61,"column":54}},"status":"Timeout","static":false,"coveredBy":["17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"102","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":62,"column":13},"end":{"line":64,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"103","mutatorName":"Arithmetic mutation","replacement":"midPoint - 1","location":{"start":{"line":63,"column":30},"end":{"line":63,"column":42}},"status":"Timeout","static":false,"coveredBy":["17113666-da63-5ab3-a75b-e0cf4167fb8e","22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73"]},{"id":"104","mutatorName":"UnaryMinusExpression to UnaryPlusExpression mutation","replacement":"\u002B1","location":{"start":{"line":66,"column":16},"end":{"line":66,"column":18}},"status":"Killed","static":false,"coveredBy":["22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f"]}]},"Person.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class Person : Entity\r\n{\r\n    public string Name { get; }\r\n    public string Password { get; }\r\n    internal Person(string name, string password)\r\n    {\r\n        Name = name;\r\n        Password = password;\r\n    }\r\n}\r\n","mutants":[{"id":"105","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":5},"end":{"line":11,"column":6}},"status":"Killed","static":false,"coveredBy":["355cce6c-71ea-1aaa-5396-efa48648a5ad"]}]},"PersonFactory.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class PersonFactory\r\n{\r\n    private static readonly int MINIMUM_PASSWORD_LENGTH = 8;\r\n    private static readonly int MAXIMUM_PASSWORD_LENGTH = 128;\r\n    public static Person Create(string name, string password)\r\n    {\r\n        return CheckPasswordMeetsRequirements(password)\r\n            ? new Person(name, password)\r\n            : throw new ArgumentException($\u0022The password provided to create user {name} is not valid. A password must have a minimum length no shorter than {MINIMUM_PASSWORD_LENGTH} and no longer than {MAXIMUM_PASSWORD_LENGTH}.\u0022);\r\n    }\r\n    public static bool CheckPasswordMeetsRequirements(string password)\r\n    {\r\n        int length = password.Length;\r\n        return length \u003E= MINIMUM_PASSWORD_LENGTH \u0026\u0026 length \u003C= MAXIMUM_PASSWORD_LENGTH;\r\n    }\r\n}\r\n","mutants":[{"id":"106","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":5},"end":{"line":12,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","040b632d-f383-a745-26dd-403448bfcd4e","355cce6c-71ea-1aaa-5396-efa48648a5ad"]},{"id":"107","mutatorName":"Negate expression","replacement":"!(CheckPasswordMeetsRequirements(password)\r\n)","location":{"start":{"line":9,"column":16},"end":{"line":9,"column":56}},"status":"Killed","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","040b632d-f383-a745-26dd-403448bfcd4e","355cce6c-71ea-1aaa-5396-efa48648a5ad"]},{"id":"108","mutatorName":"String mutation","replacement":"$\u0022\u0022","location":{"start":{"line":11,"column":43},"end":{"line":11,"column":229}},"status":"Killed","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","040b632d-f383-a745-26dd-403448bfcd4e"]},{"id":"109","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":14,"column":5},"end":{"line":17,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","040b632d-f383-a745-26dd-403448bfcd4e","355cce6c-71ea-1aaa-5396-efa48648a5ad"]},{"id":"110","mutatorName":"Logical mutation","replacement":"length \u003E= MINIMUM_PASSWORD_LENGTH || length \u003C= MAXIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":16},"end":{"line":16,"column":86}},"status":"Survived","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","040b632d-f383-a745-26dd-403448bfcd4e","355cce6c-71ea-1aaa-5396-efa48648a5ad"]},{"id":"111","mutatorName":"Equality mutation","replacement":"length \u003C MINIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":16},"end":{"line":16,"column":49}},"status":"Killed","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","040b632d-f383-a745-26dd-403448bfcd4e","355cce6c-71ea-1aaa-5396-efa48648a5ad"]},{"id":"112","mutatorName":"Equality mutation","replacement":"length \u003E MINIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":16},"end":{"line":16,"column":49}},"status":"Killed","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","040b632d-f383-a745-26dd-403448bfcd4e","355cce6c-71ea-1aaa-5396-efa48648a5ad"]},{"id":"113","mutatorName":"Equality mutation","replacement":"length \u003E MAXIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":53},"end":{"line":16,"column":86}},"status":"Killed","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","355cce6c-71ea-1aaa-5396-efa48648a5ad"]},{"id":"114","mutatorName":"Equality mutation","replacement":"length \u003C MAXIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":53},"end":{"line":16,"column":86}},"status":"Survived","static":false,"coveredBy":["7496b161-1706-bc32-80f9-8f61a53bf59d","355cce6c-71ea-1aaa-5396-efa48648a5ad"]}]},"Revocation.cs":{"language":"cs","source":"using System.IO;\r\n\r\nnamespace hellolib;\r\n\r\npublic static class Revocation\r\n{\r\n    public static List\u003Cstring\u003E ReadCsv(string filename)\r\n    {\r\n        using StreamReader reader = new(filename);\r\n        List\u003Cstring\u003E result = new();\r\n        while (!reader.EndOfStream)\r\n        {\r\n            string line = reader.ReadLine();\r\n            string[] values = line.Split(\u0027,\u0027);\r\n            result.Add(values[0]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static void GetBatches(string filename, int size)\r\n    {\r\n        List\u003Cstring\u003E source = ReadCsv(filename);\r\n        IEnumerable\u003CIEnumerable\u003Cstring\u003E\u003E batches = source.Batch(size);\r\n        foreach (IEnumerable\u003Cstring\u003E bat in batches)\r\n        {\r\n            int x = bat.ToList().Count;\r\n        }\r\n    }\r\n\r\n    public static IEnumerable\u003CIEnumerable\u003CTSource\u003E\u003E Batch\u003CTSource\u003E(\r\n                  this IEnumerable\u003CTSource\u003E source, int size)\r\n    {\r\n        TSource[] bucket = null;\r\n        int count = 0;\r\n\r\n        foreach (TSource item in source)\r\n        {\r\n            bucket ??= new TSource[size];\r\n\r\n            bucket[count\u002B\u002B] = item;\r\n            if (count != size)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            yield return bucket;\r\n\r\n            bucket = null;\r\n            count = 0;\r\n        }\r\n\r\n        if (bucket != null \u0026\u0026 count \u003E 0)\r\n        {\r\n            yield return bucket.Take(count).ToArray();\r\n        }\r\n    }\r\n}\r\n","mutants":[{"id":"115","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":5},"end":{"line":18,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"]},{"id":"116","mutatorName":"LogicalNotExpression to un-LogicalNotExpression mutation","replacement":"reader.EndOfStream","location":{"start":{"line":11,"column":16},"end":{"line":11,"column":35}},"status":"Killed","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"]},{"id":"117","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":12,"column":9},"end":{"line":16,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"]},{"id":"118","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":15,"column":13},"end":{"line":15,"column":35}},"status":"Killed","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"]},{"id":"119","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":21,"column":5},"end":{"line":28,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"120","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":25,"column":9},"end":{"line":27,"column":10}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"121","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":32,"column":5},"end":{"line":56,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"122","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":37,"column":9},"end":{"line":50,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"123","mutatorName":"CoalesceAssignmentExpression to SimpleAssignmentExpression mutation","replacement":"bucket = new TSource[size]","location":{"start":{"line":38,"column":13},"end":{"line":38,"column":41}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"124","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"count--","location":{"start":{"line":40,"column":20},"end":{"line":40,"column":27}},"status":"Killed","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"125","mutatorName":"Equality mutation","replacement":"count == size","location":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"126","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":42,"column":13},"end":{"line":44,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"127","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":43,"column":17},"end":{"line":43,"column":26}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"128","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":46,"column":13},"end":{"line":46,"column":33}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"129","mutatorName":"Logical mutation","replacement":"bucket != null || count \u003E 0","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"130","mutatorName":"Negate expression","replacement":"!(bucket != null \u0026\u0026 count \u003E 0)","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"131","mutatorName":"Equality mutation","replacement":"bucket == null","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":27}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"132","mutatorName":"Equality mutation","replacement":"count \u003C 0","location":{"start":{"line":52,"column":31},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"133","mutatorName":"Equality mutation","replacement":"count \u003E= 0","location":{"start":{"line":52,"column":31},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"134","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":53,"column":9},"end":{"line":55,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"135","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":54,"column":13},"end":{"line":54,"column":55}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"136","mutatorName":"Linq method mutation (Take() to Skip())","replacement":"bucket.Skip(count).ToArray()","location":{"start":{"line":54,"column":26},"end":{"line":54,"column":54}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]}]},"TwoSum.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class TwoSum\r\n{\r\n    public static bool CheckExists(int[] a, int X)\r\n    {\r\n        List\u003Cint\u003E myList = new();\r\n        myList.AddRange(a);\r\n        _ = myList.Remove(X / 2);\r\n        return myList.Any(x =\u003E myList.Contains(X - x));\r\n    }\r\n    public static bool CheckExistsHashed(int[] array, int target)\r\n    {\r\n        HashSet\u003Cint\u003E mySet = new();\r\n        foreach (int element in array)\r\n        {\r\n            if (mySet.Contains(element))\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                _ = mySet.Add(target - element);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","mutants":[{"id":"137","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":11,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["f326a119-ffbe-3a43-8f39-b5d2a0efcdb2","43b3c4e4-e1f7-7658-e5da-9be9b1a67bcc","dcf0a4a5-b8b1-f455-6eaf-f83ddb080b24","4e6ebba8-8db7-a75a-b336-eda4345acf89","60f9d2df-4274-c873-38cb-4b89b5d4b811","05d54333-6e69-05db-d717-3a1935bb35c0","b8db1d6a-0dd2-8a1b-31f7-a92ec0ba5d4c","dbc696fa-b0d9-c6e5-7ae2-3f0a4faac8ce","5937ec22-4d7e-5f2b-e937-3fd3bbe61d74","4114a293-de5f-2fe7-f1cd-6a3279931333","edf92ec2-4f7f-4ef6-f843-6c62d7ea56aa","2897e38f-ac42-955f-0c13-96c8982a8247","3a66fd3c-94be-8e6a-34f3-2f636ebf5db6","b59e9707-e932-cc21-f875-b12166c62f78","a95f6b02-a603-ac7f-64f4-e52ba3b4a2ff","550676ff-6630-eb32-fabb-7668d3ead7e6","1eef4072-1752-fc55-9f76-9888f0559a09","3ef845e8-8b2d-f24b-b3b6-6360b9436cc9","77cb9816-257c-8854-f52c-c23634fe91a5","49a54402-b97d-c636-9cf1-4ee1d4aee25d","47aedff0-1cb6-b28e-8107-b1775f44fe93","ed0cf24b-037c-5f5c-0e44-fe9c88f030d6","5a6a2160-4ffb-3698-a8d3-2df410f01c53","29cb5292-674d-f7ed-c983-7f6d9e361e3b","39e5537c-bdb8-9789-4c12-dec62725fac6","a86f7374-0795-f3c1-dc38-6dd0bde9f63f","48973355-e42f-d298-d35a-52955fa03e0b","a196982b-caea-bba7-fcbd-9afbb260df64","4c94d06a-b240-2dc1-d14e-15ad1f71dfc8","c5a4e2f8-83a2-fdf3-3fea-f867955c0b2f","cb693b08-e609-e4af-c957-03f481a00ce8","34995691-be5a-8a35-503e-f3908f75111e","a05146ec-f84d-bec6-5381-7afaf5175909","75dae38e-c3d4-b471-9646-79f64b7f120b","91e4731d-61ee-b57c-4ac7-bce84a07e9e1","3c224227-de84-9523-7126-588e06a28a70"]},{"id":"138","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":8,"column":9},"end":{"line":8,"column":28}},"status":"Killed","static":false,"coveredBy":["f326a119-ffbe-3a43-8f39-b5d2a0efcdb2","43b3c4e4-e1f7-7658-e5da-9be9b1a67bcc","dcf0a4a5-b8b1-f455-6eaf-f83ddb080b24","4e6ebba8-8db7-a75a-b336-eda4345acf89","60f9d2df-4274-c873-38cb-4b89b5d4b811","05d54333-6e69-05db-d717-3a1935bb35c0","b8db1d6a-0dd2-8a1b-31f7-a92ec0ba5d4c","dbc696fa-b0d9-c6e5-7ae2-3f0a4faac8ce","5937ec22-4d7e-5f2b-e937-3fd3bbe61d74","4114a293-de5f-2fe7-f1cd-6a3279931333","edf92ec2-4f7f-4ef6-f843-6c62d7ea56aa","2897e38f-ac42-955f-0c13-96c8982a8247","3a66fd3c-94be-8e6a-34f3-2f636ebf5db6","b59e9707-e932-cc21-f875-b12166c62f78","a95f6b02-a603-ac7f-64f4-e52ba3b4a2ff","550676ff-6630-eb32-fabb-7668d3ead7e6","1eef4072-1752-fc55-9f76-9888f0559a09","3ef845e8-8b2d-f24b-b3b6-6360b9436cc9","77cb9816-257c-8854-f52c-c23634fe91a5","49a54402-b97d-c636-9cf1-4ee1d4aee25d","47aedff0-1cb6-b28e-8107-b1775f44fe93","ed0cf24b-037c-5f5c-0e44-fe9c88f030d6","5a6a2160-4ffb-3698-a8d3-2df410f01c53","29cb5292-674d-f7ed-c983-7f6d9e361e3b","39e5537c-bdb8-9789-4c12-dec62725fac6","a86f7374-0795-f3c1-dc38-6dd0bde9f63f","48973355-e42f-d298-d35a-52955fa03e0b","a196982b-caea-bba7-fcbd-9afbb260df64","4c94d06a-b240-2dc1-d14e-15ad1f71dfc8","c5a4e2f8-83a2-fdf3-3fea-f867955c0b2f","cb693b08-e609-e4af-c957-03f481a00ce8","34995691-be5a-8a35-503e-f3908f75111e","a05146ec-f84d-bec6-5381-7afaf5175909","75dae38e-c3d4-b471-9646-79f64b7f120b","91e4731d-61ee-b57c-4ac7-bce84a07e9e1","3c224227-de84-9523-7126-588e06a28a70"]},{"id":"139","mutatorName":"Arithmetic mutation","replacement":"X * 2","location":{"start":{"line":9,"column":27},"end":{"line":9,"column":32}},"status":"Killed","static":false,"coveredBy":["f326a119-ffbe-3a43-8f39-b5d2a0efcdb2","43b3c4e4-e1f7-7658-e5da-9be9b1a67bcc","dcf0a4a5-b8b1-f455-6eaf-f83ddb080b24","4e6ebba8-8db7-a75a-b336-eda4345acf89","60f9d2df-4274-c873-38cb-4b89b5d4b811","05d54333-6e69-05db-d717-3a1935bb35c0","b8db1d6a-0dd2-8a1b-31f7-a92ec0ba5d4c","dbc696fa-b0d9-c6e5-7ae2-3f0a4faac8ce","5937ec22-4d7e-5f2b-e937-3fd3bbe61d74","4114a293-de5f-2fe7-f1cd-6a3279931333","edf92ec2-4f7f-4ef6-f843-6c62d7ea56aa","2897e38f-ac42-955f-0c13-96c8982a8247","3a66fd3c-94be-8e6a-34f3-2f636ebf5db6","b59e9707-e932-cc21-f875-b12166c62f78","a95f6b02-a603-ac7f-64f4-e52ba3b4a2ff","550676ff-6630-eb32-fabb-7668d3ead7e6","1eef4072-1752-fc55-9f76-9888f0559a09","3ef845e8-8b2d-f24b-b3b6-6360b9436cc9","77cb9816-257c-8854-f52c-c23634fe91a5","49a54402-b97d-c636-9cf1-4ee1d4aee25d","47aedff0-1cb6-b28e-8107-b1775f44fe93","ed0cf24b-037c-5f5c-0e44-fe9c88f030d6","5a6a2160-4ffb-3698-a8d3-2df410f01c53","29cb5292-674d-f7ed-c983-7f6d9e361e3b","39e5537c-bdb8-9789-4c12-dec62725fac6","a86f7374-0795-f3c1-dc38-6dd0bde9f63f","48973355-e42f-d298-d35a-52955fa03e0b","a196982b-caea-bba7-fcbd-9afbb260df64","4c94d06a-b240-2dc1-d14e-15ad1f71dfc8","c5a4e2f8-83a2-fdf3-3fea-f867955c0b2f","cb693b08-e609-e4af-c957-03f481a00ce8","34995691-be5a-8a35-503e-f3908f75111e","a05146ec-f84d-bec6-5381-7afaf5175909","75dae38e-c3d4-b471-9646-79f64b7f120b","91e4731d-61ee-b57c-4ac7-bce84a07e9e1","3c224227-de84-9523-7126-588e06a28a70"]},{"id":"140","mutatorName":"Linq method mutation (Any() to All())","replacement":"myList.All(x =\u003E myList.Contains(X - x))","location":{"start":{"line":10,"column":16},"end":{"line":10,"column":55}},"status":"Killed","static":false,"coveredBy":["f326a119-ffbe-3a43-8f39-b5d2a0efcdb2","43b3c4e4-e1f7-7658-e5da-9be9b1a67bcc","dcf0a4a5-b8b1-f455-6eaf-f83ddb080b24","4e6ebba8-8db7-a75a-b336-eda4345acf89","60f9d2df-4274-c873-38cb-4b89b5d4b811","05d54333-6e69-05db-d717-3a1935bb35c0","b8db1d6a-0dd2-8a1b-31f7-a92ec0ba5d4c","dbc696fa-b0d9-c6e5-7ae2-3f0a4faac8ce","5937ec22-4d7e-5f2b-e937-3fd3bbe61d74","4114a293-de5f-2fe7-f1cd-6a3279931333","edf92ec2-4f7f-4ef6-f843-6c62d7ea56aa","2897e38f-ac42-955f-0c13-96c8982a8247","3a66fd3c-94be-8e6a-34f3-2f636ebf5db6","b59e9707-e932-cc21-f875-b12166c62f78","a95f6b02-a603-ac7f-64f4-e52ba3b4a2ff","550676ff-6630-eb32-fabb-7668d3ead7e6","1eef4072-1752-fc55-9f76-9888f0559a09","3ef845e8-8b2d-f24b-b3b6-6360b9436cc9","77cb9816-257c-8854-f52c-c23634fe91a5","49a54402-b97d-c636-9cf1-4ee1d4aee25d","47aedff0-1cb6-b28e-8107-b1775f44fe93","ed0cf24b-037c-5f5c-0e44-fe9c88f030d6","5a6a2160-4ffb-3698-a8d3-2df410f01c53","29cb5292-674d-f7ed-c983-7f6d9e361e3b","39e5537c-bdb8-9789-4c12-dec62725fac6","a86f7374-0795-f3c1-dc38-6dd0bde9f63f","48973355-e42f-d298-d35a-52955fa03e0b","a196982b-caea-bba7-fcbd-9afbb260df64","4c94d06a-b240-2dc1-d14e-15ad1f71dfc8","c5a4e2f8-83a2-fdf3-3fea-f867955c0b2f","cb693b08-e609-e4af-c957-03f481a00ce8","34995691-be5a-8a35-503e-f3908f75111e","a05146ec-f84d-bec6-5381-7afaf5175909","75dae38e-c3d4-b471-9646-79f64b7f120b","91e4731d-61ee-b57c-4ac7-bce84a07e9e1","3c224227-de84-9523-7126-588e06a28a70"]},{"id":"141","mutatorName":"Arithmetic mutation","replacement":"X \u002B x","location":{"start":{"line":10,"column":48},"end":{"line":10,"column":53}},"status":"Killed","static":false,"coveredBy":["f326a119-ffbe-3a43-8f39-b5d2a0efcdb2","43b3c4e4-e1f7-7658-e5da-9be9b1a67bcc","dcf0a4a5-b8b1-f455-6eaf-f83ddb080b24","4e6ebba8-8db7-a75a-b336-eda4345acf89","60f9d2df-4274-c873-38cb-4b89b5d4b811","05d54333-6e69-05db-d717-3a1935bb35c0","b8db1d6a-0dd2-8a1b-31f7-a92ec0ba5d4c","dbc696fa-b0d9-c6e5-7ae2-3f0a4faac8ce","5937ec22-4d7e-5f2b-e937-3fd3bbe61d74","4114a293-de5f-2fe7-f1cd-6a3279931333","edf92ec2-4f7f-4ef6-f843-6c62d7ea56aa","2897e38f-ac42-955f-0c13-96c8982a8247","3a66fd3c-94be-8e6a-34f3-2f636ebf5db6","b59e9707-e932-cc21-f875-b12166c62f78","a95f6b02-a603-ac7f-64f4-e52ba3b4a2ff","550676ff-6630-eb32-fabb-7668d3ead7e6","1eef4072-1752-fc55-9f76-9888f0559a09","3ef845e8-8b2d-f24b-b3b6-6360b9436cc9","77cb9816-257c-8854-f52c-c23634fe91a5","49a54402-b97d-c636-9cf1-4ee1d4aee25d","47aedff0-1cb6-b28e-8107-b1775f44fe93","ed0cf24b-037c-5f5c-0e44-fe9c88f030d6","5a6a2160-4ffb-3698-a8d3-2df410f01c53","29cb5292-674d-f7ed-c983-7f6d9e361e3b","39e5537c-bdb8-9789-4c12-dec62725fac6","a86f7374-0795-f3c1-dc38-6dd0bde9f63f","48973355-e42f-d298-d35a-52955fa03e0b","a196982b-caea-bba7-fcbd-9afbb260df64","4c94d06a-b240-2dc1-d14e-15ad1f71dfc8","c5a4e2f8-83a2-fdf3-3fea-f867955c0b2f","cb693b08-e609-e4af-c957-03f481a00ce8","34995691-be5a-8a35-503e-f3908f75111e","a05146ec-f84d-bec6-5381-7afaf5175909","75dae38e-c3d4-b471-9646-79f64b7f120b","91e4731d-61ee-b57c-4ac7-bce84a07e9e1","3c224227-de84-9523-7126-588e06a28a70"]},{"id":"142","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":13,"column":5},"end":{"line":27,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4817a15f-3d21-f951-00c1-58d0cf375010","a8704443-c8b1-21dd-e809-dc6222b4aa8c","4943b247-777a-6adc-10c6-5091ddff347e","ac47f298-7ba1-840a-7d1d-eb293e0339d6","16e15d6a-6376-aefa-c447-21f73788a45c","2fd0397c-7460-2e56-1bb7-86a540f86742","ca553e89-6f7b-e82b-ac6a-7a3d96a78f05","262f178d-f296-3642-e171-262282e1bfc9","1a644b2a-e0fe-4938-0221-2d185fda0beb","95f11559-a490-fa02-1512-76b80c41ba48","480a4cf7-fe8c-b5c1-d56e-cb82f96ff51f","797744c2-006b-5171-fc92-9e4c0f35322c","1e2b33af-3f32-63e4-f3f9-75d8b28b7ef3","13c5570a-6a9f-fa68-e885-7df1cda79c2f","43193ba7-04c1-ebe4-091c-3cf306034d71","325e096e-530d-4809-2cf3-82a8e9903429","2bb60a9e-4583-b4d9-da0e-43d58bd80554","c3f00f5f-3a56-7069-3e44-cf18a161c699","be179376-7d82-c4f8-0995-28525909d663","258a43af-3b11-5ac2-fa68-50a161bc49a5","5f07de31-e76e-ef9f-698f-64fb99ecf955","fe867530-9246-3dfa-cedd-d00e19383424","ab6fac01-c341-6cdd-75d3-ba19101450b2","2f49d6fe-9f87-d312-deea-aba8459846d3","4bf2ea1a-26c7-5cb0-7a74-4396c196309d","8a112840-ba98-5394-8e39-810ce80a3681","495d0340-3cc6-fd37-9c42-760452c26f9f","2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","b0a6945e-4d43-3ae4-6ca0-988252fd4119","f6f90469-1d07-ce64-16ae-0faa26f0c11e","86ca177d-5d99-f203-5385-a89263dda901","93466060-92f2-effd-b17b-e4a35e654a27","9ff43b75-4f9d-8c40-8e81-d6b93775b0b1"]},{"id":"143","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":16,"column":9},"end":{"line":25,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4817a15f-3d21-f951-00c1-58d0cf375010","a8704443-c8b1-21dd-e809-dc6222b4aa8c","4943b247-777a-6adc-10c6-5091ddff347e","ac47f298-7ba1-840a-7d1d-eb293e0339d6","16e15d6a-6376-aefa-c447-21f73788a45c","2fd0397c-7460-2e56-1bb7-86a540f86742","ca553e89-6f7b-e82b-ac6a-7a3d96a78f05","262f178d-f296-3642-e171-262282e1bfc9","1a644b2a-e0fe-4938-0221-2d185fda0beb","95f11559-a490-fa02-1512-76b80c41ba48","480a4cf7-fe8c-b5c1-d56e-cb82f96ff51f","797744c2-006b-5171-fc92-9e4c0f35322c","1e2b33af-3f32-63e4-f3f9-75d8b28b7ef3","13c5570a-6a9f-fa68-e885-7df1cda79c2f","43193ba7-04c1-ebe4-091c-3cf306034d71","325e096e-530d-4809-2cf3-82a8e9903429","2bb60a9e-4583-b4d9-da0e-43d58bd80554","c3f00f5f-3a56-7069-3e44-cf18a161c699","be179376-7d82-c4f8-0995-28525909d663","258a43af-3b11-5ac2-fa68-50a161bc49a5","5f07de31-e76e-ef9f-698f-64fb99ecf955","fe867530-9246-3dfa-cedd-d00e19383424","ab6fac01-c341-6cdd-75d3-ba19101450b2","2f49d6fe-9f87-d312-deea-aba8459846d3","4bf2ea1a-26c7-5cb0-7a74-4396c196309d","8a112840-ba98-5394-8e39-810ce80a3681","495d0340-3cc6-fd37-9c42-760452c26f9f","2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","b0a6945e-4d43-3ae4-6ca0-988252fd4119","f6f90469-1d07-ce64-16ae-0faa26f0c11e","86ca177d-5d99-f203-5385-a89263dda901","93466060-92f2-effd-b17b-e4a35e654a27","9ff43b75-4f9d-8c40-8e81-d6b93775b0b1"]},{"id":"144","mutatorName":"Negate expression","replacement":"!(mySet.Contains(element))","location":{"start":{"line":17,"column":17},"end":{"line":17,"column":40}},"status":"Killed","static":false,"coveredBy":["4817a15f-3d21-f951-00c1-58d0cf375010","a8704443-c8b1-21dd-e809-dc6222b4aa8c","4943b247-777a-6adc-10c6-5091ddff347e","ac47f298-7ba1-840a-7d1d-eb293e0339d6","16e15d6a-6376-aefa-c447-21f73788a45c","2fd0397c-7460-2e56-1bb7-86a540f86742","ca553e89-6f7b-e82b-ac6a-7a3d96a78f05","262f178d-f296-3642-e171-262282e1bfc9","1a644b2a-e0fe-4938-0221-2d185fda0beb","95f11559-a490-fa02-1512-76b80c41ba48","480a4cf7-fe8c-b5c1-d56e-cb82f96ff51f","797744c2-006b-5171-fc92-9e4c0f35322c","1e2b33af-3f32-63e4-f3f9-75d8b28b7ef3","13c5570a-6a9f-fa68-e885-7df1cda79c2f","43193ba7-04c1-ebe4-091c-3cf306034d71","325e096e-530d-4809-2cf3-82a8e9903429","2bb60a9e-4583-b4d9-da0e-43d58bd80554","c3f00f5f-3a56-7069-3e44-cf18a161c699","be179376-7d82-c4f8-0995-28525909d663","258a43af-3b11-5ac2-fa68-50a161bc49a5","5f07de31-e76e-ef9f-698f-64fb99ecf955","fe867530-9246-3dfa-cedd-d00e19383424","ab6fac01-c341-6cdd-75d3-ba19101450b2","2f49d6fe-9f87-d312-deea-aba8459846d3","4bf2ea1a-26c7-5cb0-7a74-4396c196309d","8a112840-ba98-5394-8e39-810ce80a3681","495d0340-3cc6-fd37-9c42-760452c26f9f","2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","b0a6945e-4d43-3ae4-6ca0-988252fd4119","f6f90469-1d07-ce64-16ae-0faa26f0c11e","86ca177d-5d99-f203-5385-a89263dda901","93466060-92f2-effd-b17b-e4a35e654a27","9ff43b75-4f9d-8c40-8e81-d6b93775b0b1"]},{"id":"145","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":18,"column":13},"end":{"line":20,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4817a15f-3d21-f951-00c1-58d0cf375010","262f178d-f296-3642-e171-262282e1bfc9","1a644b2a-e0fe-4938-0221-2d185fda0beb","95f11559-a490-fa02-1512-76b80c41ba48","43193ba7-04c1-ebe4-091c-3cf306034d71","325e096e-530d-4809-2cf3-82a8e9903429","be179376-7d82-c4f8-0995-28525909d663","258a43af-3b11-5ac2-fa68-50a161bc49a5","495d0340-3cc6-fd37-9c42-760452c26f9f","2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","93466060-92f2-effd-b17b-e4a35e654a27"]},{"id":"146","mutatorName":"Boolean mutation","replacement":"false","location":{"start":{"line":19,"column":24},"end":{"line":19,"column":28}},"status":"Killed","static":false,"coveredBy":["4817a15f-3d21-f951-00c1-58d0cf375010","262f178d-f296-3642-e171-262282e1bfc9","1a644b2a-e0fe-4938-0221-2d185fda0beb","95f11559-a490-fa02-1512-76b80c41ba48","43193ba7-04c1-ebe4-091c-3cf306034d71","325e096e-530d-4809-2cf3-82a8e9903429","be179376-7d82-c4f8-0995-28525909d663","258a43af-3b11-5ac2-fa68-50a161bc49a5","495d0340-3cc6-fd37-9c42-760452c26f9f","2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","93466060-92f2-effd-b17b-e4a35e654a27"]},{"id":"147","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":22,"column":13},"end":{"line":24,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4817a15f-3d21-f951-00c1-58d0cf375010","a8704443-c8b1-21dd-e809-dc6222b4aa8c","4943b247-777a-6adc-10c6-5091ddff347e","ac47f298-7ba1-840a-7d1d-eb293e0339d6","16e15d6a-6376-aefa-c447-21f73788a45c","2fd0397c-7460-2e56-1bb7-86a540f86742","ca553e89-6f7b-e82b-ac6a-7a3d96a78f05","262f178d-f296-3642-e171-262282e1bfc9","1a644b2a-e0fe-4938-0221-2d185fda0beb","95f11559-a490-fa02-1512-76b80c41ba48","480a4cf7-fe8c-b5c1-d56e-cb82f96ff51f","797744c2-006b-5171-fc92-9e4c0f35322c","1e2b33af-3f32-63e4-f3f9-75d8b28b7ef3","13c5570a-6a9f-fa68-e885-7df1cda79c2f","43193ba7-04c1-ebe4-091c-3cf306034d71","325e096e-530d-4809-2cf3-82a8e9903429","2bb60a9e-4583-b4d9-da0e-43d58bd80554","c3f00f5f-3a56-7069-3e44-cf18a161c699","be179376-7d82-c4f8-0995-28525909d663","258a43af-3b11-5ac2-fa68-50a161bc49a5","5f07de31-e76e-ef9f-698f-64fb99ecf955","fe867530-9246-3dfa-cedd-d00e19383424","ab6fac01-c341-6cdd-75d3-ba19101450b2","2f49d6fe-9f87-d312-deea-aba8459846d3","4bf2ea1a-26c7-5cb0-7a74-4396c196309d","8a112840-ba98-5394-8e39-810ce80a3681","495d0340-3cc6-fd37-9c42-760452c26f9f","2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","b0a6945e-4d43-3ae4-6ca0-988252fd4119","f6f90469-1d07-ce64-16ae-0faa26f0c11e","86ca177d-5d99-f203-5385-a89263dda901","93466060-92f2-effd-b17b-e4a35e654a27","9ff43b75-4f9d-8c40-8e81-d6b93775b0b1"]},{"id":"148","mutatorName":"Arithmetic mutation","replacement":"target \u002B element","location":{"start":{"line":23,"column":31},"end":{"line":23,"column":47}},"status":"Killed","static":false,"coveredBy":["4817a15f-3d21-f951-00c1-58d0cf375010","a8704443-c8b1-21dd-e809-dc6222b4aa8c","4943b247-777a-6adc-10c6-5091ddff347e","ac47f298-7ba1-840a-7d1d-eb293e0339d6","16e15d6a-6376-aefa-c447-21f73788a45c","2fd0397c-7460-2e56-1bb7-86a540f86742","ca553e89-6f7b-e82b-ac6a-7a3d96a78f05","262f178d-f296-3642-e171-262282e1bfc9","1a644b2a-e0fe-4938-0221-2d185fda0beb","95f11559-a490-fa02-1512-76b80c41ba48","480a4cf7-fe8c-b5c1-d56e-cb82f96ff51f","797744c2-006b-5171-fc92-9e4c0f35322c","1e2b33af-3f32-63e4-f3f9-75d8b28b7ef3","13c5570a-6a9f-fa68-e885-7df1cda79c2f","43193ba7-04c1-ebe4-091c-3cf306034d71","325e096e-530d-4809-2cf3-82a8e9903429","2bb60a9e-4583-b4d9-da0e-43d58bd80554","c3f00f5f-3a56-7069-3e44-cf18a161c699","be179376-7d82-c4f8-0995-28525909d663","258a43af-3b11-5ac2-fa68-50a161bc49a5","5f07de31-e76e-ef9f-698f-64fb99ecf955","fe867530-9246-3dfa-cedd-d00e19383424","ab6fac01-c341-6cdd-75d3-ba19101450b2","2f49d6fe-9f87-d312-deea-aba8459846d3","4bf2ea1a-26c7-5cb0-7a74-4396c196309d","8a112840-ba98-5394-8e39-810ce80a3681","495d0340-3cc6-fd37-9c42-760452c26f9f","2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","b0a6945e-4d43-3ae4-6ca0-988252fd4119","f6f90469-1d07-ce64-16ae-0faa26f0c11e","86ca177d-5d99-f203-5385-a89263dda901","93466060-92f2-effd-b17b-e4a35e654a27","9ff43b75-4f9d-8c40-8e81-d6b93775b0b1"]},{"id":"149","mutatorName":"Boolean mutation","replacement":"true","location":{"start":{"line":26,"column":16},"end":{"line":26,"column":21}},"status":"Killed","static":false,"coveredBy":["a8704443-c8b1-21dd-e809-dc6222b4aa8c","4943b247-777a-6adc-10c6-5091ddff347e","ac47f298-7ba1-840a-7d1d-eb293e0339d6","16e15d6a-6376-aefa-c447-21f73788a45c","2fd0397c-7460-2e56-1bb7-86a540f86742","ca553e89-6f7b-e82b-ac6a-7a3d96a78f05","480a4cf7-fe8c-b5c1-d56e-cb82f96ff51f","797744c2-006b-5171-fc92-9e4c0f35322c","1e2b33af-3f32-63e4-f3f9-75d8b28b7ef3","13c5570a-6a9f-fa68-e885-7df1cda79c2f","2bb60a9e-4583-b4d9-da0e-43d58bd80554","c3f00f5f-3a56-7069-3e44-cf18a161c699","5f07de31-e76e-ef9f-698f-64fb99ecf955","fe867530-9246-3dfa-cedd-d00e19383424","ab6fac01-c341-6cdd-75d3-ba19101450b2","2f49d6fe-9f87-d312-deea-aba8459846d3","4bf2ea1a-26c7-5cb0-7a74-4396c196309d","8a112840-ba98-5394-8e39-810ce80a3681","b0a6945e-4d43-3ae4-6ca0-988252fd4119","f6f90469-1d07-ce64-16ae-0faa26f0c11e","86ca177d-5d99-f203-5385-a89263dda901","9ff43b75-4f9d-8c40-8e81-d6b93775b0b1"]}]},"usings.cs":{"language":"cs","source":"global using System;\r\nglobal using System.Collections.Generic;\r\nglobal using System.Linq;\r\n","mutants":[]}},"testFiles":{"C:\\Users\\kushal\\src\\mydotnet\\tests\\BubbleSortTests.cs":{"language":"cs","source":"using hellolib;\r\nnamespace tests;\r\n\r\npublic class BubbleSortTests\r\n{\r\n    [Fact]\r\n    public void SortSingleElementSortedArray()\r\n    {\r\n        int[] input = { 1 };\r\n        Assert.Equal(BubbleSort.SortIntegers(input), input);\r\n    }\r\n    [Fact]\r\n    public void SortTwoElementSortedArray()\r\n    {\r\n        int[] input = { 1, 2 };\r\n        Assert.Equal(BubbleSort.SortIntegers(input), input);\r\n    }\r\n    [Fact]\r\n    public void SortThreeElementSortedArray()\r\n    {\r\n        int[] input = { 1, 2, 3 };\r\n        Assert.Equal(input, BubbleSort.SortIntegers(input));\r\n    }\r\n    [Fact]\r\n    public void SortFourElementSortedArray()\r\n    {\r\n        int[] input = { 1, 2, 3, 4 };\r\n        Assert.Equal(input, BubbleSort.SortIntegers(input));\r\n    }\r\n    [Fact]\r\n    public void SortThreeElementUnsortedArray()\r\n    {\r\n        int[] input = { 3, 2, 1 };\r\n        int[] expectedOutput = { 1, 2, 3 };\r\n        Assert.Equal(expectedOutput, BubbleSort.SortIntegers(input));\r\n    }\r\n}","tests":[{"id":"b0ccf2ae-631f-fff2-1875-809f04ffca3d","name":"tests.BubbleSortTests.SortSingleElementSortedArray","location":{"start":{"line":6,"column":5},"end":{"line":11,"column":6}}},{"id":"2f7f110c-0ab0-65ba-76c2-83f89ae13e44","name":"tests.BubbleSortTests.SortTwoElementSortedArray","location":{"start":{"line":12,"column":5},"end":{"line":17,"column":6}}},{"id":"5f445bed-e608-58ea-1e53-9469716a7956","name":"tests.BubbleSortTests.SortThreeElementSortedArray","location":{"start":{"line":18,"column":5},"end":{"line":23,"column":6}}},{"id":"b74b1831-3ca4-6aea-9eda-92df66068c43","name":"tests.BubbleSortTests.SortFourElementSortedArray","location":{"start":{"line":24,"column":5},"end":{"line":29,"column":6}}},{"id":"31b4d58c-a32c-2fc1-7dba-f960babab4a6","name":"tests.BubbleSortTests.SortThreeElementUnsortedArray","location":{"start":{"line":30,"column":5},"end":{"line":36,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MinimumCoinTests.cs":{"language":"cs","source":"using FluentAssertions;\r\nusing hellolib;\r\nusing System.Collections.Generic;\r\n\r\nnamespace tests;\r\n\r\npublic class MinimumCoinTests\r\n{\r\n    private MinimumCoin minimumCoin;\r\n    public MinimumCoinTests()\r\n    {\r\n        List\u003Cint\u003E coinValues = new() { 1, 5, 10, 25 };\r\n        minimumCoin = new MinimumCoin(CoinSet: coinValues, RepeatFactor: 5);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(2, 2, 4)]\r\n    [InlineData(1, 2, 3)]\r\n    [InlineData(0, 2, 2)]\r\n    [InlineData(2, 0, 2)]\r\n    [InlineData(9, 5, 14)]\r\n    [InlineData(24, 24, 48)]\r\n    public void Freebie(int firstNumber, int secondNumber, int expectedSum)\r\n    {\r\n        // Arrange, Act\r\n        int actualSum = firstNumber \u002B secondNumber;\r\n\r\n        // Assert \r\n        _ = actualSum.Should().Be(expectedSum, $\u0022because {firstNumber} \u002B {secondNumber} is {expectedSum}\u0022, new List\u003Cint\u003E[firstNumber, secondNumber, actualSum]);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(0)]\r\n    [InlineData(1)]\r\n    public void GetTrivialCase(int input)\r\n    {\r\n        Assert.Equal(input, minimumCoin.GetCount(input));\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCaseOfTwoCoins()\r\n    {\r\n        if (minimumCoin.CoinSet.Count \u003E 1 \u0026\u0026 !minimumCoin.CoinSet.Contains(minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1]))\r\n        {\r\n            int total = minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1];\r\n            int actual = minimumCoin.GetCount(total);\r\n            Assert.Equal(2, actual);\r\n        }\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCaseOfFourCoins()\r\n    {\r\n        int total = minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1] \u002B minimumCoin.CoinSet[2] \u002B minimumCoin.CoinSet[3];\r\n        if (minimumCoin.CoinSet.Count \u003E 1 \u0026\u0026 !minimumCoin.CoinSet.Contains(total))\r\n        {\r\n            ;\r\n            int actual = minimumCoin.GetCount(total);\r\n            Assert.Equal(4, actual);\r\n        }\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCaseOfEightCoins()\r\n    {\r\n        int total = minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1] \u002B minimumCoin.CoinSet[2] \u002B minimumCoin.CoinSet[3] \u002B minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1] \u002B minimumCoin.CoinSet[2] \u002B minimumCoin.CoinSet[3];\r\n        if (minimumCoin.CoinSet.Count \u003E 1 \u0026\u0026 !minimumCoin.CoinSet.Contains(total))\r\n        {\r\n            ;\r\n            int actual = minimumCoin.GetCount(total);\r\n            Assert.True(6 \u003E= actual);\r\n        }\r\n    }\r\n\r\n    [Fact]\r\n    public void GetFreqLabsTwoCoins()\r\n    {\r\n        List\u003Cint\u003E coinValues = new() { 1, 120, 200 };\r\n        minimumCoin = new MinimumCoin(CoinSet: coinValues, RepeatFactor: 6);\r\n        Assert.Equal(2, minimumCoin.GetCount(240));\r\n    }\r\n}\r\n","tests":[{"id":"9e01b8cd-1ddd-f798-b5b5-2fa7d0d284ac","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":16,"column":5},"end":{"line":30,"column":6}}},{"id":"3a647d9d-4ccb-2f02-188f-e813e8fa605d","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":16,"column":5},"end":{"line":30,"column":6}}},{"id":"7b55b4ad-fbf4-9946-f369-9ae17323ae09","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":16,"column":5},"end":{"line":30,"column":6}}},{"id":"277e994e-7f1c-0621-9879-825415314b44","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":16,"column":5},"end":{"line":30,"column":6}}},{"id":"91c00e68-908b-20bc-40b2-66d9554d6cca","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":16,"column":5},"end":{"line":30,"column":6}}},{"id":"2e11568c-b519-147a-4fad-dc7e4cf97d36","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":16,"column":5},"end":{"line":30,"column":6}}},{"id":"1ebd7347-1c60-2e79-6f0e-186e51c1f869","name":"tests.MinimumCoinTests.GetTrivialCase","location":{"start":{"line":32,"column":5},"end":{"line":38,"column":6}}},{"id":"a4243e4d-a0ed-16a6-45d4-6d66872b1aae","name":"tests.MinimumCoinTests.GetTrivialCase","location":{"start":{"line":32,"column":5},"end":{"line":38,"column":6}}},{"id":"7b12073b-4caf-0278-4223-253feac2f41f","name":"tests.MinimumCoinTests.GetCaseOfTwoCoins","location":{"start":{"line":40,"column":5},"end":{"line":49,"column":6}}},{"id":"a7b83bdd-5dd9-2392-f6fd-25d15a221026","name":"tests.MinimumCoinTests.GetCaseOfFourCoins","location":{"start":{"line":51,"column":5},"end":{"line":61,"column":6}}},{"id":"ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","name":"tests.MinimumCoinTests.GetCaseOfEightCoins","location":{"start":{"line":63,"column":5},"end":{"line":73,"column":6}}},{"id":"2c593edd-2d3d-d18c-ecb1-e41bec15525f","name":"tests.MinimumCoinTests.GetFreqLabsTwoCoins","location":{"start":{"line":75,"column":5},"end":{"line":81,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MyReverseBinarySearchTests.cs":{"language":"cs","source":"using hellolib;\r\nnamespace tests;\r\n\r\npublic class MyReverseBinarySearchTests\r\n{\r\n    [Fact]\r\n    public void BinarySearchDoesNotExist()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesNotExistOdd()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist2()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd2()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist3()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd3()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4Twice()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 4, 5, 6 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4Twice()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 4, 5, 6, 7 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchExistsKhan()\r\n    {\r\n        int[] primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\r\n        int result = MySearch.ReverseBinarySearchIntegers(primes, 73);\r\n        Assert.Equal(20, result);\r\n    }\r\n}","tests":[{"id":"ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesNotExist","location":{"start":{"line":6,"column":5},"end":{"line":12,"column":6}}},{"id":"22d3e955-f5d7-570a-db78-603e2def3d23","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesNotExistOdd","location":{"start":{"line":13,"column":5},"end":{"line":19,"column":6}}},{"id":"db4f3a93-b6de-53f9-1103-3efa90090697","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist","location":{"start":{"line":20,"column":5},"end":{"line":26,"column":6}}},{"id":"3f955e28-0bb7-fc0d-1447-b7d272cedeba","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd","location":{"start":{"line":27,"column":5},"end":{"line":33,"column":6}}},{"id":"17113666-da63-5ab3-a75b-e0cf4167fb8e","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist2","location":{"start":{"line":34,"column":5},"end":{"line":40,"column":6}}},{"id":"6c01b839-96f5-011f-f967-992d8632f626","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd2","location":{"start":{"line":41,"column":5},"end":{"line":47,"column":6}}},{"id":"bbdefb79-028f-be2b-05a7-ef4ea8be416f","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist3","location":{"start":{"line":48,"column":5},"end":{"line":54,"column":6}}},{"id":"2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd3","location":{"start":{"line":55,"column":5},"end":{"line":61,"column":6}}},{"id":"bb3e6de6-ec9f-19f5-2cee-430dfa54440c","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist4","location":{"start":{"line":62,"column":5},"end":{"line":68,"column":6}}},{"id":"837b18cf-2ffe-5b57-a17e-70344288cfc1","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd4","location":{"start":{"line":69,"column":5},"end":{"line":75,"column":6}}},{"id":"6ef2944e-9d8d-6b74-d27d-95bb0a893b14","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist4Twice","location":{"start":{"line":76,"column":5},"end":{"line":82,"column":6}}},{"id":"9b442e8f-d064-71df-a253-e2f688be89be","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd4Twice","location":{"start":{"line":83,"column":5},"end":{"line":89,"column":6}}},{"id":"54126116-86fa-4260-3817-8332d0a799f6","name":"tests.MyReverseBinarySearchTests.BinarySearchExistsKhan","location":{"start":{"line":90,"column":5},"end":{"line":96,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MySearchTests.cs":{"language":"cs","source":"using hellolib;\r\nnamespace tests;\r\n\r\npublic class MySearchTests\r\n{\r\n    [Fact]\r\n    public void LinearSearchTestDoesNotExist()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 9;\r\n        Assert.False(MySearch.LinearSearchIntegers(arrayToSearch, queryItem));\r\n    }\r\n    [Fact]\r\n    public void LinearSearchTestDoesExist()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.LinearSearchIntegers(arrayToSearch, queryItem));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesNotExist()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesNotExistOdd()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist2()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd2()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist3()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd3()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 5, 6, 7 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4Twice()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 4, 5, 6 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4Twice()\r\n    {\r\n        int[] arrayToSearch = { 1, 2, 3, 4, 4, 5, 6, 7 };\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchExistsKhan()\r\n    {\r\n        int[] primes = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97 };\r\n        int result = MySearch.BinarySearchIntegers(primes, 73);\r\n        Assert.Equal(20, result);\r\n    }\r\n}","tests":[{"id":"502c844e-261a-7cd0-9579-e4b580c23444","name":"tests.MySearchTests.LinearSearchTestDoesNotExist","location":{"start":{"line":6,"column":5},"end":{"line":12,"column":6}}},{"id":"26ae7b32-529d-b07a-f504-48dd302a8491","name":"tests.MySearchTests.LinearSearchTestDoesExist","location":{"start":{"line":13,"column":5},"end":{"line":19,"column":6}}},{"id":"7191c288-1d1b-359b-35d8-15911f29bb34","name":"tests.MySearchTests.BinarySearchDoesNotExist","location":{"start":{"line":20,"column":5},"end":{"line":26,"column":6}}},{"id":"3df404e0-c303-ce1a-90ba-d39c35bd1189","name":"tests.MySearchTests.BinarySearchDoesNotExistOdd","location":{"start":{"line":27,"column":5},"end":{"line":33,"column":6}}},{"id":"b9f67719-a803-f62e-9d59-ba43955028d8","name":"tests.MySearchTests.BinarySearchDoesExist","location":{"start":{"line":34,"column":5},"end":{"line":40,"column":6}}},{"id":"253c806f-2044-9dd3-fd26-dec5e8a56d29","name":"tests.MySearchTests.BinarySearchDoesExistOdd","location":{"start":{"line":41,"column":5},"end":{"line":47,"column":6}}},{"id":"73c3cbec-da95-5aed-833b-724cb0744820","name":"tests.MySearchTests.BinarySearchDoesExist2","location":{"start":{"line":48,"column":5},"end":{"line":54,"column":6}}},{"id":"f784e7c8-0af3-f319-779d-1a5cf328ce28","name":"tests.MySearchTests.BinarySearchDoesExistOdd2","location":{"start":{"line":55,"column":5},"end":{"line":61,"column":6}}},{"id":"6dedaf10-effa-2c3c-c774-db46b1a1a1ce","name":"tests.MySearchTests.BinarySearchDoesExist3","location":{"start":{"line":62,"column":5},"end":{"line":68,"column":6}}},{"id":"3c4f43bb-d883-884e-2619-ec62fcb59835","name":"tests.MySearchTests.BinarySearchDoesExistOdd3","location":{"start":{"line":69,"column":5},"end":{"line":75,"column":6}}},{"id":"5428c202-02ec-cdcb-0412-0edb0492d23f","name":"tests.MySearchTests.BinarySearchDoesExist4","location":{"start":{"line":76,"column":5},"end":{"line":82,"column":6}}},{"id":"51dd6172-85c2-5fdf-0907-cf19cd1714dd","name":"tests.MySearchTests.BinarySearchDoesExistOdd4","location":{"start":{"line":83,"column":5},"end":{"line":89,"column":6}}},{"id":"1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","name":"tests.MySearchTests.BinarySearchDoesExist4Twice","location":{"start":{"line":90,"column":5},"end":{"line":96,"column":6}}},{"id":"4d0235b6-972b-2b6c-4a72-b2b320eb26f4","name":"tests.MySearchTests.BinarySearchDoesExistOdd4Twice","location":{"start":{"line":97,"column":5},"end":{"line":103,"column":6}}},{"id":"5507614f-2e67-d4ee-b0bd-b1a022f939fe","name":"tests.MySearchTests.BinarySearchExistsKhan","location":{"start":{"line":104,"column":5},"end":{"line":110,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\PersonTests.cs":{"language":"cs","source":"using hellolib;\r\nusing System;\r\nusing FluentAssertions;\r\nnamespace tests;\r\n\r\npublic class PersonTests\r\n{\r\n    [Theory]\r\n    [InlineData(\u0022Pratikchhya Shrestha\u0022, \u002212345678\u0022)]\r\n    public void CreatePersonWithNameSucceeds(string name, string password)\r\n    {\r\n        Person person = PersonFactory.Create(name, password);\r\n        // Assert.Equal(\u0022Pratikchhya Shrestha\u0022, person.Name);\r\n        person.Name.Should().Be(\u0022Pratikchhya Shrestha\u0022);\r\n        person.CreatedBy.Should().Be(\u0022System\u0022);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(\u0022Pratikchhya Shrestha\u0022, \u0022hunter2\u0022)]\r\n    [InlineData(\u0022Pratikchhya Shrestha\u0022, \u0022abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\u0022)]\r\n    public void ShortOrLongPasswordsFail(string name, string password)\r\n    {\r\n        try\r\n        {\r\n            Person person = PersonFactory.Create(name, password);\r\n        }\r\n        catch (ArgumentException e)\r\n        {\r\n            Assert.NotNull(e);\r\n            int MINIMUM_PASSWORD_LENGTH = 8;\r\n            int MAXIMUM_PASSWORD_LENGTH = 128;\r\n            e.Message.Should().Be($\u0022The password provided to create user {name} is not valid. A password must have a minimum length no shorter than {MINIMUM_PASSWORD_LENGTH} and no longer than {MAXIMUM_PASSWORD_LENGTH}.\u0022);\r\n        }\r\n    }\r\n}\r\n","tests":[{"id":"355cce6c-71ea-1aaa-5396-efa48648a5ad","name":"tests.PersonTests.CreatePersonWithNameSucceeds","location":{"start":{"line":8,"column":5},"end":{"line":16,"column":6}}},{"id":"040b632d-f383-a745-26dd-403448bfcd4e","name":"tests.PersonTests.ShortOrLongPasswordsFail","location":{"start":{"line":18,"column":5},"end":{"line":34,"column":6}}},{"id":"7496b161-1706-bc32-80f9-8f61a53bf59d","name":"tests.PersonTests.ShortOrLongPasswordsFail","location":{"start":{"line":18,"column":5},"end":{"line":34,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\RevocationTests.cs":{"language":"cs","source":"using FluentAssertions;\r\nusing hellolib;\r\nusing System.Collections.Generic;\r\n\r\nnamespace tests;\r\n\r\npublic class RevocationTests\r\n{\r\n    [Fact]\r\n    public void Freebie()\r\n    {\r\n        Assert.True(true);\r\n    }\r\n\r\n    [Fact]\r\n    public void ReadCsv_ShouldReturnTokens()\r\n    {\r\n        // arrange\r\n        string filename = \u0022authorizations.csv\u0022;\r\n\r\n        // act\r\n        List\u003Cstring\u003E authorizationIds = Revocation.ReadCsv(filename);\r\n\r\n        // assert\r\n        _ = authorizationIds.Count.Should().Be(187749);\r\n    }\r\n\r\n\r\n    [Fact]\r\n    public void GetBatches()\r\n    {\r\n        // arrange\r\n        string filename = \u0022authorizations.csv\u0022;\r\n\r\n        // act\r\n        Revocation.GetBatches(filename, 10);\r\n\r\n        Assert.True(true);\r\n    }\r\n}\r\n","tests":[{"id":"ca5aa045-e0c3-5c00-9975-67bb64a583ea","name":"tests.RevocationTests.Freebie","location":{"start":{"line":9,"column":5},"end":{"line":13,"column":6}}},{"id":"61150559-0a50-a8ab-53ea-098d910e2676","name":"tests.RevocationTests.ReadCsv_ShouldReturnTokens","location":{"start":{"line":15,"column":5},"end":{"line":26,"column":6}}},{"id":"a4247d49-865b-8d8f-0004-3cf017e13f95","name":"tests.RevocationTests.GetBatches","location":{"start":{"line":29,"column":5},"end":{"line":39,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\TwoSumTests.cs":{"language":"cs","source":"using hellolib;\r\nnamespace tests;\r\n\r\npublic class TwoSumTests\r\n{\r\n    [Fact]\r\n    public void Freebie()\r\n    {\r\n        Assert.True(true);\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 02, 8 }, 10)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 8 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 22, 8 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 32, 8 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 42, 8 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 52, 8 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 62, 8 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 72, 8 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 82, 8 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 92, 8 }, 100)]\r\n    public void SumExistsInCheckExists(int[] a, int X)\r\n    {\r\n        Assert.True(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 9 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 22, 9 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 32, 9 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 42, 9 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 52, 9 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 62, 9 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 72, 9 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 82, 9 }, 90)]\r\n    public void SumDoesNotExistInCheckExists(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 90)]\r\n    public void SumDoesNotExistInCheckExistsTen(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 09 }, 10)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 19 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 29 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 39 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 49 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 59 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 69 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 79 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 89 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 99 }, 100)]\r\n    public void SumExistsInCheckExistsTen(int[] a, int X)\r\n    {\r\n        Assert.True(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 08 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 18 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 28 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 38 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 48 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 58 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 68 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 78 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 88 }, 100)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 98 }, 110)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 108 }, 120)]\r\n    public void SumExistsInCheckExistsHashed(int[] a, int X)\r\n    {\r\n        Assert.True(TwoSum.CheckExistsHashed(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 09 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 19 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 29 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 39 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 49 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 59 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 69 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 79 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 89 }, 100)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 99 }, 110)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 109 }, 120)]\r\n    public void SumDoesNotExistInCheckExistsHashedTen(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExistsHashed(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 09 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 19 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 29 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 39 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 49 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 59 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 69 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 79 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 89 }, 100)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 99 }, 110)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 109 }, 120)]\r\n    public void SumDoesNotExistInCheckExistsHashed(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExistsHashed(a, X));\r\n    }\r\n}","tests":[{"id":"7892f354-9019-c193-dd24-4ccb214c3e1a","name":"tests.TwoSumTests.Freebie","location":{"start":{"line":6,"column":5},"end":{"line":10,"column":6}}},{"id":"550676ff-6630-eb32-fabb-7668d3ead7e6","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"60f9d2df-4274-c873-38cb-4b89b5d4b811","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"a95f6b02-a603-ac7f-64f4-e52ba3b4a2ff","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"b59e9707-e932-cc21-f875-b12166c62f78","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"ed0cf24b-037c-5f5c-0e44-fe9c88f030d6","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"47aedff0-1cb6-b28e-8107-b1775f44fe93","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"49a54402-b97d-c636-9cf1-4ee1d4aee25d","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"77cb9816-257c-8854-f52c-c23634fe91a5","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"3c224227-de84-9523-7126-588e06a28a70","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"91e4731d-61ee-b57c-4ac7-bce84a07e9e1","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":11,"column":5},"end":{"line":25,"column":6}}},{"id":"75dae38e-c3d4-b471-9646-79f64b7f120b","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"a05146ec-f84d-bec6-5381-7afaf5175909","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"edf92ec2-4f7f-4ef6-f843-6c62d7ea56aa","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"dbc696fa-b0d9-c6e5-7ae2-3f0a4faac8ce","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"29cb5292-674d-f7ed-c983-7f6d9e361e3b","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"5a6a2160-4ffb-3698-a8d3-2df410f01c53","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"43b3c4e4-e1f7-7658-e5da-9be9b1a67bcc","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"f326a119-ffbe-3a43-8f39-b5d2a0efcdb2","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":26,"column":5},"end":{"line":38,"column":6}}},{"id":"4114a293-de5f-2fe7-f1cd-6a3279931333","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"5937ec22-4d7e-5f2b-e937-3fd3bbe61d74","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"3ef845e8-8b2d-f24b-b3b6-6360b9436cc9","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"1eef4072-1752-fc55-9f76-9888f0559a09","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"b8db1d6a-0dd2-8a1b-31f7-a92ec0ba5d4c","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"05d54333-6e69-05db-d717-3a1935bb35c0","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"3a66fd3c-94be-8e6a-34f3-2f636ebf5db6","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"2897e38f-ac42-955f-0c13-96c8982a8247","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":39,"column":5},"end":{"line":51,"column":6}}},{"id":"4e6ebba8-8db7-a75a-b336-eda4345acf89","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"dcf0a4a5-b8b1-f455-6eaf-f83ddb080b24","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"34995691-be5a-8a35-503e-f3908f75111e","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"cb693b08-e609-e4af-c957-03f481a00ce8","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"c5a4e2f8-83a2-fdf3-3fea-f867955c0b2f","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"4c94d06a-b240-2dc1-d14e-15ad1f71dfc8","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"a196982b-caea-bba7-fcbd-9afbb260df64","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"48973355-e42f-d298-d35a-52955fa03e0b","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"a86f7374-0795-f3c1-dc38-6dd0bde9f63f","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"39e5537c-bdb8-9789-4c12-dec62725fac6","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":52,"column":5},"end":{"line":66,"column":6}}},{"id":"258a43af-3b11-5ac2-fa68-50a161bc49a5","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"be179376-7d82-c4f8-0995-28525909d663","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"2e4e04e6-1dbc-c2dc-cdbd-0e3fcfa90215","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"495d0340-3cc6-fd37-9c42-760452c26f9f","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"325e096e-530d-4809-2cf3-82a8e9903429","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"43193ba7-04c1-ebe4-091c-3cf306034d71","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"95f11559-a490-fa02-1512-76b80c41ba48","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"1a644b2a-e0fe-4938-0221-2d185fda0beb","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"262f178d-f296-3642-e171-262282e1bfc9","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"4817a15f-3d21-f951-00c1-58d0cf375010","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"93466060-92f2-effd-b17b-e4a35e654a27","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":67,"column":5},"end":{"line":82,"column":6}}},{"id":"86ca177d-5d99-f203-5385-a89263dda901","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"f6f90469-1d07-ce64-16ae-0faa26f0c11e","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"b0a6945e-4d43-3ae4-6ca0-988252fd4119","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"ca553e89-6f7b-e82b-ac6a-7a3d96a78f05","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"2fd0397c-7460-2e56-1bb7-86a540f86742","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"c3f00f5f-3a56-7069-3e44-cf18a161c699","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"2bb60a9e-4583-b4d9-da0e-43d58bd80554","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"fe867530-9246-3dfa-cedd-d00e19383424","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"5f07de31-e76e-ef9f-698f-64fb99ecf955","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"8a112840-ba98-5394-8e39-810ce80a3681","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"4bf2ea1a-26c7-5cb0-7a74-4396c196309d","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":83,"column":5},"end":{"line":98,"column":6}}},{"id":"2f49d6fe-9f87-d312-deea-aba8459846d3","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"ab6fac01-c341-6cdd-75d3-ba19101450b2","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"13c5570a-6a9f-fa68-e885-7df1cda79c2f","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"1e2b33af-3f32-63e4-f3f9-75d8b28b7ef3","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"797744c2-006b-5171-fc92-9e4c0f35322c","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"480a4cf7-fe8c-b5c1-d56e-cb82f96ff51f","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"16e15d6a-6376-aefa-c447-21f73788a45c","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"ac47f298-7ba1-840a-7d1d-eb293e0339d6","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"4943b247-777a-6adc-10c6-5091ddff347e","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"a8704443-c8b1-21dd-e809-dc6222b4aa8c","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}},{"id":"9ff43b75-4f9d-8c40-8e81-d6b93775b0b1","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":99,"column":5},"end":{"line":114,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\usings.cs":{"language":"cs","source":"global using Xunit;","tests":[]}}}