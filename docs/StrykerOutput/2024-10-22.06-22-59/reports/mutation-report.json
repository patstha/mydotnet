{"schemaVersion":"2","thresholds":{"high":80,"low":60},"projectRoot":"C:\\Users\\kushal\\src\\mydotnet\\hellolib","files":{"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\AddTwoNumbers.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int val=0, ListNode next=null) {\r\n *         this.val = val;\r\n *         this.next = next;\r\n *     }\r\n * }\r\n */\r\npublic class Solution\r\n{\r\n    public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\r\n    {\r\n        ListNode dummyHead = new(0);\r\n        ListNode p = l1, q = l2, current = dummyHead;\r\n        int carry = 0;\r\n\r\n        while (p != null || q != null)\r\n        {\r\n            int x = (p != null) ? p.val : 0;\r\n            int y = (q != null) ? q.val : 0;\r\n            int sum = carry \u002B x \u002B y;\r\n            carry = sum / 10;\r\n            current.next = new(sum % 10);\r\n            current = current.next;\r\n            if (p != null) p = p.next;\r\n            if (q != null) q = q.next;\r\n        }\r\n\r\n        if (carry \u003E 0)\r\n        {\r\n            current.next = new(carry);\r\n        }\r\n\r\n        return dummyHead.next;\r\n    }\r\n\r\n    public int GetIntegerFromListNode(ListNode l)\r\n    {\r\n        int number = 0;\r\n        int multiplier = 1;\r\n\r\n        while (l != null)\r\n        {\r\n            number \u002B= l.val * multiplier;\r\n            multiplier *= 10;\r\n            l = l.next;\r\n        }\r\n\r\n        return number;\r\n    }\r\n\r\n}\r\n\r\npublic class ListNode(int val = 0, ListNode next = null)\r\n{\r\n    public int val = val;\r\n    public ListNode next = next;\r\n}\r\n","mutants":[{"id":"0","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":17,"column":5},"end":{"line":40,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"1","mutatorName":"Logical mutation","replacement":"p != null \u0026\u0026 q != null","location":{"start":{"line":22,"column":16},"end":{"line":22,"column":38}},"status":"Survived","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"2","mutatorName":"Negate expression","replacement":"!(p != null || q != null)","location":{"start":{"line":22,"column":16},"end":{"line":22,"column":38}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","1932f8e6-7135-6ae7-86c7-4a898c069be7"]},{"id":"3","mutatorName":"Equality mutation","replacement":"p == null","location":{"start":{"line":22,"column":16},"end":{"line":22,"column":25}},"status":"Timeout","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"4","mutatorName":"Equality mutation","replacement":"q == null","location":{"start":{"line":22,"column":29},"end":{"line":22,"column":38}},"status":"Timeout","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"5","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":23,"column":9},"end":{"line":32,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"6","mutatorName":"Conditional (true) mutation","replacement":"(true?p.val :0)","location":{"start":{"line":24,"column":21},"end":{"line":24,"column":44}},"status":"Survived","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"7","mutatorName":"Conditional (false) mutation","replacement":"(false?p.val :0)","location":{"start":{"line":24,"column":21},"end":{"line":24,"column":44}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"]},{"id":"8","mutatorName":"Equality mutation","replacement":"p == null","location":{"start":{"line":24,"column":22},"end":{"line":24,"column":31}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"]},{"id":"9","mutatorName":"Conditional (true) mutation","replacement":"(true?q.val :0)","location":{"start":{"line":25,"column":21},"end":{"line":25,"column":44}},"status":"Survived","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"10","mutatorName":"Conditional (false) mutation","replacement":"(false?q.val :0)","location":{"start":{"line":25,"column":21},"end":{"line":25,"column":44}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"]},{"id":"11","mutatorName":"Equality mutation","replacement":"q == null","location":{"start":{"line":25,"column":22},"end":{"line":25,"column":31}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"]},{"id":"12","mutatorName":"Arithmetic mutation","replacement":"carry \u002B x - y","location":{"start":{"line":26,"column":23},"end":{"line":26,"column":36}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"]},{"id":"13","mutatorName":"Arithmetic mutation","replacement":"carry - x","location":{"start":{"line":26,"column":23},"end":{"line":26,"column":32}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"]},{"id":"14","mutatorName":"Arithmetic mutation","replacement":"sum * 10","location":{"start":{"line":27,"column":21},"end":{"line":27,"column":29}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["472f6290-03ca-cb4b-f166-88daaf59373f"]},{"id":"15","mutatorName":"Arithmetic mutation","replacement":"sum * 10","location":{"start":{"line":28,"column":32},"end":{"line":28,"column":40}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"]},{"id":"16","mutatorName":"Equality mutation","replacement":"p == null","location":{"start":{"line":30,"column":17},"end":{"line":30,"column":26}},"status":"Timeout","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"17","mutatorName":"Equality mutation","replacement":"q == null","location":{"start":{"line":31,"column":17},"end":{"line":31,"column":26}},"status":"Timeout","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"18","mutatorName":"Equality mutation","replacement":"carry \u003C 0","location":{"start":{"line":34,"column":13},"end":{"line":34,"column":22}},"status":"Survived","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":[]},{"id":"19","mutatorName":"Equality mutation","replacement":"carry \u003E= 0","location":{"start":{"line":34,"column":13},"end":{"line":34,"column":22}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174"]},{"id":"20","mutatorName":"Negate expression","replacement":"!(carry \u003E 0)","location":{"start":{"line":34,"column":13},"end":{"line":34,"column":22}},"status":"Killed","static":false,"coveredBy":["0ca9ec7c-1835-24dc-fe52-b7048151b351","0776aea3-cae9-fac6-4118-fd90ba8abc1b","fb6aed9b-ae74-0095-2e22-95b33d91aade","94799b30-e1b8-e921-cf82-428b42b36ee8","472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174","1932f8e6-7135-6ae7-86c7-4a898c069be7","75776572-871d-8e2a-c369-63d963043ab0"],"killedBy":["472f6290-03ca-cb4b-f166-88daaf59373f","23e03a53-0017-07f6-72fd-55079e9de174"]},{"id":"21","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":35,"column":9},"end":{"line":37,"column":10}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"22","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":43,"column":5},"end":{"line":55,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"23","mutatorName":"Equality mutation","replacement":"l == null","location":{"start":{"line":47,"column":16},"end":{"line":47,"column":25}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"24","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":48,"column":9},"end":{"line":52,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"25","mutatorName":"AddAssignmentExpression to SubtractAssignmentExpression mutation","replacement":"number -= l.val * multiplier","location":{"start":{"line":49,"column":13},"end":{"line":49,"column":41}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"26","mutatorName":"Arithmetic mutation","replacement":"l.val / multiplier","location":{"start":{"line":49,"column":23},"end":{"line":49,"column":41}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"27","mutatorName":"MultiplyAssignmentExpression to DivideAssignmentExpression mutation","replacement":"multiplier /= 10","location":{"start":{"line":50,"column":13},"end":{"line":50,"column":29}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\BackoffException.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class BackoffException\r\n{\r\n    public async Task BackoffSelfinflictedException(string name, int stopAfter = 0, int currentIteration = 0)\r\n    {\r\n        try\r\n        {\r\n            await Task.Run(() =\u003E { throw new ApplicationException(\u0022just testing\u0022); });\r\n\r\n            return;\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            Console.WriteLine(ex.ToString());\r\n            int delay = 0;\r\n\r\n            if (stopAfter \u003E 0)\r\n            {\r\n                currentIteration\u002B\u002B;\r\n            }\r\n\r\n            while (currentIteration \u003C stopAfter || stopAfter == 0)\r\n            {\r\n                try\r\n                {\r\n                    await BackoffSelfinflictedException(name, stopAfter, currentIteration);\r\n                    return;\r\n                }\r\n                catch\r\n                {\r\n                    await Task.Delay(delay);\r\n                    delay \u002B= 1000;\r\n                    if (stopAfter \u003E 0)\r\n                    {\r\n                        currentIteration\u002B\u002B;\r\n                    }\r\n                    if (stopAfter \u003E 0 \u0026\u0026 currentIteration \u003E= stopAfter)\r\n                    {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","mutants":[{"id":"28","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":45,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"29","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":12,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"30","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":9,"column":13},"end":{"line":9,"column":87}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"31","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":9,"column":34},"end":{"line":9,"column":85}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"32","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":9,"column":36},"end":{"line":9,"column":83}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"33","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":9,"column":67},"end":{"line":9,"column":81}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"34","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":11,"column":13},"end":{"line":11,"column":20}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"35","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":14,"column":9},"end":{"line":44,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"36","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":15,"column":13},"end":{"line":15,"column":46}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"37","mutatorName":"Equality mutation","replacement":"stopAfter \u003C 0","location":{"start":{"line":18,"column":17},"end":{"line":18,"column":30}},"status":"Timeout","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"38","mutatorName":"Equality mutation","replacement":"stopAfter \u003E= 0","location":{"start":{"line":18,"column":17},"end":{"line":18,"column":30}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"39","mutatorName":"Negate expression","replacement":"!(stopAfter \u003E 0)","location":{"start":{"line":18,"column":17},"end":{"line":18,"column":30}},"status":"Timeout","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"40","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":19,"column":13},"end":{"line":21,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"41","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":20,"column":17},"end":{"line":20,"column":36}},"status":"Timeout","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"42","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"currentIteration--","location":{"start":{"line":20,"column":17},"end":{"line":20,"column":35}},"status":"Timeout","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"43","mutatorName":"Logical mutation","replacement":"currentIteration \u003C stopAfter \u0026\u0026 stopAfter == 0","location":{"start":{"line":23,"column":20},"end":{"line":23,"column":66}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"44","mutatorName":"Negate expression","replacement":"!(currentIteration \u003C stopAfter || stopAfter == 0)","location":{"start":{"line":23,"column":20},"end":{"line":23,"column":66}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"45","mutatorName":"Equality mutation","replacement":"currentIteration \u003E stopAfter","location":{"start":{"line":23,"column":20},"end":{"line":23,"column":48}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"46","mutatorName":"Equality mutation","replacement":"currentIteration \u003C= stopAfter","location":{"start":{"line":23,"column":20},"end":{"line":23,"column":48}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"47","mutatorName":"Equality mutation","replacement":"stopAfter != 0","location":{"start":{"line":23,"column":52},"end":{"line":23,"column":66}},"status":"Timeout","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"48","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":24,"column":13},"end":{"line":43,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"49","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":26,"column":17},"end":{"line":29,"column":18}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"50","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":27,"column":21},"end":{"line":27,"column":92}},"status":"Survived","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"51","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":28,"column":21},"end":{"line":28,"column":28}},"status":"Timeout","static":false,"coveredBy":["4164b518-4ff4-a370-fdfd-e725df9ed5c3"],"killedBy":[]},{"id":"52","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":31,"column":17},"end":{"line":42,"column":18}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"53","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":32,"column":21},"end":{"line":32,"column":45}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"54","mutatorName":"AddAssignmentExpression to SubtractAssignmentExpression mutation","replacement":"delay -= 1000","location":{"start":{"line":33,"column":21},"end":{"line":33,"column":34}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"55","mutatorName":"Equality mutation","replacement":"stopAfter \u003C 0","location":{"start":{"line":34,"column":25},"end":{"line":34,"column":38}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"56","mutatorName":"Equality mutation","replacement":"stopAfter \u003E= 0","location":{"start":{"line":34,"column":25},"end":{"line":34,"column":38}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"57","mutatorName":"Negate expression","replacement":"!(stopAfter \u003E 0)","location":{"start":{"line":34,"column":25},"end":{"line":34,"column":38}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"58","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":35,"column":21},"end":{"line":37,"column":22}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"59","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":36,"column":25},"end":{"line":36,"column":44}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"60","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"currentIteration--","location":{"start":{"line":36,"column":25},"end":{"line":36,"column":43}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"61","mutatorName":"Logical mutation","replacement":"stopAfter \u003E 0 || currentIteration \u003E= stopAfter","location":{"start":{"line":38,"column":25},"end":{"line":38,"column":71}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"62","mutatorName":"Negate expression","replacement":"!(stopAfter \u003E 0 \u0026\u0026 currentIteration \u003E= stopAfter)","location":{"start":{"line":38,"column":25},"end":{"line":38,"column":71}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"63","mutatorName":"Equality mutation","replacement":"stopAfter \u003C 0","location":{"start":{"line":38,"column":25},"end":{"line":38,"column":38}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"64","mutatorName":"Equality mutation","replacement":"stopAfter \u003E= 0","location":{"start":{"line":38,"column":25},"end":{"line":38,"column":38}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"65","mutatorName":"Equality mutation","replacement":"currentIteration \u003C stopAfter","location":{"start":{"line":38,"column":42},"end":{"line":38,"column":71}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"66","mutatorName":"Equality mutation","replacement":"currentIteration \u003E stopAfter","location":{"start":{"line":38,"column":42},"end":{"line":38,"column":71}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"67","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":39,"column":21},"end":{"line":41,"column":22}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"68","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":40,"column":25},"end":{"line":40,"column":31}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\BubbleSort.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class BubbleSort\r\n{\r\n    public static void SortIntegers(int[] input)\r\n    {\r\n        for (int i = 0; i \u003C input.Length; i\u002B\u002B)\r\n        {\r\n            for (int j = 0; j \u003C input.Length - 1; j\u002B\u002B)\r\n            {\r\n                if (input[j] \u003E input[j \u002B 1])\r\n                {\r\n                    (input[j], input[j \u002B 1]) = (input[j \u002B 1], input[j]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","mutants":[{"id":"69","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":17,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":[]},{"id":"70","mutatorName":"Equality mutation","replacement":"i \u003E input.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":41}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3"]},{"id":"71","mutatorName":"Equality mutation","replacement":"i \u003C= input.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":41}},"status":"Survived","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":[]},{"id":"72","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":7,"column":43},"end":{"line":7,"column":46}},"status":"Timeout","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":[]},{"id":"73","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":16,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":[]},{"id":"74","mutatorName":"Equality mutation","replacement":"j \u003E input.Length - 1","location":{"start":{"line":9,"column":29},"end":{"line":9,"column":49}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3"]},{"id":"75","mutatorName":"Equality mutation","replacement":"j \u003C= input.Length - 1","location":{"start":{"line":9,"column":29},"end":{"line":9,"column":49}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"]},{"id":"76","mutatorName":"Arithmetic mutation","replacement":"input.Length \u002B 1","location":{"start":{"line":9,"column":33},"end":{"line":9,"column":49}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"]},{"id":"77","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"j--","location":{"start":{"line":9,"column":51},"end":{"line":9,"column":54}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44","b0ccf2ae-631f-fff2-1875-809f04ffca3d"],"killedBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"78","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":10,"column":13},"end":{"line":15,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"],"killedBy":[]},{"id":"79","mutatorName":"Equality mutation","replacement":"input[j] \u003C input[j \u002B 1]","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":44}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"],"killedBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"80","mutatorName":"Equality mutation","replacement":"input[j] \u003E= input[j \u002B 1]","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":44}},"status":"Survived","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"],"killedBy":[]},{"id":"81","mutatorName":"Negate expression","replacement":"!(input[j] \u003E input[j \u002B 1])","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":44}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"],"killedBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"82","mutatorName":"Arithmetic mutation","replacement":"j - 1","location":{"start":{"line":11,"column":38},"end":{"line":11,"column":43}},"status":"Killed","static":false,"coveredBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"],"killedBy":["0445ba7d-9c9b-6249-9493-366b675a25cc","31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3","b74b1831-3ca4-6aea-9eda-92df66068c43","ad000939-c7ba-db09-e932-6430490ce7f2","5f445bed-e608-58ea-1e53-9469716a7956","2f7f110c-0ab0-65ba-76c2-83f89ae13e44"]},{"id":"83","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":12,"column":17},"end":{"line":14,"column":18}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3"],"killedBy":[]},{"id":"84","mutatorName":"Arithmetic mutation","replacement":"j - 1","location":{"start":{"line":13,"column":38},"end":{"line":13,"column":43}},"status":"Killed","static":false,"coveredBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3"],"killedBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3"]},{"id":"85","mutatorName":"Arithmetic mutation","replacement":"j - 1","location":{"start":{"line":13,"column":55},"end":{"line":13,"column":60}},"status":"Killed","static":false,"coveredBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3"],"killedBy":["31b4d58c-a32c-2fc1-7dba-f960babab4a6","24f97083-4b32-3720-73b8-5c41b97e34e3"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\Entity.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic abstract class Entity\r\n{\r\n    public Guid Guid { get; set; } = Guid.NewGuid();\r\n    public string CreatedBy { get; set; } = \u0022System\u0022;\r\n    public DateTime CreatedDate { get; set; } = DateTime.UtcNow;\r\n    public string ModifiedBy { get; set; }\r\n    public DateTime ModifiedDate { get; set; }\r\n}\r\n","mutants":[{"id":"86","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":6,"column":45},"end":{"line":6,"column":53}},"status":"Killed","static":false,"coveredBy":["b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\FindClosestNumberToZero.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class FindClosestNumberToZero(ILogger\u003CFindClosestNumberToZero\u003E logger)\r\n{\r\n    public int FindClosestNumber(int[] nums)\r\n    {\r\n        if (nums == null || nums.Length == 0)\r\n        {\r\n            logger.LogWarning(\u0022Input array is null or empty.\u0022);\r\n            return 0;\r\n        }\r\n\r\n        if (nums.Length == 1)\r\n        {\r\n            logger.LogInformation(\u0022Single element array, returning the only element.\u0022);\r\n            return nums[0];\r\n        }\r\n\r\n        int[] abs = new int[nums.Length];\r\n        for (int i = 0; i \u003C nums.Length; i\u002B\u002B)\r\n        {\r\n            abs[i] = Math.Abs(nums[i]);\r\n        }\r\n\r\n        Array.Sort(abs);\r\n\r\n        int closestNumber = nums.Contains(abs[0]) ? abs[0] : -abs[0];\r\n        logger.LogInformation(\u0022Closest number to zero found: {closestNumber}\u0022, closestNumber);\r\n\r\n        return closestNumber;\r\n    }\r\n}\r\n\r\n\r\n\r\n//Given an integer array nums of size n, return the number with the value closest to 0 in nums.If there are multiple answers, return the number with the largest value.\r\n\r\n\r\n\r\n//Example 1:\r\n\r\n//Input: nums = [-4, -2, 1, 4, 8]\r\n//Output: 1\r\n//Explanation:\r\n//The distance from -4 to 0 is |-4| = 4.\r\n//The distance from -2 to 0 is |-2| = 2.\r\n//The distance from 1 to 0 is |1| = 1.\r\n//The distance from 4 to 0 is |4| = 4.\r\n//The distance from 8 to 0 is |8| = 8.\r\n//Thus, the closest number to 0 in the array is 1.\r\n\r\n//Example 2:\r\n\r\n//Input: nums = [2, -1, 1]\r\n//Output: 1\r\n//Explanation: 1 and -1 are both the closest numbers to 0, so 1 being larger is returned.\r\n\r\n\r\n\r\n//Constraints:\r\n\r\n//    1 \u003C= n \u003C= 1000\r\n//    -105 \u003C= nums[i] \u003C= 105\r\n\r\n","mutants":[{"id":"87","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":31,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":[]},{"id":"88","mutatorName":"Logical mutation","replacement":"nums == null \u0026\u0026 nums.Length == 0","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":45}},"status":"Survived","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":[]},{"id":"89","mutatorName":"Negate expression","replacement":"!(nums == null || nums.Length == 0)","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":45}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"90","mutatorName":"Equality mutation","replacement":"nums != null","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":25}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"91","mutatorName":"Equality mutation","replacement":"nums.Length != 0","location":{"start":{"line":7,"column":29},"end":{"line":7,"column":45}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"92","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":11,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"93","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":9,"column":13},"end":{"line":9,"column":64}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"94","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":9,"column":31},"end":{"line":9,"column":62}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"95","mutatorName":"Equality mutation","replacement":"nums.Length != 1","location":{"start":{"line":13,"column":13},"end":{"line":13,"column":29}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"96","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":14,"column":9},"end":{"line":17,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"97","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":15,"column":13},"end":{"line":15,"column":88}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"98","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":15,"column":35},"end":{"line":15,"column":86}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"99","mutatorName":"Equality mutation","replacement":"i \u003E nums.Length","location":{"start":{"line":20,"column":25},"end":{"line":20,"column":40}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"100","mutatorName":"Equality mutation","replacement":"i \u003C= nums.Length","location":{"start":{"line":20,"column":25},"end":{"line":20,"column":40}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"101","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":20,"column":42},"end":{"line":20,"column":45}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"102","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":21,"column":9},"end":{"line":23,"column":10}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"103","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":25,"column":9},"end":{"line":25,"column":25}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"104","mutatorName":"Conditional (true) mutation","replacement":"(true?abs[0] :-abs[0])","location":{"start":{"line":27,"column":29},"end":{"line":27,"column":69}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1"]},{"id":"105","mutatorName":"Conditional (false) mutation","replacement":"(false?abs[0] :-abs[0])","location":{"start":{"line":27,"column":29},"end":{"line":27,"column":69}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":["00f87bd1-1649-33e3-f107-48281fc7d965"]},{"id":"106","mutatorName":"UnaryMinusExpression to UnaryPlusExpression mutation","replacement":"\u002Babs[0]","location":{"start":{"line":27,"column":62},"end":{"line":27,"column":69}},"status":"Killed","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1"],"killedBy":["08664a02-2de9-843b-988b-f838ed870ff1"]},{"id":"107","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":28,"column":9},"end":{"line":28,"column":95}},"status":"Survived","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":[]},{"id":"108","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":28,"column":31},"end":{"line":28,"column":78}},"status":"Survived","static":false,"coveredBy":["08664a02-2de9-843b-988b-f838ed870ff1","00f87bd1-1649-33e3-f107-48281fc7d965"],"killedBy":[]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\MergeSort.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class MergeSort\r\n{\r\n    public static void SortIntegers(int[] input)\r\n    {\r\n        if (input.Length \u003C= 1) return;\r\n        int leftSize = input.Length / 2;\r\n        int rightSize = input.Length - leftSize;\r\n        int[] left = new int[leftSize];\r\n        int[] right = new int[rightSize];\r\n\r\n        Array.Copy(input, 0, left, 0, leftSize);\r\n        Array.Copy(input, leftSize, right, 0, rightSize);\r\n\r\n        SortIntegers(left);\r\n        SortIntegers(right);\r\n\r\n        Merges(input, left, right);\r\n    }\r\n\r\n    private static void Merges(int[] input, int[] left, int[] right)\r\n    {\r\n        int leftIndex = 0;\r\n        int rightIndex = 0;\r\n        int targetIndex = 0;\r\n        int remaining = left.Length \u002B right.Length;\r\n\r\n        while (remaining \u003E 0)\r\n        {\r\n            if (leftIndex \u003E= left.Length)\r\n            {\r\n                input[targetIndex] = right[rightIndex\u002B\u002B];\r\n            }\r\n\r\n            else if (rightIndex \u003E= right.Length)\r\n            {\r\n                input[targetIndex] = left[leftIndex\u002B\u002B];\r\n            }\r\n\r\n            else if (left[leftIndex].CompareTo(right[rightIndex]) \u003C 0)\r\n            {\r\n                input[targetIndex] = left[leftIndex\u002B\u002B];\r\n            }\r\n\r\n            else\r\n            {\r\n                input[targetIndex] = right[rightIndex\u002B\u002B];\r\n            }\r\n\r\n            targetIndex\u002B\u002B;\r\n            remaining--;\r\n        }\r\n    }\r\n}\r\n","mutants":[{"id":"109","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":20,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","3f698c7d-1231-8968-bf3f-81eebe657c3c","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"110","mutatorName":"Equality mutation","replacement":"input.Length \u003E 1","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":30}},"status":"Timeout","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","3f698c7d-1231-8968-bf3f-81eebe657c3c","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"111","mutatorName":"Equality mutation","replacement":"input.Length \u003C 1","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":30}},"status":"Timeout","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","3f698c7d-1231-8968-bf3f-81eebe657c3c","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"112","mutatorName":"Negate expression","replacement":"!(input.Length \u003C= 1)","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":30}},"status":"Timeout","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","3f698c7d-1231-8968-bf3f-81eebe657c3c","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"113","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":7,"column":32},"end":{"line":7,"column":39}},"status":"Timeout","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","3f698c7d-1231-8968-bf3f-81eebe657c3c","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"114","mutatorName":"Arithmetic mutation","replacement":"input.Length * 2","location":{"start":{"line":8,"column":24},"end":{"line":8,"column":40}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"115","mutatorName":"Arithmetic mutation","replacement":"input.Length \u002B leftSize","location":{"start":{"line":9,"column":25},"end":{"line":9,"column":48}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"116","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":13,"column":9},"end":{"line":13,"column":49}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"117","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":14,"column":9},"end":{"line":14,"column":58}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"118","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":16,"column":9},"end":{"line":16,"column":28}},"status":"Survived","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"119","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":17,"column":9},"end":{"line":17,"column":29}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"120","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":19,"column":9},"end":{"line":19,"column":36}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"121","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":23,"column":5},"end":{"line":54,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"122","mutatorName":"Arithmetic mutation","replacement":"left.Length - right.Length","location":{"start":{"line":27,"column":25},"end":{"line":27,"column":51}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"123","mutatorName":"Equality mutation","replacement":"remaining \u003C 0","location":{"start":{"line":29,"column":16},"end":{"line":29,"column":29}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"124","mutatorName":"Equality mutation","replacement":"remaining \u003E= 0","location":{"start":{"line":29,"column":16},"end":{"line":29,"column":29}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"125","mutatorName":"Negate expression","replacement":"!(remaining \u003E 0)","location":{"start":{"line":29,"column":16},"end":{"line":29,"column":29}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"126","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":30,"column":9},"end":{"line":53,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"127","mutatorName":"Equality mutation","replacement":"leftIndex \u003C left.Length","location":{"start":{"line":31,"column":17},"end":{"line":31,"column":41}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"128","mutatorName":"Equality mutation","replacement":"leftIndex \u003E left.Length","location":{"start":{"line":31,"column":17},"end":{"line":31,"column":41}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"129","mutatorName":"Negate expression","replacement":"!(leftIndex \u003E= left.Length)","location":{"start":{"line":31,"column":17},"end":{"line":31,"column":41}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"130","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":32,"column":13},"end":{"line":34,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"131","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"rightIndex--","location":{"start":{"line":33,"column":44},"end":{"line":33,"column":56}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","213f226b-7b73-f726-6a9e-fdd1787d3d19"]},{"id":"132","mutatorName":"Equality mutation","replacement":"rightIndex \u003C right.Length","location":{"start":{"line":36,"column":22},"end":{"line":36,"column":48}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"133","mutatorName":"Equality mutation","replacement":"rightIndex \u003E right.Length","location":{"start":{"line":36,"column":22},"end":{"line":36,"column":48}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"134","mutatorName":"Negate expression","replacement":"!(rightIndex \u003E= right.Length)","location":{"start":{"line":36,"column":22},"end":{"line":36,"column":48}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"135","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":37,"column":13},"end":{"line":39,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"],"killedBy":[]},{"id":"136","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"leftIndex--","location":{"start":{"line":38,"column":43},"end":{"line":38,"column":54}},"status":"Survived","static":false,"coveredBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"],"killedBy":[]},{"id":"137","mutatorName":"Equality mutation","replacement":"left[leftIndex].CompareTo(right[rightIndex]) \u003E 0","location":{"start":{"line":41,"column":22},"end":{"line":41,"column":70}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"138","mutatorName":"Equality mutation","replacement":"left[leftIndex].CompareTo(right[rightIndex]) \u003C= 0","location":{"start":{"line":41,"column":22},"end":{"line":41,"column":70}},"status":"Survived","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"139","mutatorName":"Negate expression","replacement":"!(left[leftIndex].CompareTo(right[rightIndex]) \u003C 0)","location":{"start":{"line":41,"column":22},"end":{"line":41,"column":70}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"140","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":42,"column":13},"end":{"line":44,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":[]},{"id":"141","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"leftIndex--","location":{"start":{"line":43,"column":43},"end":{"line":43,"column":54}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"142","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":47,"column":13},"end":{"line":49,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"],"killedBy":[]},{"id":"143","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"rightIndex--","location":{"start":{"line":48,"column":44},"end":{"line":48,"column":56}},"status":"Killed","static":false,"coveredBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"],"killedBy":["82925366-6b7b-0319-625c-804cb9f2eb1c"]},{"id":"144","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":51,"column":13},"end":{"line":51,"column":27}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"145","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"targetIndex--","location":{"start":{"line":51,"column":13},"end":{"line":51,"column":26}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"146","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":25}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]},{"id":"147","mutatorName":"PostDecrementExpression to PostIncrementExpression mutation","replacement":"remaining\u002B\u002B","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":24}},"status":"Killed","static":false,"coveredBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"],"killedBy":["6eff1893-fd79-6b68-0302-cf3ce50aa55b","82925366-6b7b-0319-625c-804cb9f2eb1c","213f226b-7b73-f726-6a9e-fdd1787d3d19","30cac124-777d-663a-1fe1-44f61ccd7397"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\MergeSortedArray.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class MergeSortedArray(ILogger\u003CMergeSortedArray\u003E logger)\r\n{\r\n    public void Merge(int[] nums1, int m, int[] nums2, int n)\r\n    {\r\n        int i = m - 1;\r\n        int j = n - 1;\r\n        int k = m \u002B n - 1;\r\n\r\n        // Merge in reverse order\r\n        while (i \u003E= 0 \u0026\u0026 j \u003E= 0)\r\n        {\r\n            if (nums1[i] \u003E nums2[j])\r\n            {\r\n                nums1[k] = nums1[i];\r\n                i--;\r\n            }\r\n            else\r\n            {\r\n                nums1[k] = nums2[j];\r\n                j--;\r\n            }\r\n            k--;\r\n        }\r\n\r\n        // If there are remaining elements in nums2, copy them\r\n        while (j \u003E= 0)\r\n        {\r\n            nums1[k] = nums2[j];\r\n            j--;\r\n            k--;\r\n        }\r\n\r\n        // No need to copy the remaining elements of nums1, as they are already in place\r\n        logger.LogInformation(\u0022Executed {method} for inputs of size {m} and {n}\u0022, nameof(Merge), m, n);\r\n    }\r\n}\r\n\r\n\r\n//You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.\r\n//Merge nums1 and nums2 into a single array sorted in non-decreasing order.\r\n\r\n//The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m \u002B n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.\r\n\r\n\r\n\r\n\r\n//Example 1:\r\n\r\n//Input: nums1 = [1, 2, 3, 0, 0, 0], m = 3, nums2 = [2, 5, 6], n = 3\r\n//Output: [1, 2, 2, 3, 5, 6]\r\n//Explanation: The arrays we are merging are [1, 2, 3] and [2, 5, 6].\r\n//The result of the merge is [1, 2, 2, 3, 5, 6] with the underlined elements coming from nums1.\r\n\r\n//Example 2:\r\n\r\n//Input: nums1 = [1], m = 1, nums2 = [], n = 0\r\n//Output: [1]\r\n//Explanation: The arrays we are merging are [1] and [].\r\n//The result of the merge is [1].\r\n\r\n//Example 3:\r\n\r\n//Input: nums1 = [0], m = 0, nums2 = [1], n = 1\r\n//Output: [1]\r\n//Explanation: The arrays we are merging are [] and[1].\r\n//The result of the merge is [1].\r\n//Note that because m = 0, there are no elements in nums1.The 0 is only there to ensure the merge result can fit in nums1.\r\n//Constraints:\r\n\r\n//    nums1.length == m \u002B n\r\n//    nums2.length == n\r\n//    0 \u003C= m, n \u003C= 200\r\n//    1 \u003C= m \u002B n \u003C= 200\r\n//    -109 \u003C= nums1[i], nums2[j] \u003C= 109\r\n\r\n\r\n\r\n\r\n//Follow up: Can you come up with an algorithm that runs in O(m \u002B n) time?\r\n","mutants":[{"id":"148","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":37,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"149","mutatorName":"Arithmetic mutation","replacement":"m \u002B 1","location":{"start":{"line":7,"column":17},"end":{"line":7,"column":22}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"150","mutatorName":"Arithmetic mutation","replacement":"n \u002B 1","location":{"start":{"line":8,"column":17},"end":{"line":8,"column":22}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"151","mutatorName":"Arithmetic mutation","replacement":"m \u002B n \u002B 1","location":{"start":{"line":9,"column":17},"end":{"line":9,"column":26}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"152","mutatorName":"Arithmetic mutation","replacement":"m - n","location":{"start":{"line":9,"column":17},"end":{"line":9,"column":22}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"153","mutatorName":"Logical mutation","replacement":"i \u003E= 0 || j \u003E= 0","location":{"start":{"line":12,"column":16},"end":{"line":12,"column":32}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"154","mutatorName":"Negate expression","replacement":"!(i \u003E= 0 \u0026\u0026 j \u003E= 0)","location":{"start":{"line":12,"column":16},"end":{"line":12,"column":32}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","c32bd78b-8e90-4f79-468b-5e408e2b8bf7"]},{"id":"155","mutatorName":"Equality mutation","replacement":"i \u003C 0","location":{"start":{"line":12,"column":16},"end":{"line":12,"column":22}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468"]},{"id":"156","mutatorName":"Equality mutation","replacement":"i \u003E 0","location":{"start":{"line":12,"column":16},"end":{"line":12,"column":22}},"status":"Survived","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"157","mutatorName":"Equality mutation","replacement":"j \u003C 0","location":{"start":{"line":12,"column":26},"end":{"line":12,"column":32}},"status":"Killed","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["c32bd78b-8e90-4f79-468b-5e408e2b8bf7"]},{"id":"158","mutatorName":"Equality mutation","replacement":"j \u003E 0","location":{"start":{"line":12,"column":26},"end":{"line":12,"column":32}},"status":"Survived","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"159","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":13,"column":9},"end":{"line":25,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"160","mutatorName":"Equality mutation","replacement":"nums1[i] \u003C nums2[j]","location":{"start":{"line":14,"column":17},"end":{"line":14,"column":36}},"status":"Survived","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"161","mutatorName":"Equality mutation","replacement":"nums1[i] \u003E= nums2[j]","location":{"start":{"line":14,"column":17},"end":{"line":14,"column":36}},"status":"Survived","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"162","mutatorName":"Negate expression","replacement":"!(nums1[i] \u003E nums2[j])","location":{"start":{"line":14,"column":17},"end":{"line":14,"column":36}},"status":"Survived","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"163","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":15,"column":13},"end":{"line":18,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"164","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":17,"column":17},"end":{"line":17,"column":21}},"status":"Killed","static":false,"coveredBy":["a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"165","mutatorName":"PostDecrementExpression to PostIncrementExpression mutation","replacement":"i\u002B\u002B","location":{"start":{"line":17,"column":17},"end":{"line":17,"column":20}},"status":"Killed","static":false,"coveredBy":["a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"166","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":20,"column":13},"end":{"line":23,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"167","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":22,"column":17},"end":{"line":22,"column":21}},"status":"Killed","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"168","mutatorName":"PostDecrementExpression to PostIncrementExpression mutation","replacement":"j\u002B\u002B","location":{"start":{"line":22,"column":17},"end":{"line":22,"column":20}},"status":"Killed","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"169","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":24,"column":13},"end":{"line":24,"column":17}},"status":"Killed","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"170","mutatorName":"PostDecrementExpression to PostIncrementExpression mutation","replacement":"k\u002B\u002B","location":{"start":{"line":24,"column":13},"end":{"line":24,"column":16}},"status":"Killed","static":false,"coveredBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"171","mutatorName":"Equality mutation","replacement":"j \u003C 0","location":{"start":{"line":28,"column":16},"end":{"line":28,"column":22}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"172","mutatorName":"Equality mutation","replacement":"j \u003E 0","location":{"start":{"line":28,"column":16},"end":{"line":28,"column":22}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468"]},{"id":"173","mutatorName":"Negate expression","replacement":"!(j \u003E= 0)","location":{"start":{"line":28,"column":16},"end":{"line":28,"column":22}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"]},{"id":"174","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":29,"column":9},"end":{"line":33,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468"],"killedBy":[]},{"id":"175","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":31,"column":13},"end":{"line":31,"column":17}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468"]},{"id":"176","mutatorName":"PostDecrementExpression to PostIncrementExpression mutation","replacement":"j\u002B\u002B","location":{"start":{"line":31,"column":13},"end":{"line":31,"column":16}},"status":"Killed","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468"],"killedBy":["a8841f0a-642e-cb55-601f-458db6aa9468"]},{"id":"177","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":32,"column":13},"end":{"line":32,"column":17}},"status":"Survived","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468"],"killedBy":[]},{"id":"178","mutatorName":"PostDecrementExpression to PostIncrementExpression mutation","replacement":"k\u002B\u002B","location":{"start":{"line":32,"column":13},"end":{"line":32,"column":16}},"status":"Survived","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468"],"killedBy":[]},{"id":"179","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":36,"column":9},"end":{"line":36,"column":104}},"status":"Survived","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]},{"id":"180","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":36,"column":31},"end":{"line":36,"column":81}},"status":"Survived","static":false,"coveredBy":["a8841f0a-642e-cb55-601f-458db6aa9468","49d20908-252b-4f99-9619-406943f860eb","a5391852-baf0-703a-959a-cf95d9487d89","c32bd78b-8e90-4f79-468b-5e408e2b8bf7","65258f36-dae1-2bd4-ca8d-823307b8109d"],"killedBy":[]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\MergeStringsAlternately.cs":{"language":"cs","source":"using System.Text;\r\n\r\nnamespace hellolib;\r\n\r\npublic class MergeStringsAlternately(ILogger\u003CMergeStringsAlternately\u003E logger)\r\n{\r\n    public string MergeAlternately(string word1, string word2)\r\n    {\r\n        StringBuilder result = new();\r\n        int length1 = word1.Length;\r\n        int length2 = word2.Length;\r\n        int minLength = Math.Min(length1, length2);\r\n\r\n        // Merge characters from both strings\r\n        for (int i = 0; i \u003C minLength; i\u002B\u002B)\r\n        {\r\n            result.Append(word1[i]);\r\n            result.Append(word2[i]);\r\n        }\r\n\r\n        // Append remaining characters from the longer string\r\n        if (length1 \u003E minLength)\r\n        {\r\n            result.Append(word1.AsSpan(minLength));\r\n        }\r\n        else if (length2 \u003E minLength)\r\n        {\r\n            result.Append(word2.AsSpan(minLength));\r\n        }\r\n        logger.LogInformation(\u0022Executed {method} for inputs of size {m} and {n}\u0022, nameof(MergeAlternately), word1.Length, word2.Length);\r\n        return result.ToString();\r\n    }\r\n}\r\n","mutants":[{"id":"181","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":5},"end":{"line":32,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":[]},{"id":"182","mutatorName":"Linq method mutation (Min() to Max())","replacement":"Math.Max","location":{"start":{"line":12,"column":25},"end":{"line":12,"column":33}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"183","mutatorName":"Equality mutation","replacement":"i \u003E minLength","location":{"start":{"line":15,"column":25},"end":{"line":15,"column":38}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"184","mutatorName":"Equality mutation","replacement":"i \u003C= minLength","location":{"start":{"line":15,"column":25},"end":{"line":15,"column":38}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"185","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":15,"column":40},"end":{"line":15,"column":43}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"186","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":16,"column":9},"end":{"line":19,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":[]},{"id":"187","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":17,"column":13},"end":{"line":17,"column":37}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"188","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":18,"column":13},"end":{"line":18,"column":37}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"189","mutatorName":"Equality mutation","replacement":"length1 \u003C minLength","location":{"start":{"line":22,"column":13},"end":{"line":22,"column":32}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"190","mutatorName":"Equality mutation","replacement":"length1 \u003E= minLength","location":{"start":{"line":22,"column":13},"end":{"line":22,"column":32}},"status":"Survived","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":[]},{"id":"191","mutatorName":"Negate expression","replacement":"!(length1 \u003E minLength)","location":{"start":{"line":22,"column":13},"end":{"line":22,"column":32}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"192","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":23,"column":9},"end":{"line":25,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":[]},{"id":"193","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":24,"column":13},"end":{"line":24,"column":52}},"status":"Killed","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":["23f50c61-e421-773f-d87b-7c29592a1a35"]},{"id":"194","mutatorName":"Equality mutation","replacement":"length2 \u003C minLength","location":{"start":{"line":26,"column":18},"end":{"line":26,"column":37}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"195","mutatorName":"Equality mutation","replacement":"length2 \u003E= minLength","location":{"start":{"line":26,"column":18},"end":{"line":26,"column":37}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"196","mutatorName":"Negate expression","replacement":"!(length2 \u003E minLength)","location":{"start":{"line":26,"column":18},"end":{"line":26,"column":37}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"197","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":27,"column":9},"end":{"line":29,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"198","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":28,"column":13},"end":{"line":28,"column":52}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"199","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":30,"column":9},"end":{"line":30,"column":137}},"status":"Survived","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":[]},{"id":"200","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":30,"column":31},"end":{"line":30,"column":81}},"status":"Survived","static":false,"coveredBy":["23f50c61-e421-773f-d87b-7c29592a1a35"],"killedBy":[]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\MinimumCoin.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class MinimumCoin(List\u003Cint\u003E CoinSet, int RepeatFactor)\r\n{\r\n    public List\u003Cint\u003E CoinSet { get; private set; } = CoinSet;\r\n    public int RepeatFactor { get; private set; } = RepeatFactor;\r\n\r\n    private static IEnumerable\u003CIEnumerable\u003CT\u003E\u003E SubSetsOf\u003CT\u003E(IEnumerable\u003CT\u003E source)\r\n    {\r\n        if (!source.Any())\r\n        {\r\n            return Enumerable.Repeat(Enumerable.Empty\u003CT\u003E(), 1);\r\n        }\r\n\r\n        IEnumerable\u003CT\u003E element = source.Take(1);\r\n\r\n        IEnumerable\u003CIEnumerable\u003CT\u003E\u003E haveNots = SubSetsOf(source.Skip(1));\r\n        IEnumerable\u003CIEnumerable\u003CT\u003E\u003E haves = haveNots.Select(set =\u003E element.Concat(set));\r\n\r\n        return haves.Concat(haveNots);\r\n    }\r\n\r\n    private static int GetCountInternal(int total, List\u003Cint\u003E repeatedList)\r\n    {\r\n        int currentCount = int.MaxValue;\r\n        IEnumerable\u003CIEnumerable\u003Cint\u003E\u003E x = SubSetsOf\u003Cint\u003E(repeatedList);\r\n        foreach (IEnumerable\u003Cint\u003E y in x)\r\n        {\r\n            int sum = y.Sum();\r\n            if (sum == total \u0026\u0026 currentCount \u003E y.Count())\r\n            {\r\n                currentCount = y.Count();\r\n            }\r\n        }\r\n        return currentCount;\r\n    }\r\n\r\n    public int GetCount(int total)\r\n    {\r\n        if (CoinSet.Contains(total))\r\n        {\r\n            return 1;\r\n        }\r\n        else if (CoinSet.Min() \u003E total)\r\n        {\r\n            return 0;\r\n        }\r\n        else\r\n        {\r\n            List\u003Cint\u003E repeatedList = [];\r\n            for (int i = 0; i \u003C RepeatFactor; i\u002B\u002B)\r\n            {\r\n                foreach (int x in CoinSet)\r\n                {\r\n                    repeatedList.Add(x);\r\n                }\r\n            }\r\n            return GetCountInternal(total, repeatedList);\r\n        }\r\n    }\r\n}\r\n","mutants":[{"id":"201","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":9,"column":5},"end":{"line":21,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"202","mutatorName":"LogicalNotExpression to un-LogicalNotExpression mutation","replacement":"source.Any()","location":{"start":{"line":10,"column":13},"end":{"line":10,"column":26}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"203","mutatorName":"Linq method mutation (Any() to All())","replacement":"source.All","location":{"start":{"line":10,"column":14},"end":{"line":10,"column":24}},"status":"CompileError","statusReason":"Mutant caused compile errors","static":false,"coveredBy":[],"killedBy":[]},{"id":"204","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":11,"column":9},"end":{"line":13,"column":10}},"status":"Timeout","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"205","mutatorName":"Linq method mutation (Take() to Skip())","replacement":"source.Skip","location":{"start":{"line":15,"column":34},"end":{"line":15,"column":45}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"206","mutatorName":"Linq method mutation (Skip() to Take())","replacement":"source.Take","location":{"start":{"line":17,"column":58},"end":{"line":17,"column":69}},"status":"Timeout","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"207","mutatorName":"Linq method mutation (Concat() to Except())","replacement":"element.Except","location":{"start":{"line":18,"column":68},"end":{"line":18,"column":82}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"208","mutatorName":"Linq method mutation (Concat() to Except())","replacement":"haves.Except","location":{"start":{"line":20,"column":16},"end":{"line":20,"column":28}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"209","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":24,"column":5},"end":{"line":36,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"210","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":28,"column":9},"end":{"line":34,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"211","mutatorName":"Linq method mutation (Sum() to Max())","replacement":"y.Max","location":{"start":{"line":29,"column":23},"end":{"line":29,"column":28}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"212","mutatorName":"Logical mutation","replacement":"sum == total || currentCount \u003E y.Count()","location":{"start":{"line":30,"column":17},"end":{"line":30,"column":57}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"213","mutatorName":"Negate expression","replacement":"!(sum == total \u0026\u0026 currentCount \u003E y.Count())","location":{"start":{"line":30,"column":17},"end":{"line":30,"column":57}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"214","mutatorName":"Equality mutation","replacement":"sum != total","location":{"start":{"line":30,"column":17},"end":{"line":30,"column":29}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"215","mutatorName":"Equality mutation","replacement":"currentCount \u003C y.Count()","location":{"start":{"line":30,"column":33},"end":{"line":30,"column":57}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"216","mutatorName":"Equality mutation","replacement":"currentCount \u003E= y.Count()","location":{"start":{"line":30,"column":33},"end":{"line":30,"column":57}},"status":"Survived","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"217","mutatorName":"Linq method mutation (Count() to Sum())","replacement":"y.Sum","location":{"start":{"line":30,"column":48},"end":{"line":30,"column":55}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5"]},{"id":"218","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":31,"column":13},"end":{"line":33,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"219","mutatorName":"Linq method mutation (Count() to Sum())","replacement":"y.Sum","location":{"start":{"line":32,"column":32},"end":{"line":32,"column":39}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"220","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":39,"column":5},"end":{"line":60,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","7b12073b-4caf-0278-4223-253feac2f41f","fd28fb8a-d8e7-d00a-442f-d2a83ac391bd","b17f6b79-d0e0-c498-959d-505212340f53","d304da0c-22d4-5b7f-329f-7295d2a66fe5"],"killedBy":[]},{"id":"221","mutatorName":"Negate expression","replacement":"!(CoinSet.Contains(total))","location":{"start":{"line":40,"column":13},"end":{"line":40,"column":36}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","7b12073b-4caf-0278-4223-253feac2f41f","fd28fb8a-d8e7-d00a-442f-d2a83ac391bd","b17f6b79-d0e0-c498-959d-505212340f53","d304da0c-22d4-5b7f-329f-7295d2a66fe5"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","7b12073b-4caf-0278-4223-253feac2f41f","d304da0c-22d4-5b7f-329f-7295d2a66fe5"]},{"id":"222","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":41,"column":9},"end":{"line":43,"column":10}},"status":"Killed","static":false,"coveredBy":["fd28fb8a-d8e7-d00a-442f-d2a83ac391bd","b17f6b79-d0e0-c498-959d-505212340f53"],"killedBy":["fd28fb8a-d8e7-d00a-442f-d2a83ac391bd","b17f6b79-d0e0-c498-959d-505212340f53"]},{"id":"223","mutatorName":"Equality mutation","replacement":"CoinSet.Min() \u003C total","location":{"start":{"line":44,"column":18},"end":{"line":44,"column":39}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","7b12073b-4caf-0278-4223-253feac2f41f","d304da0c-22d4-5b7f-329f-7295d2a66fe5"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f","d304da0c-22d4-5b7f-329f-7295d2a66fe5"]},{"id":"224","mutatorName":"Equality mutation","replacement":"CoinSet.Min() \u003E= total","location":{"start":{"line":44,"column":18},"end":{"line":44,"column":39}},"status":"Survived","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","7b12073b-4caf-0278-4223-253feac2f41f","d304da0c-22d4-5b7f-329f-7295d2a66fe5"],"killedBy":[]},{"id":"225","mutatorName":"Negate expression","replacement":"!(CoinSet.Min() \u003E total)","location":{"start":{"line":44,"column":18},"end":{"line":44,"column":39}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","7b12073b-4caf-0278-4223-253feac2f41f","d304da0c-22d4-5b7f-329f-7295d2a66fe5"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f","d304da0c-22d4-5b7f-329f-7295d2a66fe5"]},{"id":"226","mutatorName":"Linq method mutation (Min() to Max())","replacement":"CoinSet.Max","location":{"start":{"line":44,"column":18},"end":{"line":44,"column":29}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","7b12073b-4caf-0278-4223-253feac2f41f","d304da0c-22d4-5b7f-329f-7295d2a66fe5"],"killedBy":["7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"227","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":45,"column":9},"end":{"line":47,"column":10}},"status":"Survived","static":false,"coveredBy":["3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","d304da0c-22d4-5b7f-329f-7295d2a66fe5"],"killedBy":[]},{"id":"228","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":49,"column":9},"end":{"line":59,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"229","mutatorName":"Equality mutation","replacement":"i \u003E RepeatFactor","location":{"start":{"line":51,"column":29},"end":{"line":51,"column":45}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]},{"id":"230","mutatorName":"Equality mutation","replacement":"i \u003C= RepeatFactor","location":{"start":{"line":51,"column":29},"end":{"line":51,"column":45}},"status":"Timeout","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"231","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":51,"column":47},"end":{"line":51,"column":50}},"status":"Timeout","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"232","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":52,"column":13},"end":{"line":57,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"233","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":54,"column":17},"end":{"line":56,"column":18}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":[]},{"id":"234","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":55,"column":21},"end":{"line":55,"column":41}},"status":"Killed","static":false,"coveredBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"],"killedBy":["45e9a9b2-32f3-bde7-9a8f-8043ea479b17","2c593edd-2d3d-d18c-ecb1-e41bec15525f","ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","a7b83bdd-5dd9-2392-f6fd-25d15a221026","7b12073b-4caf-0278-4223-253feac2f41f"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\MyCleaner.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class MyCleaner(ILogger\u003CMyCleaner\u003E logger, HttpClient httpClient)\r\n{\r\n    public async Task\u003Cstring\u003E CleanUrlAsync(string url)\r\n    {\r\n        if (string.IsNullOrWhiteSpace(url))\r\n        {\r\n            return \u0022\u0022;\r\n        }\r\n        string extractedUrl = ExtractFromAddress(url);\r\n        if (extractedUrl != url)\r\n        {\r\n            return RemoveQueryParameters(extractedUrl);\r\n        }\r\n        try\r\n        {\r\n            string finalRedirectUrl = await FollowRedirectsAsync(url);\r\n\r\n            if (finalRedirectUrl.Contains(\u0022amazon.com\u0022))\r\n            {\r\n                finalRedirectUrl = RemoveAmazonExtraPathSegments(finalRedirectUrl);\r\n            }\r\n\r\n            return RemoveQueryParameters(finalRedirectUrl);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            logger.LogError(ex, \u0022Error processing URL: {Url}\u0022, url);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private static string RemoveQueryParameters(string url)\r\n    {\r\n        Uri uri = new(url);\r\n        return uri.GetLeftPart(UriPartial.Path);\r\n    }\r\n\r\n    private async Task\u003Cstring\u003E FollowRedirectsAsync(string url)\r\n    {\r\n        HttpResponseMessage response = await httpClient.GetAsync(url);\r\n        while (response.StatusCode == System.Net.HttpStatusCode.Redirect || response.StatusCode == System.Net.HttpStatusCode.MovedPermanently)\r\n        {\r\n            string redirectUrl = response.Headers.Location.ToString();\r\n            if (!Uri.IsWellFormedUriString(redirectUrl, UriKind.Absolute))\r\n            {\r\n                Uri baseUri = new(url);\r\n                redirectUrl = new Uri(baseUri, redirectUrl).ToString();\r\n            }\r\n            try\r\n            {\r\n                response = await httpClient.GetAsync(redirectUrl);\r\n            }\r\n            catch (Exception e)\r\n            {\r\n                logger.LogError(e, \u0022Exception in method {Method}\u0022, nameof(FollowRedirectsAsync));\r\n                return ExtractFromAddress(redirectUrl);\r\n            }\r\n        }\r\n        return response.RequestMessage.RequestUri.ToString();\r\n    }\r\n\r\n    private static string ExtractFromAddress(string url)\r\n    {\r\n        Uri uri = new(url);\r\n        System.Collections.Specialized.NameValueCollection queryParams = HttpUtility.ParseQueryString(uri.Query);\r\n\r\n        string uParam = queryParams.Get(\u0022u\u0022);\r\n        if (uParam != null)\r\n        {\r\n            return HttpUtility.UrlDecode(uParam);\r\n        }\r\n\r\n        string urlParam = queryParams.Get(\u0022url\u0022);\r\n        if (urlParam != null)\r\n        {\r\n            return HttpUtility.UrlDecode(urlParam);\r\n        }\r\n\r\n        string returnUrl = queryParams.Get(\u0022return\u0022);\r\n        if (returnUrl != null)\r\n        {\r\n            string decodedUrl = HttpUtility.UrlDecode(returnUrl);\r\n            string finalUrl = HttpUtility.ParseQueryString(new Uri(decodedUrl).Query).Get(\u0022u\u0022);\r\n            if (finalUrl != null)\r\n            {\r\n                return HttpUtility.UrlDecode(finalUrl);\r\n            }\r\n        }\r\n\r\n        return url;\r\n    }\r\n\r\n    private static string RemoveAmazonExtraPathSegments(string url)\r\n    {\r\n        Uri uri = new(url);\r\n        string[] segments = uri.Segments;\r\n        if (segments.Length \u003E 3 \u0026\u0026 segments[1].TrimEnd(\u0027/\u0027) == \u0022gp\u0022 \u0026\u0026 segments[2].TrimEnd(\u0027/\u0027) == \u0022product\u0022)\r\n        {\r\n            return $\u0022{uri.Scheme}://{uri.Host}{segments[0]}{segments[1]}{segments[2]}{segments[3]}\u0022;\r\n        }\r\n        return uri.GetLeftPart(UriPartial.Path);\r\n    }\r\n}\r\n","mutants":[{"id":"235","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":32,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["93f0458c-f90d-7313-7946-0aba561ea516","e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","4b6a5dd0-98cc-f37e-3e3f-388391cbed46","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":[]},{"id":"236","mutatorName":"String mutation","replacement":"(url!=null)","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"status":"Killed","static":false,"coveredBy":["93f0458c-f90d-7313-7946-0aba561ea516","e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","4b6a5dd0-98cc-f37e-3e3f-388391cbed46","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547"]},{"id":"237","mutatorName":"String mutation","replacement":"(url!=\u0022\u0022)","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"status":"Killed","static":false,"coveredBy":["93f0458c-f90d-7313-7946-0aba561ea516","e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","4b6a5dd0-98cc-f37e-3e3f-388391cbed46","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547"]},{"id":"238","mutatorName":"String mutation","replacement":"(url.Trim()!=\u0022\u0022)","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"status":"Killed","static":false,"coveredBy":["93f0458c-f90d-7313-7946-0aba561ea516","e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","4b6a5dd0-98cc-f37e-3e3f-388391cbed46","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547"]},{"id":"239","mutatorName":"Negate expression","replacement":"!(string.IsNullOrWhiteSpace(url))","location":{"start":{"line":7,"column":13},"end":{"line":7,"column":43}},"status":"Killed","static":false,"coveredBy":["93f0458c-f90d-7313-7946-0aba561ea516","e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","4b6a5dd0-98cc-f37e-3e3f-388391cbed46","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"]},{"id":"240","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":10,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["93f0458c-f90d-7313-7946-0aba561ea516","4b6a5dd0-98cc-f37e-3e3f-388391cbed46"],"killedBy":[]},{"id":"241","mutatorName":"String mutation","replacement":"\u0022Stryker was here!\u0022","location":{"start":{"line":9,"column":20},"end":{"line":9,"column":22}},"status":"Killed","static":false,"coveredBy":["93f0458c-f90d-7313-7946-0aba561ea516","4b6a5dd0-98cc-f37e-3e3f-388391cbed46"],"killedBy":["93f0458c-f90d-7313-7946-0aba561ea516","4b6a5dd0-98cc-f37e-3e3f-388391cbed46"]},{"id":"242","mutatorName":"Equality mutation","replacement":"extractedUrl == url","location":{"start":{"line":12,"column":13},"end":{"line":12,"column":32}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"]},{"id":"243","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":13,"column":9},"end":{"line":15,"column":10}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"]},{"id":"244","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":17,"column":9},"end":{"line":26,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"245","mutatorName":"Negate expression","replacement":"!(finalRedirectUrl.Contains(\u0022amazon.com\u0022))","location":{"start":{"line":20,"column":17},"end":{"line":20,"column":56}},"status":"Killed","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"246","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":20,"column":43},"end":{"line":20,"column":55}},"status":"Survived","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"247","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":21,"column":13},"end":{"line":23,"column":14}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"248","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":28,"column":9},"end":{"line":31,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"249","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":29,"column":13},"end":{"line":29,"column":69}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"250","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":29,"column":33},"end":{"line":29,"column":62}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"251","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":35,"column":5},"end":{"line":38,"column":6}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"]},{"id":"252","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":41,"column":5},"end":{"line":62,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"253","mutatorName":"Logical mutation","replacement":"response.StatusCode == System.Net.HttpStatusCode.Redirect \u0026\u0026 response.StatusCode == System.Net.HttpStatusCode.MovedPermanently","location":{"start":{"line":43,"column":16},"end":{"line":43,"column":142}},"status":"Killed","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"]},{"id":"254","mutatorName":"Negate expression","replacement":"!(response.StatusCode == System.Net.HttpStatusCode.Redirect || response.StatusCode == System.Net.HttpStatusCode.MovedPermanently)","location":{"start":{"line":43,"column":16},"end":{"line":43,"column":142}},"status":"Killed","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"255","mutatorName":"Equality mutation","replacement":"response.StatusCode != System.Net.HttpStatusCode.Redirect","location":{"start":{"line":43,"column":16},"end":{"line":43,"column":73}},"status":"Killed","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"256","mutatorName":"Equality mutation","replacement":"response.StatusCode != System.Net.HttpStatusCode.MovedPermanently","location":{"start":{"line":43,"column":77},"end":{"line":43,"column":142}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"257","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":44,"column":9},"end":{"line":60,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"],"killedBy":[]},{"id":"258","mutatorName":"LogicalNotExpression to un-LogicalNotExpression mutation","replacement":"Uri.IsWellFormedUriString(redirectUrl, UriKind.Absolute)","location":{"start":{"line":46,"column":17},"end":{"line":46,"column":74}},"status":"Survived","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"],"killedBy":[]},{"id":"259","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":47,"column":13},"end":{"line":50,"column":14}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"260","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":52,"column":13},"end":{"line":54,"column":14}},"status":"Timeout","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"],"killedBy":[]},{"id":"261","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":56,"column":13},"end":{"line":59,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"],"killedBy":[]},{"id":"262","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":57,"column":17},"end":{"line":57,"column":98}},"status":"Survived","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"],"killedBy":[]},{"id":"263","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":57,"column":36},"end":{"line":57,"column":66}},"status":"Survived","static":false,"coveredBy":["cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"],"killedBy":[]},{"id":"264","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":65,"column":5},"end":{"line":93,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":[]},{"id":"265","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":69,"column":41},"end":{"line":69,"column":44}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"]},{"id":"266","mutatorName":"Equality mutation","replacement":"uParam == null","location":{"start":{"line":70,"column":13},"end":{"line":70,"column":27}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","885941d6-acab-38a0-f09d-4bdb2c8635b9","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f","e284ffa2-64d9-3f23-53e9-67e114c21547"]},{"id":"267","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":71,"column":9},"end":{"line":73,"column":10}},"status":"Killed","static":false,"coveredBy":["c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"],"killedBy":["c277e603-9b5d-b4df-4b2d-b7625c409a0c","885941d6-acab-38a0-f09d-4bdb2c8635b9","c0391ff4-b8b6-27ed-436a-296ce9d6f52a","e284ffa2-64d9-3f23-53e9-67e114c21547","7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e"]},{"id":"268","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":75,"column":43},"end":{"line":75,"column":48}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","07ecbbbd-912f-7e64-b54c-89a16509e0f0","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"]},{"id":"269","mutatorName":"Equality mutation","replacement":"urlParam == null","location":{"start":{"line":76,"column":13},"end":{"line":76,"column":29}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","1effa24c-0840-bf43-a015-b14d77db8f74","07ecbbbd-912f-7e64-b54c-89a16509e0f0","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"270","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":77,"column":9},"end":{"line":79,"column":10}},"status":"Killed","static":false,"coveredBy":["e8525802-2125-3e78-b97b-7a5551dc920b","07ecbbbd-912f-7e64-b54c-89a16509e0f0","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"],"killedBy":["e8525802-2125-3e78-b97b-7a5551dc920b","07ecbbbd-912f-7e64-b54c-89a16509e0f0","16fd1fea-9ded-ecbd-90a9-54df83cbe5be","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335"]},{"id":"271","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":81,"column":44},"end":{"line":81,"column":52}},"status":"Killed","static":false,"coveredBy":["1effa24c-0840-bf43-a015-b14d77db8f74","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["1effa24c-0840-bf43-a015-b14d77db8f74"]},{"id":"272","mutatorName":"Equality mutation","replacement":"returnUrl == null","location":{"start":{"line":82,"column":13},"end":{"line":82,"column":30}},"status":"Killed","static":false,"coveredBy":["1effa24c-0840-bf43-a015-b14d77db8f74","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["1effa24c-0840-bf43-a015-b14d77db8f74","cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"273","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":83,"column":9},"end":{"line":90,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["1effa24c-0840-bf43-a015-b14d77db8f74"],"killedBy":[]},{"id":"274","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":85,"column":91},"end":{"line":85,"column":94}},"status":"Killed","static":false,"coveredBy":["1effa24c-0840-bf43-a015-b14d77db8f74"],"killedBy":["1effa24c-0840-bf43-a015-b14d77db8f74"]},{"id":"275","mutatorName":"Equality mutation","replacement":"finalUrl == null","location":{"start":{"line":86,"column":17},"end":{"line":86,"column":33}},"status":"Killed","static":false,"coveredBy":["1effa24c-0840-bf43-a015-b14d77db8f74"],"killedBy":["1effa24c-0840-bf43-a015-b14d77db8f74"]},{"id":"276","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":87,"column":13},"end":{"line":89,"column":14}},"status":"Killed","static":false,"coveredBy":["1effa24c-0840-bf43-a015-b14d77db8f74"],"killedBy":["1effa24c-0840-bf43-a015-b14d77db8f74"]},{"id":"277","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":96,"column":5},"end":{"line":104,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"278","mutatorName":"Logical mutation","replacement":"segments.Length \u003E 3 \u0026\u0026 segments[1].TrimEnd(\u0027/\u0027) == \u0022gp\u0022 || segments[2].TrimEnd(\u0027/\u0027) == \u0022product\u0022","location":{"start":{"line":99,"column":13},"end":{"line":99,"column":109}},"status":"Survived","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"279","mutatorName":"Negate expression","replacement":"!(segments.Length \u003E 3 \u0026\u0026 segments[1].TrimEnd(\u0027/\u0027) == \u0022gp\u0022 \u0026\u0026 segments[2].TrimEnd(\u0027/\u0027) == \u0022product\u0022)","location":{"start":{"line":99,"column":13},"end":{"line":99,"column":109}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"280","mutatorName":"Logical mutation","replacement":"segments.Length \u003E 3 || segments[1].TrimEnd(\u0027/\u0027) == \u0022gp\u0022","location":{"start":{"line":99,"column":13},"end":{"line":99,"column":68}},"status":"Survived","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"281","mutatorName":"Equality mutation","replacement":"segments.Length \u003C 3","location":{"start":{"line":99,"column":13},"end":{"line":99,"column":32}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"282","mutatorName":"Equality mutation","replacement":"segments.Length \u003E= 3","location":{"start":{"line":99,"column":13},"end":{"line":99,"column":32}},"status":"Survived","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"283","mutatorName":"Equality mutation","replacement":"segments[1].TrimEnd(\u0027/\u0027) != \u0022gp\u0022","location":{"start":{"line":99,"column":36},"end":{"line":99,"column":68}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"284","mutatorName":"String Method Mutation (Replace TrimEnd() with TrimStart())","replacement":"segments[1].TrimStart","location":{"start":{"line":99,"column":36},"end":{"line":99,"column":55}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"285","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":99,"column":64},"end":{"line":99,"column":68}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"286","mutatorName":"Equality mutation","replacement":"segments[2].TrimEnd(\u0027/\u0027) != \u0022product\u0022","location":{"start":{"line":99,"column":72},"end":{"line":99,"column":109}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"287","mutatorName":"String Method Mutation (Replace TrimEnd() with TrimStart())","replacement":"segments[2].TrimStart","location":{"start":{"line":99,"column":72},"end":{"line":99,"column":91}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"288","mutatorName":"String mutation","replacement":"\u0022\u0022","location":{"start":{"line":99,"column":100},"end":{"line":99,"column":109}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]},{"id":"289","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":100,"column":9},"end":{"line":102,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":[]},{"id":"290","mutatorName":"String mutation","replacement":"$\u0022\u0022","location":{"start":{"line":101,"column":20},"end":{"line":101,"column":100}},"status":"Killed","static":false,"coveredBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"],"killedBy":["5b966820-3107-d7a8-1a9e-153bb5eb264f"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\MySearch.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class MySearch\r\n{\r\n    public static bool LinearSearchIntegers(int[] arrayToSearch, int queryItem)\r\n    {\r\n        for (int i = 0; i \u003C arrayToSearch.Length; i\u002B\u002B)\r\n        {\r\n            if (arrayToSearch[i] == queryItem)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public static int BinarySearchIntegers(int[] arrayToSearch, int queryItem)\r\n    {\r\n        int[] inputArray = arrayToSearch;\r\n        Array.Sort(inputArray);\r\n        int lowerBound = 0;\r\n        int upperBound = inputArray.Length - 1;\r\n        int midPoint;\r\n        while (lowerBound \u003C= upperBound)\r\n        {\r\n            midPoint = (upperBound \u002B lowerBound) / 2;\r\n            if (inputArray[midPoint] == queryItem)\r\n            {\r\n                return midPoint;\r\n            }\r\n            else if (inputArray[midPoint] \u003C queryItem)\r\n            {\r\n                lowerBound = midPoint \u002B 1;\r\n            }\r\n            else if (inputArray[midPoint] \u003E queryItem)\r\n            {\r\n                upperBound = midPoint - 1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    public static int ReverseBinarySearchIntegers(int[] arrayToSearch, int queryItem)\r\n    {\r\n        int[] inputArray = arrayToSearch;\r\n        Array.Sort(inputArray);\r\n        int lowerBound = 0;\r\n        int upperBound = inputArray.Length - 1;\r\n        int midPoint;\r\n        while (lowerBound \u003C= upperBound)\r\n        {\r\n            midPoint = (upperBound \u002B lowerBound) / 2;\r\n            if (inputArray[midPoint] == queryItem)\r\n            {\r\n                return midPoint;\r\n            }\r\n            else if (inputArray[midPoint] \u003E queryItem)\r\n            {\r\n                upperBound = midPoint - 1;\r\n            }\r\n            else if (inputArray[midPoint] \u003C queryItem)\r\n            {\r\n                lowerBound = midPoint \u002B 1;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n}","mutants":[{"id":"291","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":15,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"],"killedBy":[]},{"id":"292","mutatorName":"Equality mutation","replacement":"i \u003E arrayToSearch.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":49}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"],"killedBy":["26ae7b32-529d-b07a-f504-48dd302a8491"]},{"id":"293","mutatorName":"Equality mutation","replacement":"i \u003C= arrayToSearch.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":49}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"],"killedBy":["502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"294","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":7,"column":51},"end":{"line":7,"column":54}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"],"killedBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"295","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":13,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"],"killedBy":[]},{"id":"296","mutatorName":"Equality mutation","replacement":"arrayToSearch[i] != queryItem","location":{"start":{"line":9,"column":17},"end":{"line":9,"column":46}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491","502c844e-261a-7cd0-9579-e4b580c23444"],"killedBy":["502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"297","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":10,"column":13},"end":{"line":12,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491"],"killedBy":[]},{"id":"298","mutatorName":"Boolean mutation","replacement":"false","location":{"start":{"line":11,"column":24},"end":{"line":11,"column":28}},"status":"Killed","static":false,"coveredBy":["26ae7b32-529d-b07a-f504-48dd302a8491"],"killedBy":["26ae7b32-529d-b07a-f504-48dd302a8491"]},{"id":"299","mutatorName":"Boolean mutation","replacement":"true","location":{"start":{"line":14,"column":16},"end":{"line":14,"column":21}},"status":"Killed","static":false,"coveredBy":["502c844e-261a-7cd0-9579-e4b580c23444"],"killedBy":["502c844e-261a-7cd0-9579-e4b580c23444"]},{"id":"300","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":18,"column":5},"end":{"line":41,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":[]},{"id":"301","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":20,"column":9},"end":{"line":20,"column":32}},"status":"Survived","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":[]},{"id":"302","mutatorName":"Arithmetic mutation","replacement":"inputArray.Length \u002B 1","location":{"start":{"line":22,"column":26},"end":{"line":22,"column":47}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"]},{"id":"303","mutatorName":"Equality mutation","replacement":"lowerBound \u003E upperBound","location":{"start":{"line":24,"column":16},"end":{"line":24,"column":40}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"304","mutatorName":"Equality mutation","replacement":"lowerBound \u003C upperBound","location":{"start":{"line":24,"column":16},"end":{"line":24,"column":40}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29"]},{"id":"305","mutatorName":"Negate expression","replacement":"!(lowerBound \u003C= upperBound)","location":{"start":{"line":24,"column":16},"end":{"line":24,"column":40}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"]},{"id":"306","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":25,"column":9},"end":{"line":39,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":[]},{"id":"307","mutatorName":"Arithmetic mutation","replacement":"(upperBound \u002B lowerBound) * 2","location":{"start":{"line":26,"column":24},"end":{"line":26,"column":53}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"]},{"id":"308","mutatorName":"Arithmetic mutation","replacement":"upperBound - lowerBound","location":{"start":{"line":26,"column":25},"end":{"line":26,"column":48}},"status":"Timeout","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":[]},{"id":"309","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] != queryItem","location":{"start":{"line":27,"column":17},"end":{"line":27,"column":50}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["3c4f43bb-d883-884e-2619-ec62fcb59835"]},{"id":"310","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":28,"column":13},"end":{"line":30,"column":14}},"status":"Timeout","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","4d0235b6-972b-2b6c-4a72-b2b320eb26f4","1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","51dd6172-85c2-5fdf-0907-cf19cd1714dd","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","6dedaf10-effa-2c3c-c774-db46b1a1a1ce","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"],"killedBy":[]},{"id":"311","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E queryItem","location":{"start":{"line":31,"column":22},"end":{"line":31,"column":54}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["3c4f43bb-d883-884e-2619-ec62fcb59835"]},{"id":"312","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C= queryItem","location":{"start":{"line":31,"column":22},"end":{"line":31,"column":54}},"status":"Survived","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":[]},{"id":"313","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003C queryItem)","location":{"start":{"line":31,"column":22},"end":{"line":31,"column":54}},"status":"Killed","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["3c4f43bb-d883-884e-2619-ec62fcb59835"]},{"id":"314","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":32,"column":13},"end":{"line":34,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","73c3cbec-da95-5aed-833b-724cb0744820","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":[]},{"id":"315","mutatorName":"Arithmetic mutation","replacement":"midPoint - 1","location":{"start":{"line":33,"column":30},"end":{"line":33,"column":42}},"status":"Timeout","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","73c3cbec-da95-5aed-833b-724cb0744820","3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":[]},{"id":"316","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C queryItem","location":{"start":{"line":35,"column":22},"end":{"line":35,"column":54}},"status":"Timeout","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"],"killedBy":[]},{"id":"317","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E= queryItem","location":{"start":{"line":35,"column":22},"end":{"line":35,"column":54}},"status":"Survived","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"],"killedBy":[]},{"id":"318","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003E queryItem)","location":{"start":{"line":35,"column":22},"end":{"line":35,"column":54}},"status":"Timeout","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"],"killedBy":[]},{"id":"319","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":36,"column":13},"end":{"line":38,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"],"killedBy":[]},{"id":"320","mutatorName":"Arithmetic mutation","replacement":"midPoint \u002B 1","location":{"start":{"line":37,"column":30},"end":{"line":37,"column":42}},"status":"Timeout","static":false,"coveredBy":["5507614f-2e67-d4ee-b0bd-b1a022f939fe","5428c202-02ec-cdcb-0412-0edb0492d23f","3c4f43bb-d883-884e-2619-ec62fcb59835","f784e7c8-0af3-f319-779d-1a5cf328ce28","73c3cbec-da95-5aed-833b-724cb0744820","253c806f-2044-9dd3-fd26-dec5e8a56d29","b9f67719-a803-f62e-9d59-ba43955028d8"],"killedBy":[]},{"id":"321","mutatorName":"UnaryMinusExpression to UnaryPlusExpression mutation","replacement":"\u002B1","location":{"start":{"line":40,"column":16},"end":{"line":40,"column":18}},"status":"Killed","static":false,"coveredBy":["3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"],"killedBy":["3df404e0-c303-ce1a-90ba-d39c35bd1189","7191c288-1d1b-359b-35d8-15911f29bb34"]},{"id":"322","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":44,"column":5},"end":{"line":67,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"323","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":46,"column":9},"end":{"line":46,"column":32}},"status":"Survived","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"324","mutatorName":"Arithmetic mutation","replacement":"inputArray.Length \u002B 1","location":{"start":{"line":48,"column":26},"end":{"line":48,"column":47}},"status":"Killed","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["22d3e955-f5d7-570a-db78-603e2def3d23","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f"]},{"id":"325","mutatorName":"Equality mutation","replacement":"lowerBound \u003E upperBound","location":{"start":{"line":50,"column":16},"end":{"line":50,"column":40}},"status":"Killed","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"]},{"id":"326","mutatorName":"Equality mutation","replacement":"lowerBound \u003C upperBound","location":{"start":{"line":50,"column":16},"end":{"line":50,"column":40}},"status":"Killed","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"]},{"id":"327","mutatorName":"Negate expression","replacement":"!(lowerBound \u003C= upperBound)","location":{"start":{"line":50,"column":16},"end":{"line":50,"column":40}},"status":"Killed","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"]},{"id":"328","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":51,"column":9},"end":{"line":65,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"329","mutatorName":"Arithmetic mutation","replacement":"(upperBound \u002B lowerBound) * 2","location":{"start":{"line":52,"column":24},"end":{"line":52,"column":53}},"status":"Killed","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"]},{"id":"330","mutatorName":"Arithmetic mutation","replacement":"upperBound - lowerBound","location":{"start":{"line":52,"column":25},"end":{"line":52,"column":48}},"status":"Timeout","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"331","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] != queryItem","location":{"start":{"line":53,"column":17},"end":{"line":53,"column":50}},"status":"Killed","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","17113666-da63-5ab3-a75b-e0cf4167fb8e"]},{"id":"332","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":54,"column":13},"end":{"line":56,"column":14}},"status":"Timeout","static":false,"coveredBy":["bbdefb79-028f-be2b-05a7-ef4ea8be416f","6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","54126116-86fa-4260-3817-8332d0a799f6","9b442e8f-d064-71df-a253-e2f688be89be","6ef2944e-9d8d-6b74-d27d-95bb0a893b14","837b18cf-2ffe-5b57-a17e-70344288cfc1","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"333","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C queryItem","location":{"start":{"line":57,"column":22},"end":{"line":57,"column":54}},"status":"Killed","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["54126116-86fa-4260-3817-8332d0a799f6"]},{"id":"334","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E= queryItem","location":{"start":{"line":57,"column":22},"end":{"line":57,"column":54}},"status":"Survived","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"335","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003E queryItem)","location":{"start":{"line":57,"column":22},"end":{"line":57,"column":54}},"status":"Killed","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":["54126116-86fa-4260-3817-8332d0a799f6"]},{"id":"336","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":58,"column":13},"end":{"line":60,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"337","mutatorName":"Arithmetic mutation","replacement":"midPoint \u002B 1","location":{"start":{"line":59,"column":30},"end":{"line":59,"column":42}},"status":"Timeout","static":false,"coveredBy":["6c01b839-96f5-011f-f967-992d8632f626","db4f3a93-b6de-53f9-1103-3efa90090697","54126116-86fa-4260-3817-8332d0a799f6","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e","3f955e28-0bb7-fc0d-1447-b7d272cedeba"],"killedBy":[]},{"id":"338","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003E queryItem","location":{"start":{"line":61,"column":22},"end":{"line":61,"column":54}},"status":"Timeout","static":false,"coveredBy":["22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e"],"killedBy":[]},{"id":"339","mutatorName":"Equality mutation","replacement":"inputArray[midPoint] \u003C= queryItem","location":{"start":{"line":61,"column":22},"end":{"line":61,"column":54}},"status":"Survived","static":false,"coveredBy":["22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e"],"killedBy":[]},{"id":"340","mutatorName":"Negate expression","replacement":"!(inputArray[midPoint] \u003C queryItem)","location":{"start":{"line":61,"column":22},"end":{"line":61,"column":54}},"status":"Timeout","static":false,"coveredBy":["22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e"],"killedBy":[]},{"id":"341","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":62,"column":13},"end":{"line":64,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e"],"killedBy":[]},{"id":"342","mutatorName":"Arithmetic mutation","replacement":"midPoint - 1","location":{"start":{"line":63,"column":30},"end":{"line":63,"column":42}},"status":"Timeout","static":false,"coveredBy":["22d3e955-f5d7-570a-db78-603e2def3d23","54126116-86fa-4260-3817-8332d0a799f6","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","bb3e6de6-ec9f-19f5-2cee-430dfa54440c","2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","17113666-da63-5ab3-a75b-e0cf4167fb8e"],"killedBy":[]},{"id":"343","mutatorName":"UnaryMinusExpression to UnaryPlusExpression mutation","replacement":"\u002B1","location":{"start":{"line":66,"column":16},"end":{"line":66,"column":18}},"status":"Killed","static":false,"coveredBy":["22d3e955-f5d7-570a-db78-603e2def3d23","ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f"],"killedBy":["ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\PascalTriangle.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class PascalTriangle\r\n{\r\n    public static List\u003CList\u003Cint\u003E\u003E GeneratePascalsTriangle(int rows)\r\n    {\r\n        List\u003CList\u003Cint\u003E\u003E triangle = [];\r\n\r\n        for (int i = 0; i \u003C rows; i\u002B\u002B)\r\n        {\r\n            List\u003Cint\u003E row = [1];\r\n\r\n            for (int j = 1; j \u003C i; j\u002B\u002B)\r\n            {\r\n                row.Add(triangle[i - 1][j - 1] \u002B triangle[i - 1][j]);\r\n            }\r\n\r\n            if (i \u003E 0)\r\n            {\r\n                row.Add(1);\r\n            }\r\n\r\n            triangle.Add(row);\r\n        }\r\n\r\n        return triangle;\r\n    }\r\n}\r\n","mutants":[{"id":"344","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":27,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["054241b3-70fd-2be8-807f-bf1a1d1181ed","52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":[]},{"id":"345","mutatorName":"Equality mutation","replacement":"i \u003E rows","location":{"start":{"line":9,"column":25},"end":{"line":9,"column":33}},"status":"Killed","static":false,"coveredBy":["054241b3-70fd-2be8-807f-bf1a1d1181ed","52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"]},{"id":"346","mutatorName":"Equality mutation","replacement":"i \u003C= rows","location":{"start":{"line":9,"column":25},"end":{"line":9,"column":33}},"status":"Killed","static":false,"coveredBy":["054241b3-70fd-2be8-807f-bf1a1d1181ed","52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["054241b3-70fd-2be8-807f-bf1a1d1181ed","52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"]},{"id":"347","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":9,"column":35},"end":{"line":9,"column":38}},"status":"Timeout","static":false,"coveredBy":["054241b3-70fd-2be8-807f-bf1a1d1181ed","52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":[]},{"id":"348","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":10,"column":9},"end":{"line":24,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":[]},{"id":"349","mutatorName":"Equality mutation","replacement":"j \u003E i","location":{"start":{"line":13,"column":29},"end":{"line":13,"column":34}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"]},{"id":"350","mutatorName":"Equality mutation","replacement":"j \u003C= i","location":{"start":{"line":13,"column":29},"end":{"line":13,"column":34}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"351","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"j--","location":{"start":{"line":13,"column":36},"end":{"line":13,"column":39}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"352","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":14,"column":13},"end":{"line":16,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":[]},{"id":"353","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":15,"column":17},"end":{"line":15,"column":70}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"354","mutatorName":"Arithmetic mutation","replacement":"triangle[i - 1][j - 1] - triangle[i - 1][j]","location":{"start":{"line":15,"column":25},"end":{"line":15,"column":68}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"355","mutatorName":"Arithmetic mutation","replacement":"i \u002B 1","location":{"start":{"line":15,"column":34},"end":{"line":15,"column":39}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"356","mutatorName":"Arithmetic mutation","replacement":"j \u002B 1","location":{"start":{"line":15,"column":41},"end":{"line":15,"column":46}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"357","mutatorName":"Arithmetic mutation","replacement":"i \u002B 1","location":{"start":{"line":15,"column":59},"end":{"line":15,"column":64}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"358","mutatorName":"Equality mutation","replacement":"i \u003C 0","location":{"start":{"line":18,"column":17},"end":{"line":18,"column":22}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"359","mutatorName":"Equality mutation","replacement":"i \u003E= 0","location":{"start":{"line":18,"column":17},"end":{"line":18,"column":22}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"]},{"id":"360","mutatorName":"Negate expression","replacement":"!(i \u003E 0)","location":{"start":{"line":18,"column":17},"end":{"line":18,"column":22}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"]},{"id":"361","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":19,"column":13},"end":{"line":21,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":[]},{"id":"362","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":20,"column":17},"end":{"line":20,"column":28}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50"]},{"id":"363","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":23,"column":13},"end":{"line":23,"column":31}},"status":"Killed","static":false,"coveredBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"],"killedBy":["52814b59-92b9-7896-d9ce-b15ef9e61d50","ba42db9c-1627-ecb1-da73-e9a837cb162e"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\Person.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic class Person : Entity\r\n{\r\n    public string Name { get; }\r\n    public string Password { get; }\r\n    internal Person(string name, string password)\r\n    {\r\n        Name = name;\r\n        Password = password;\r\n    }\r\n}\r\n","mutants":[{"id":"364","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":5},"end":{"line":11,"column":6}},"status":"Killed","static":false,"coveredBy":["b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\PersonFactory.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class PersonFactory\r\n{\r\n    private static readonly int MINIMUM_PASSWORD_LENGTH = 8;\r\n    private static readonly int MAXIMUM_PASSWORD_LENGTH = 128;\r\n    public static Person Create(string name, string password)\r\n    {\r\n        return CheckPasswordMeetsRequirements(password)\r\n            ? new Person(name, password)\r\n            : throw new ArgumentException($\u0022The password provided to create user {name} is not valid. A password must have a minimum length no shorter than {MINIMUM_PASSWORD_LENGTH} and no longer than {MAXIMUM_PASSWORD_LENGTH}.\u0022);\r\n    }\r\n    public static bool CheckPasswordMeetsRequirements(string password)\r\n    {\r\n        int length = password.Length;\r\n        return length \u003E= MINIMUM_PASSWORD_LENGTH \u0026\u0026 length \u003C= MAXIMUM_PASSWORD_LENGTH;\r\n    }\r\n}\r\n","mutants":[{"id":"365","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":5},"end":{"line":12,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":[]},{"id":"366","mutatorName":"Conditional (true) mutation","replacement":"(true?new Person(name, password)\r\n:throw new ArgumentException($\u0022The password provided to create user {name} is not valid. A password must have a minimum length no shorter than {MINIMUM_PASSWORD_LENGTH} and no longer than {MAXIMUM_PASSWORD_LENGTH}.\u0022))","location":{"start":{"line":9,"column":16},"end":{"line":11,"column":230}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7"]},{"id":"367","mutatorName":"Conditional (false) mutation","replacement":"(false?new Person(name, password)\r\n:throw new ArgumentException($\u0022The password provided to create user {name} is not valid. A password must have a minimum length no shorter than {MINIMUM_PASSWORD_LENGTH} and no longer than {MAXIMUM_PASSWORD_LENGTH}.\u0022))","location":{"start":{"line":9,"column":16},"end":{"line":11,"column":230}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["b8061a32-c486-631b-d34d-ac7cc462e3ec","9dcf9682-55a1-efe4-1905-97bd193aa956"]},{"id":"368","mutatorName":"String mutation","replacement":"$\u0022\u0022","location":{"start":{"line":11,"column":43},"end":{"line":11,"column":229}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7"],"killedBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7"]},{"id":"369","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":14,"column":5},"end":{"line":17,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","65c767eb-acf5-39be-4898-9d5f8c18c69f","336bf367-480c-53d7-1d6c-9b82da3bbbbf","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":[]},{"id":"370","mutatorName":"Logical mutation","replacement":"length \u003E= MINIMUM_PASSWORD_LENGTH || length \u003C= MAXIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":16},"end":{"line":16,"column":86}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","65c767eb-acf5-39be-4898-9d5f8c18c69f","336bf367-480c-53d7-1d6c-9b82da3bbbbf","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","65c767eb-acf5-39be-4898-9d5f8c18c69f","336bf367-480c-53d7-1d6c-9b82da3bbbbf"]},{"id":"371","mutatorName":"Equality mutation","replacement":"length \u003C MINIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":16},"end":{"line":16,"column":49}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","65c767eb-acf5-39be-4898-9d5f8c18c69f","336bf367-480c-53d7-1d6c-9b82da3bbbbf","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["efd80742-3539-5f78-dc61-dd861e4c9bc7","336bf367-480c-53d7-1d6c-9b82da3bbbbf","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"]},{"id":"372","mutatorName":"Equality mutation","replacement":"length \u003E MINIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":16},"end":{"line":16,"column":49}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","efd80742-3539-5f78-dc61-dd861e4c9bc7","65c767eb-acf5-39be-4898-9d5f8c18c69f","336bf367-480c-53d7-1d6c-9b82da3bbbbf","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["b8061a32-c486-631b-d34d-ac7cc462e3ec","6393fd07-043c-a846-c9a2-d3bb8af3d1d8"]},{"id":"373","mutatorName":"Equality mutation","replacement":"length \u003E MAXIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":53},"end":{"line":16,"column":86}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","65c767eb-acf5-39be-4898-9d5f8c18c69f","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","65c767eb-acf5-39be-4898-9d5f8c18c69f","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"]},{"id":"374","mutatorName":"Equality mutation","replacement":"length \u003C MAXIMUM_PASSWORD_LENGTH","location":{"start":{"line":16,"column":53},"end":{"line":16,"column":86}},"status":"Killed","static":false,"coveredBy":["c113e76a-74f8-584c-423d-58e58bafe2a7","65c767eb-acf5-39be-4898-9d5f8c18c69f","b8061a32-c486-631b-d34d-ac7cc462e3ec","a94ab373-9e5e-4371-7ffb-873b026e9749","663e77e5-49e2-b5ab-02f9-dba149da0007","6393fd07-043c-a846-c9a2-d3bb8af3d1d8","9dcf9682-55a1-efe4-1905-97bd193aa956"],"killedBy":["a94ab373-9e5e-4371-7ffb-873b026e9749","9dcf9682-55a1-efe4-1905-97bd193aa956"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\Revocation.cs":{"language":"cs","source":"using System.IO;\r\n\r\nnamespace hellolib;\r\n\r\npublic static class Revocation\r\n{\r\n    public static List\u003Cstring\u003E ReadCsv(string filename)\r\n    {\r\n        using StreamReader reader = new(filename);\r\n        List\u003Cstring\u003E result = [];\r\n        while (!reader.EndOfStream)\r\n        {\r\n            string line = reader.ReadLine();\r\n            string[] values = line.Split(\u0027,\u0027);\r\n            result.Add(values[0]);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public static void GetBatches(string filename, int size)\r\n    {\r\n        List\u003Cstring\u003E source = ReadCsv(filename);\r\n        IEnumerable\u003CIEnumerable\u003Cstring\u003E\u003E batches = source.Batch(size);\r\n        foreach (IEnumerable\u003Cstring\u003E bat in batches)\r\n        {\r\n            int x = bat.ToList().Count;\r\n        }\r\n    }\r\n\r\n    public static IEnumerable\u003CIEnumerable\u003CTSource\u003E\u003E Batch\u003CTSource\u003E(\r\n                  this IEnumerable\u003CTSource\u003E source, int size)\r\n    {\r\n        TSource[] bucket = null;\r\n        int count = 0;\r\n\r\n        foreach (TSource item in source)\r\n        {\r\n            bucket ??= new TSource[size];\r\n\r\n            bucket[count\u002B\u002B] = item;\r\n            if (count != size)\r\n            {\r\n                continue;\r\n            }\r\n\r\n            yield return bucket;\r\n\r\n            bucket = null;\r\n            count = 0;\r\n        }\r\n\r\n        if (bucket != null \u0026\u0026 count \u003E 0)\r\n        {\r\n            yield return bucket.Take(count).ToArray();\r\n        }\r\n    }\r\n}\r\n","mutants":[{"id":"375","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":5},"end":{"line":18,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"],"killedBy":[]},{"id":"376","mutatorName":"LogicalNotExpression to un-LogicalNotExpression mutation","replacement":"reader.EndOfStream","location":{"start":{"line":11,"column":16},"end":{"line":11,"column":35}},"status":"Killed","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"],"killedBy":["61150559-0a50-a8ab-53ea-098d910e2676"]},{"id":"377","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":12,"column":9},"end":{"line":16,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"],"killedBy":[]},{"id":"378","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":15,"column":13},"end":{"line":15,"column":35}},"status":"Killed","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95","61150559-0a50-a8ab-53ea-098d910e2676"],"killedBy":["61150559-0a50-a8ab-53ea-098d910e2676"]},{"id":"379","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":21,"column":5},"end":{"line":28,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"380","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":25,"column":9},"end":{"line":27,"column":10}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"381","mutatorName":"Linq method mutation (Count() to Sum())","replacement":"bat.ToList().Sum","location":{"start":{"line":26,"column":21},"end":{"line":26,"column":39}},"status":"CompileError","statusReason":"Mutant caused compile errors","static":false,"coveredBy":[],"killedBy":[]},{"id":"382","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":32,"column":5},"end":{"line":56,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"383","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":37,"column":9},"end":{"line":50,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"384","mutatorName":"CoalesceAssignmentExpression to SimpleAssignmentExpression mutation","replacement":"bucket = new TSource[size]","location":{"start":{"line":38,"column":13},"end":{"line":38,"column":41}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"385","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"count--","location":{"start":{"line":40,"column":20},"end":{"line":40,"column":27}},"status":"Killed","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"]},{"id":"386","mutatorName":"Equality mutation","replacement":"count == size","location":{"start":{"line":41,"column":17},"end":{"line":41,"column":30}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"387","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":42,"column":13},"end":{"line":44,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"388","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":43,"column":17},"end":{"line":43,"column":26}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"389","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":46,"column":13},"end":{"line":46,"column":33}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"390","mutatorName":"Logical mutation","replacement":"bucket != null || count \u003E 0","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"391","mutatorName":"Negate expression","replacement":"!(bucket != null \u0026\u0026 count \u003E 0)","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"392","mutatorName":"Equality mutation","replacement":"bucket == null","location":{"start":{"line":52,"column":13},"end":{"line":52,"column":27}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"393","mutatorName":"Equality mutation","replacement":"count \u003C 0","location":{"start":{"line":52,"column":31},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"394","mutatorName":"Equality mutation","replacement":"count \u003E= 0","location":{"start":{"line":52,"column":31},"end":{"line":52,"column":40}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"395","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":53,"column":9},"end":{"line":55,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"396","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":54,"column":13},"end":{"line":54,"column":55}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]},{"id":"397","mutatorName":"Linq method mutation (Take() to Skip())","replacement":"bucket.Skip","location":{"start":{"line":54,"column":26},"end":{"line":54,"column":37}},"status":"Survived","static":false,"coveredBy":["a4247d49-865b-8d8f-0004-3cf017e13f95"],"killedBy":[]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\TwoSum.cs":{"language":"cs","source":"namespace hellolib;\r\n\r\npublic static class TwoSum\r\n{\r\n    public static int[] GetTwoSumNaive(int[] nums, int target)\r\n    {\r\n        for (int i = 0; i \u003C nums.Length; i\u002B\u002B)\r\n        {\r\n            for (int j = 0; j \u003C nums.Length; j\u002B\u002B)\r\n            {\r\n                if (i != j \u0026\u0026 nums[i] \u002B nums[j] == target)\r\n                {\r\n                    return [i, j];\r\n                }\r\n            }\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public static int[] GetTwoSumOptimized(int[] nums, int target)\r\n    {\r\n        Dictionary\u003Cint, int\u003E map = [];\r\n        for (int i = 0; i \u003C nums.Length; i\u002B\u002B)\r\n        {\r\n            int complement = target - nums[i];\r\n            if (map.TryGetValue(complement, out int value))\r\n            {\r\n                return [value, i];\r\n            }\r\n            map[nums[i]] = i;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public static bool CheckExists(int[] a, int X)\r\n    {\r\n        List\u003Cint\u003E myList = [.. a];\r\n        for (int i = 0; i \u003C myList.Count; i\u002B\u002B)\r\n        {\r\n            for (int j = i \u002B 1; j \u003C myList.Count; j\u002B\u002B)\r\n            {\r\n                if (myList[i] \u002B myList[j] == X)\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n\r\n    public static bool CheckExistsHashed(int[] array, int target)\r\n    {\r\n        HashSet\u003Cint\u003E mySet = [];\r\n        foreach (int element in array)\r\n        {\r\n            if (mySet.Contains(element))\r\n            {\r\n                return true;\r\n            }\r\n            else\r\n            {\r\n                _ = mySet.Add(target - element);\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}","mutants":[{"id":"398","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":6,"column":5},"end":{"line":18,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"399","mutatorName":"Equality mutation","replacement":"i \u003E nums.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":40}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"400","mutatorName":"Equality mutation","replacement":"i \u003C= nums.Length","location":{"start":{"line":7,"column":25},"end":{"line":7,"column":40}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"401","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":7,"column":42},"end":{"line":7,"column":45}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"402","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":8,"column":9},"end":{"line":16,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"403","mutatorName":"Equality mutation","replacement":"j \u003E nums.Length","location":{"start":{"line":9,"column":29},"end":{"line":9,"column":44}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"404","mutatorName":"Equality mutation","replacement":"j \u003C= nums.Length","location":{"start":{"line":9,"column":29},"end":{"line":9,"column":44}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"405","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"j--","location":{"start":{"line":9,"column":46},"end":{"line":9,"column":49}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"406","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":10,"column":13},"end":{"line":15,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"407","mutatorName":"Logical mutation","replacement":"i != j || nums[i] \u002B nums[j] == target","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":58}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"408","mutatorName":"Negate expression","replacement":"!(i != j \u0026\u0026 nums[i] \u002B nums[j] == target)","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":58}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"409","mutatorName":"Equality mutation","replacement":"i == j","location":{"start":{"line":11,"column":21},"end":{"line":11,"column":27}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"410","mutatorName":"Equality mutation","replacement":"nums[i] \u002B nums[j] != target","location":{"start":{"line":11,"column":31},"end":{"line":11,"column":58}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"411","mutatorName":"Arithmetic mutation","replacement":"nums[i] - nums[j]","location":{"start":{"line":11,"column":31},"end":{"line":11,"column":48}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"412","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":12,"column":17},"end":{"line":14,"column":18}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"413","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":21,"column":5},"end":{"line":33,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"414","mutatorName":"Equality mutation","replacement":"i \u003E nums.Length","location":{"start":{"line":23,"column":25},"end":{"line":23,"column":40}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"415","mutatorName":"Equality mutation","replacement":"i \u003C= nums.Length","location":{"start":{"line":23,"column":25},"end":{"line":23,"column":40}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"416","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":23,"column":42},"end":{"line":23,"column":45}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"417","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":24,"column":9},"end":{"line":31,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":[],"killedBy":[]},{"id":"418","mutatorName":"Arithmetic mutation","replacement":"target \u002B nums[i]","location":{"start":{"line":25,"column":30},"end":{"line":25,"column":46}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"419","mutatorName":"Negate expression","replacement":"!(map.TryGetValue(complement, out int value))","location":{"start":{"line":26,"column":17},"end":{"line":26,"column":59}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"420","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":27,"column":13},"end":{"line":29,"column":14}},"status":"NoCoverage","statusReason":"Not covered by any test.","static":false,"coveredBy":[],"killedBy":[]},{"id":"421","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":36,"column":5},"end":{"line":49,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":[]},{"id":"422","mutatorName":"Equality mutation","replacement":"i \u003E myList.Count","location":{"start":{"line":38,"column":25},"end":{"line":38,"column":41}},"status":"CompileError","statusReason":"Mutant caused compile errors","static":false,"coveredBy":[],"killedBy":[]},{"id":"423","mutatorName":"Equality mutation","replacement":"i \u003C= myList.Count","location":{"start":{"line":38,"column":25},"end":{"line":38,"column":41}},"status":"Survived","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":[]},{"id":"424","mutatorName":"Linq method mutation (Count() to Sum())","replacement":"myList.Sum","location":{"start":{"line":38,"column":29},"end":{"line":38,"column":41}},"status":"CompileError","statusReason":"Mutant caused compile errors","static":false,"coveredBy":[],"killedBy":[]},{"id":"425","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"i--","location":{"start":{"line":38,"column":43},"end":{"line":38,"column":46}},"status":"Killed","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":["5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"]},{"id":"426","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":39,"column":9},"end":{"line":47,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":[]},{"id":"427","mutatorName":"Arithmetic mutation","replacement":"i - 1","location":{"start":{"line":40,"column":26},"end":{"line":40,"column":31}},"status":"Killed","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"]},{"id":"428","mutatorName":"Equality mutation","replacement":"j \u003E myList.Count","location":{"start":{"line":40,"column":33},"end":{"line":40,"column":49}},"status":"CompileError","statusReason":"Mutant caused compile errors","static":false,"coveredBy":[],"killedBy":[]},{"id":"429","mutatorName":"Equality mutation","replacement":"j \u003C= myList.Count","location":{"start":{"line":40,"column":33},"end":{"line":40,"column":49}},"status":"Killed","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":["5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"]},{"id":"430","mutatorName":"Linq method mutation (Count() to Sum())","replacement":"myList.Sum","location":{"start":{"line":40,"column":37},"end":{"line":40,"column":49}},"status":"CompileError","statusReason":"Mutant caused compile errors","static":false,"coveredBy":[],"killedBy":[]},{"id":"431","mutatorName":"PostIncrementExpression to PostDecrementExpression mutation","replacement":"j--","location":{"start":{"line":40,"column":51},"end":{"line":40,"column":54}},"status":"Killed","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"]},{"id":"432","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":41,"column":13},"end":{"line":46,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":[]},{"id":"433","mutatorName":"Equality mutation","replacement":"myList[i] \u002B myList[j] != X","location":{"start":{"line":42,"column":21},"end":{"line":42,"column":47}},"status":"Killed","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":["5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","63a7030c-92d9-2f9e-fcc4-f7e948560735","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"]},{"id":"434","mutatorName":"Arithmetic mutation","replacement":"myList[i] - myList[j]","location":{"start":{"line":42,"column":21},"end":{"line":42,"column":42}},"status":"Killed","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","63a7030c-92d9-2f9e-fcc4-f7e948560735","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a"]},{"id":"435","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":43,"column":17},"end":{"line":45,"column":18}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a"],"killedBy":[]},{"id":"436","mutatorName":"Boolean mutation","replacement":"false","location":{"start":{"line":44,"column":28},"end":{"line":44,"column":32}},"status":"Killed","static":false,"coveredBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a"],"killedBy":["6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","27f8804b-5d58-248c-0fe3-da2a56e9feb0","72973bde-d9fe-aeae-1e53-19333d331717","f2bb961d-e444-d478-f4b7-2d6c11302f4a","6126f356-3e97-57be-22e1-42c6e3f35908","4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","2b75082e-1372-fb84-3dea-f03fa716e7b3","b30ada94-4b96-ebb8-e446-9ed617496b77","bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","b2c38874-79a9-9001-2967-f33f739e6399","84a9af4e-bed9-6dd3-50b8-d68f5ce42207","64bb8968-acf9-8486-5353-844b40d6dc33","317f20a2-4fa7-b745-12bc-4b35744d32b9","04437ea8-6483-1983-94f5-7f08d8af11c3","608481ea-908e-18b6-d681-36ccb462fe56","7d1faa54-9ed8-850a-42f8-1ac72b991096","ac7005f9-c120-9f68-db0c-837753f4d23d","b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","5cae4439-6186-510b-510f-77fc6c9fbe5a"]},{"id":"437","mutatorName":"Boolean mutation","replacement":"true","location":{"start":{"line":48,"column":16},"end":{"line":48,"column":21}},"status":"Killed","static":false,"coveredBy":["5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","63a7030c-92d9-2f9e-fcc4-f7e948560735","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"],"killedBy":["5804925b-bd12-2b64-204b-2b035a8d0636","73021308-8aae-8a9f-70c7-7e07e560a013","b94f1be9-669e-bb60-307c-4444860e3ee1","785d6c34-d3b1-3fc6-7696-68d06705592d","3536dcaf-765d-9f3f-b7e4-160ede70b67e","63a7030c-92d9-2f9e-fcc4-f7e948560735","e41a5a97-12ce-1fd5-1355-d9281884c1ed","a62549c3-744b-dd7d-39d6-c12668dd43da","5bd8cb63-c4d6-3b23-321d-0838756637bb","897ce764-51e2-e29c-6cce-53652b60764f","aeee52db-05ca-05a6-c53f-7934d77a09ae","c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","a2de0c10-def7-9c09-6c9f-244836cec741","a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","c084bf5e-0ed2-43ed-aaab-241ac8484115","eab896d3-9ef7-00b2-ea5d-95fe475b37e5"]},{"id":"438","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":53,"column":5},"end":{"line":67,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"],"killedBy":[]},{"id":"439","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":56,"column":9},"end":{"line":65,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"],"killedBy":[]},{"id":"440","mutatorName":"Negate expression","replacement":"!(mySet.Contains(element))","location":{"start":{"line":57,"column":17},"end":{"line":57,"column":40}},"status":"Killed","static":false,"coveredBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"],"killedBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5"]},{"id":"441","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":58,"column":13},"end":{"line":60,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"],"killedBy":[]},{"id":"442","mutatorName":"Boolean mutation","replacement":"false","location":{"start":{"line":59,"column":24},"end":{"line":59,"column":28}},"status":"Killed","static":false,"coveredBy":["1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"],"killedBy":["1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"]},{"id":"443","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":62,"column":13},"end":{"line":64,"column":14}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"],"killedBy":[]},{"id":"444","mutatorName":"Arithmetic mutation","replacement":"target \u002B element","location":{"start":{"line":63,"column":31},"end":{"line":63,"column":47}},"status":"Killed","static":false,"coveredBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"],"killedBy":["1caaaedf-702d-27fb-1265-12ea2cbd3429","fa42ce38-b0b1-d8a0-a161-a89cc11fc441","064bdf83-2ae4-041c-2cc1-6c38da27a3ff","2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","f74f529a-1b71-de47-657b-e554fb36d102","453b0e23-8533-f6fa-8d95-243cb3de2130","c50155c6-de10-7c86-525e-d974dd092f1f","e107eaca-fe43-f9a0-93bd-8c66bc6d0500","5e47aae2-d461-3b4d-1cbf-275b8f158cf6","bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","39115b3a-df7a-306d-9b58-4cacd7bb902d"]},{"id":"445","mutatorName":"Boolean mutation","replacement":"true","location":{"start":{"line":66,"column":16},"end":{"line":66,"column":21}},"status":"Killed","static":false,"coveredBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5"],"killedBy":["064472d4-99cb-18eb-cb8b-e268bcf3b3b6","0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","322bcf0d-5590-c062-9a3a-877e46c0d111","b4a8ee54-f203-fc9b-fc9d-756251e1175a","c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","e6d71435-1ee0-ecd6-0f05-2f004239ce1f","cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","c59c8731-489a-12bb-7c4d-601a3e56f3be","20279295-c7db-b8f5-9928-e21a5ea38158","3bffe4e0-9446-e6a5-6f1a-0695391b68a8","50154462-352c-390f-509b-9019b196e971","11d19e7c-9090-d0ca-0771-bfa3dd275e0c","93cc05e6-46a2-a359-f226-759fe5f5a053","f1785c32-7006-eb93-6648-71fee0ae14fc","e17f67b4-9142-7a1f-c5af-0fc803648ffd","bf42e8fd-bbe0-ff3b-9417-ba03be245293","4b31278f-2373-6dc2-757d-fd2137701f58","455c26c7-7af6-aa25-4732-fe1f3162994a","7c6c86f4-0112-4c10-d71b-d6238cf9d130","86bed35d-c691-6540-5537-c7bf8753ebf2","689b64ae-b941-1202-5b8a-1a432eabfcea","676bac46-8023-7de1-08b0-0ffca48b80f5"]}]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\usings.cs":{"language":"cs","source":"global using System;\r\nglobal using System.Collections.Generic;\r\nglobal using System.Linq;\r\nglobal using System.Web;\r\nglobal using Microsoft.Extensions.Logging;\r\nglobal using System.Net.Http;\r\nglobal using System.Threading.Tasks;","mutants":[]},"C:\\Users\\kushal\\src\\mydotnet\\hellolib\\Weather.cs":{"language":"cs","source":"using System.Text.Json;\r\n\r\nnamespace hellolib;\r\n\r\npublic class Weather(HttpClient httpClient)\r\n{\r\n    private readonly HttpClient _httpClient = httpClient;\r\n\r\n    public async Task\u003CCurrentWeather\u003E GetCurrentWeatherAsync(string latitude, string longitude)\r\n    {\r\n        string url = $\u0022https://api.weather.gov/points/{latitude},{longitude}/forecast/current\u0022;\r\n\r\n        HttpResponseMessage response = await _httpClient.GetAsync(url);\r\n\r\n        if (response.IsSuccessStatusCode)\r\n        {\r\n            string content = await response.Content.ReadAsStringAsync();\r\n\r\n            CurrentWeather currentWeather = JsonSerializer.Deserialize\u003CCurrentWeather\u003E(content);\r\n\r\n            return currentWeather;\r\n        }\r\n        else\r\n        {\r\n            throw new WeatherFetchException($\u0022Failed to get weather information: {response.StatusCode}\u0022);\r\n        }\r\n    }\r\n}\r\n\r\npublic class CurrentWeather\r\n{\r\n    public string Temperature { get; set; }\r\n    public string Humidity { get; set; }\r\n    public string WindSpeed { get; set; }\r\n    public string WindDirection { get; set; }\r\n}\r\n\r\npublic class WeatherFetchException(string message) : Exception(message)\r\n{\r\n}\r\n","mutants":[{"id":"446","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":10,"column":5},"end":{"line":27,"column":6}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["125323dd-d717-d330-f2fc-52240996a02a","16836486-f27f-c01b-a7ff-31cea0bfc4a3","5bb46809-2907-ebc0-2416-2522d6e1c34f","27c3bf13-b343-33ad-333c-fc4b029e222d","cde98f5a-b0e7-e7a3-1b29-c6404288837f"],"killedBy":[]},{"id":"447","mutatorName":"String mutation","replacement":"$\u0022\u0022","location":{"start":{"line":11,"column":22},"end":{"line":11,"column":95}},"status":"Killed","static":false,"coveredBy":["125323dd-d717-d330-f2fc-52240996a02a","16836486-f27f-c01b-a7ff-31cea0bfc4a3","5bb46809-2907-ebc0-2416-2522d6e1c34f","27c3bf13-b343-33ad-333c-fc4b029e222d","cde98f5a-b0e7-e7a3-1b29-c6404288837f"],"killedBy":["16836486-f27f-c01b-a7ff-31cea0bfc4a3","5bb46809-2907-ebc0-2416-2522d6e1c34f","cde98f5a-b0e7-e7a3-1b29-c6404288837f"]},{"id":"448","mutatorName":"Negate expression","replacement":"!(response.IsSuccessStatusCode)","location":{"start":{"line":15,"column":13},"end":{"line":15,"column":41}},"status":"Killed","static":false,"coveredBy":["125323dd-d717-d330-f2fc-52240996a02a","16836486-f27f-c01b-a7ff-31cea0bfc4a3","5bb46809-2907-ebc0-2416-2522d6e1c34f","27c3bf13-b343-33ad-333c-fc4b029e222d","cde98f5a-b0e7-e7a3-1b29-c6404288837f"],"killedBy":["16836486-f27f-c01b-a7ff-31cea0bfc4a3","5bb46809-2907-ebc0-2416-2522d6e1c34f","cde98f5a-b0e7-e7a3-1b29-c6404288837f"]},{"id":"449","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":16,"column":9},"end":{"line":22,"column":10}},"status":"Killed","static":false,"coveredBy":["16836486-f27f-c01b-a7ff-31cea0bfc4a3","5bb46809-2907-ebc0-2416-2522d6e1c34f","cde98f5a-b0e7-e7a3-1b29-c6404288837f"],"killedBy":["16836486-f27f-c01b-a7ff-31cea0bfc4a3","5bb46809-2907-ebc0-2416-2522d6e1c34f","cde98f5a-b0e7-e7a3-1b29-c6404288837f"]},{"id":"450","mutatorName":"Block removal mutation","replacement":"{}","location":{"start":{"line":24,"column":9},"end":{"line":26,"column":10}},"status":"Ignored","statusReason":"Removed by block already covered filter","static":false,"coveredBy":["125323dd-d717-d330-f2fc-52240996a02a","27c3bf13-b343-33ad-333c-fc4b029e222d"],"killedBy":[]},{"id":"451","mutatorName":"Statement mutation","replacement":";","location":{"start":{"line":25,"column":13},"end":{"line":25,"column":106}},"status":"Survived","static":false,"coveredBy":["125323dd-d717-d330-f2fc-52240996a02a","27c3bf13-b343-33ad-333c-fc4b029e222d"],"killedBy":[]},{"id":"452","mutatorName":"String mutation","replacement":"$\u0022\u0022","location":{"start":{"line":25,"column":45},"end":{"line":25,"column":104}},"status":"Survived","static":false,"coveredBy":["125323dd-d717-d330-f2fc-52240996a02a","27c3bf13-b343-33ad-333c-fc4b029e222d"],"killedBy":[]}]}},"testFiles":{"C:\\Users\\kushal\\src\\mydotnet\\tests\\AddTwoNumbersTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class AddTwoNumbersTests\r\n{\r\n    [Fact]\r\n    public void AddTwoNumbers_Freebie()\r\n    {\r\n        Solution solution = new();\r\n        solution.Should().NotBeNull();\r\n    }\r\n\r\n    [Fact]\r\n    public void AddTwoNumbers_ShouldReturnSumWhenBothInputsAreSingleDigitAndZero()\r\n    {\r\n        // Arrange\r\n        ListNode first = new()\r\n        {\r\n            val = 0,\r\n            next = null\r\n        };\r\n        ListNode second = new()\r\n        {\r\n            val = 0,\r\n            next = null\r\n        };\r\n        Solution solution = new ();\r\n\r\n        // Act\r\n        ListNode actual = solution.AddTwoNumbers(first, second);\r\n\r\n        // Assert\r\n        actual.val.Should().Be(0);\r\n        actual.next.Should().BeNull();\r\n    }\r\n\r\n    [Fact]\r\n    public void AddTwoNumbers_ShouldReturnSumWhenBothInputsAreSingleDigitAndOne()\r\n    {\r\n        // Arrange\r\n        ListNode first = new()\r\n        {\r\n            val = 1,\r\n            next = null\r\n        };\r\n        ListNode second = new()\r\n        {\r\n            val = 1,\r\n            next = null\r\n        };\r\n        Solution solution = new();\r\n\r\n        // Act\r\n        ListNode actual = solution.AddTwoNumbers(first, second);\r\n\r\n        // Assert\r\n        actual.val.Should().Be(2);\r\n        actual.next.Should().BeNull();\r\n    }\r\n\r\n    \r\n\r\n    [Theory]\r\n    [InlineData(1, 2, 3, 4, 4, 6)]\r\n    [InlineData(5, 6, 4, 3, 9, 9)]\r\n    [InlineData(5, 4, 4, 3, 9, 7)]\r\n    [InlineData(1, 1, 1, 1, 2, 2)]\r\n    [InlineData(0, 2, 1, 1, 1, 3)]\r\n    [InlineData(1, 2, 0, 1, 1, 3)]\r\n    public void AddTwoNumbers_ShouldReturnSumWhenBothInputsAreTwoDigits(int first1, int first2, int second1, int second2, int result1, int result2)\r\n    {\r\n        // Arrange\r\n        ListNode firstA = new()\r\n        {\r\n            val = first1,\r\n            next = null\r\n        };\r\n        ListNode firstB = new()\r\n        {\r\n            val = first2,\r\n            next = firstA\r\n        };\r\n        ListNode secondA = new()\r\n        {\r\n            val = second1,\r\n            next = null\r\n        };\r\n        ListNode secondB = new()\r\n        {\r\n            val = second2,\r\n            next = secondA\r\n        };\r\n        Solution solution = new();\r\n\r\n        // Act\r\n        ListNode actual = solution.AddTwoNumbers(firstB, secondB);\r\n\r\n        // Assert\r\n        actual.val.Should().Be(result2);\r\n        actual.next.val.Should().Be(result1);\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Definition for singly-linked list.\r\n * public class ListNode {\r\n *     public int val;\r\n *     public ListNode next;\r\n *     public ListNode(int val=0, ListNode next=null) {\r\n *         this.val = val;\r\n *         this.next = next;\r\n *     }\r\n * }\r\n */\r\n//public class Solution\r\n//{\r\n//    public ListNode AddTwoNumbers(ListNode l1, ListNode l2)\r\n//    {\r\n//        int first = GetIntegerFromList(l1);\r\n//        int second = GetIntegerFromList(l2);\r\n//        int sum = first \u002B second;\r\n//        ListNode result = GetListFromInteger(sum);\r\n//        return result;\r\n//    }\r\n\r\n//    public int GetIntegerFromList(ListNode l1)\r\n//    {\r\n//        if (l1.next == null) { return l1.val; }\r\n//        int result = 0;\r\n//        int counter = 0;\r\n//        while (l1.next != null)\r\n//        {\r\n//            int val = l1.val * (int)System.Math.Pow(10, counter);\r\n//            result \u002B= val;\r\n//            l1 = l1.next;\r\n//            counter\u002B\u002B;\r\n//        }\r\n//        result \u002B= l1.val * (int)System.Math.Pow(10, counter);\r\n//        return result;\r\n//    }\r\n\r\n//    public ListNode GetListFromInteger(int input)\r\n//    {\r\n//        System.Console.WriteLine(input);\r\n//        if (input / 10 == 0)\r\n//        {\r\n//            return new ListNode()\r\n//            {\r\n//                val = input,\r\n//                next = null\r\n//            };\r\n//        }\r\n//        int currentVal = input % 10;\r\n//        List\u003CListNode\u003E nodes = new();\r\n//        ListNode current = new ListNode()\r\n//        {\r\n//            val = currentVal\r\n//        };\r\n//        // how do I tell if next exists? \r\n//        if (input / 10 \u003E 0)\r\n//        {\r\n//            current.next = new()\r\n//            {\r\n//                val = input % 10\r\n//            };\r\n//            input = input / 10;\r\n//        }\r\n\r\n//        while (input / 10 \u003E 0)\r\n//        {\r\n//            ListNode current2 = new()\r\n//            {\r\n//                val = currentVal\r\n//            };\r\n//            input = input / 10;\r\n//            if (input == 0)\r\n//            {\r\n//                current2.next = null;\r\n//            }\r\n//            else\r\n//            {\r\n//                current2.next = new()\r\n//                {\r\n//                    val = input % 10\r\n//                };\r\n//            }\r\n//        }\r\n\r\n//        return current;\r\n//    }\r\n//}","tests":[{"id":"e15878d7-5704-96dd-6b7f-bd57f9326fb7","name":"tests.AddTwoNumbersTests.AddTwoNumbers_Freebie","location":{"start":{"line":5,"column":5},"end":{"line":10,"column":6}}},{"id":"23e03a53-0017-07f6-72fd-55079e9de174","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreSingleDigitAndZero","location":{"start":{"line":12,"column":5},"end":{"line":34,"column":6}}},{"id":"472f6290-03ca-cb4b-f166-88daaf59373f","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreSingleDigitAndOne","location":{"start":{"line":36,"column":5},"end":{"line":58,"column":6}}},{"id":"94799b30-e1b8-e921-cf82-428b42b36ee8","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreTwoDigits","location":{"start":{"line":62,"column":5},"end":{"line":100,"column":6}}},{"id":"fb6aed9b-ae74-0095-2e22-95b33d91aade","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreTwoDigits","location":{"start":{"line":62,"column":5},"end":{"line":100,"column":6}}},{"id":"75776572-871d-8e2a-c369-63d963043ab0","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreTwoDigits","location":{"start":{"line":62,"column":5},"end":{"line":100,"column":6}}},{"id":"0ca9ec7c-1835-24dc-fe52-b7048151b351","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreTwoDigits","location":{"start":{"line":62,"column":5},"end":{"line":100,"column":6}}},{"id":"0776aea3-cae9-fac6-4118-fd90ba8abc1b","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreTwoDigits","location":{"start":{"line":62,"column":5},"end":{"line":100,"column":6}}},{"id":"1932f8e6-7135-6ae7-86c7-4a898c069be7","name":"tests.AddTwoNumbersTests.AddTwoNumbers_ShouldReturnSumWhenBothInputsAreTwoDigits","location":{"start":{"line":62,"column":5},"end":{"line":100,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\BackoffExceptionTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class BackoffExceptionTests\r\n{\r\n    [Fact]\r\n    public async Task DoSomething()\r\n    {\r\n        BackoffException backoffException = new();\r\n        await backoffException.BackoffSelfinflictedException(\u0022name\u0022, 100);\r\n    }\r\n}\r\n","tests":[{"id":"4164b518-4ff4-a370-fdfd-e725df9ed5c3","name":"tests.BackoffExceptionTests.DoSomething","location":{"start":{"line":5,"column":5},"end":{"line":10,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\BubbleSortTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class BubbleSortTests\r\n{\r\n    [Fact]\r\n    public void SortSingleElementSortedArray()\r\n    {\r\n        int[] input = [1];\r\n        int[] output = [1];\r\n        BubbleSort.SortIntegers(output);\r\n        Assert.Equal(output, input);\r\n    }\r\n    [Fact]\r\n    public void SortTwoElementSortedArray()\r\n    {\r\n        int[] input = [1, 2];\r\n        int[] output = [1, 2];\r\n        BubbleSort.SortIntegers(output);\r\n        Assert.Equal(output, input);\r\n    }\r\n    [Fact]\r\n    public void SortThreeElementSortedArray()\r\n    {\r\n        int[] input = [1, 2, 3];\r\n        int[] output = [1, 2, 3];\r\n        BubbleSort.SortIntegers(output);\r\n        Assert.Equal(input, output);\r\n    }\r\n    [Fact]\r\n    public void SortFourElementSortedArray()\r\n    {\r\n        int[] input = [1, 2, 3, 4];\r\n        int[] output = [1, 2, 3, 4];\r\n        BubbleSort.SortIntegers(output);\r\n        Assert.Equal(input, output);\r\n    }\r\n    [Fact]\r\n    public void SortThreeElementUnsortedArray()\r\n    {\r\n        int[] input = [3, 2, 1];\r\n        int[] output = [3, 2, 1];\r\n        int[] expectedOutput = [1, 2, 3];\r\n        BubbleSort.SortIntegers(output);\r\n        Assert.Equal(expectedOutput, output);\r\n    }\r\n\r\n    [Fact]\r\n    public void SortIntegers_ShouldSortArrayInAscendingOrder()\r\n    {\r\n        // Arrange\r\n        int[] input = [5, 3, 1, 4, 2];\r\n        int[] expected = [1, 2, 3, 4, 5];\r\n\r\n        // Act\r\n        BubbleSort.SortIntegers(input);\r\n\r\n        // Assert\r\n        input.Should().Equal(expected);\r\n    }\r\n\r\n    [Fact]\r\n    public void SortIntegers_ShouldNotChangeAlreadySortedArray()\r\n    {\r\n        // Arrange\r\n        int[] input = [1, 2, 3, 4, 5];\r\n        int[] expected = [1, 2, 3, 4, 5];\r\n\r\n        // Act\r\n        BubbleSort.SortIntegers(input);\r\n\r\n        // Assert\r\n        input.Should().Equal(expected);\r\n    }\r\n\r\n    [Fact]\r\n    public void SortIntegers_ShouldNotChangeArrayWithSameElements()\r\n    {\r\n        // Arrange\r\n        int[] input = [1, 1, 1, 1];\r\n        int[] expected = [1, 1, 1, 1];\r\n\r\n        // Act\r\n        BubbleSort.SortIntegers(input);\r\n\r\n        // Assert\r\n        input.Should().Equal(expected);\r\n    }\r\n}","tests":[{"id":"b0ccf2ae-631f-fff2-1875-809f04ffca3d","name":"tests.BubbleSortTests.SortSingleElementSortedArray","location":{"start":{"line":5,"column":5},"end":{"line":12,"column":6}}},{"id":"2f7f110c-0ab0-65ba-76c2-83f89ae13e44","name":"tests.BubbleSortTests.SortTwoElementSortedArray","location":{"start":{"line":13,"column":5},"end":{"line":20,"column":6}}},{"id":"5f445bed-e608-58ea-1e53-9469716a7956","name":"tests.BubbleSortTests.SortThreeElementSortedArray","location":{"start":{"line":21,"column":5},"end":{"line":28,"column":6}}},{"id":"b74b1831-3ca4-6aea-9eda-92df66068c43","name":"tests.BubbleSortTests.SortFourElementSortedArray","location":{"start":{"line":29,"column":5},"end":{"line":36,"column":6}}},{"id":"31b4d58c-a32c-2fc1-7dba-f960babab4a6","name":"tests.BubbleSortTests.SortThreeElementUnsortedArray","location":{"start":{"line":37,"column":5},"end":{"line":45,"column":6}}},{"id":"24f97083-4b32-3720-73b8-5c41b97e34e3","name":"tests.BubbleSortTests.SortIntegers_ShouldSortArrayInAscendingOrder","location":{"start":{"line":47,"column":5},"end":{"line":59,"column":6}}},{"id":"0445ba7d-9c9b-6249-9493-366b675a25cc","name":"tests.BubbleSortTests.SortIntegers_ShouldNotChangeAlreadySortedArray","location":{"start":{"line":61,"column":5},"end":{"line":73,"column":6}}},{"id":"ad000939-c7ba-db09-e932-6430490ce7f2","name":"tests.BubbleSortTests.SortIntegers_ShouldNotChangeArrayWithSameElements","location":{"start":{"line":75,"column":5},"end":{"line":87,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\FindClosestNumberToZeroTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class FindClosestNumberToZeroTests\r\n{\r\n    private readonly ILogger\u003CFindClosestNumberToZero\u003E _logger;\r\n    public FindClosestNumberToZeroTests() =\u003E _logger = Substitute.For\u003CILogger\u003CFindClosestNumberToZero\u003E\u003E();\r\n\r\n    [Fact]\r\n    public void FindClosestNumber_ShouldReturn1()\r\n    {\r\n        // arrange\r\n        int[] nums = [-4, -2, 1, 4, 8];\r\n        int expected = 1;\r\n\r\n        // act \r\n        var find = new FindClosestNumberToZero(_logger);\r\n        int actual = find.FindClosestNumber(nums);\r\n\r\n        // assert \r\n        actual.Should().Be(expected);\r\n    }\r\n\r\n    [Fact]\r\n    public void FindClosestNumber_ShouldReturnNegative100000()\r\n    {\r\n        // arrange\r\n        int[] nums = [-100000, -100000];\r\n        int expected = -100000;\r\n\r\n        // act \r\n        var find = new FindClosestNumberToZero(_logger);\r\n        int actual = find.FindClosestNumber(nums);\r\n\r\n        // assert \r\n        actual.Should().Be(expected);\r\n    }\r\n}\r\n","tests":[{"id":"00f87bd1-1649-33e3-f107-48281fc7d965","name":"tests.FindClosestNumberToZeroTests.FindClosestNumber_ShouldReturn1","location":{"start":{"line":8,"column":5},"end":{"line":21,"column":6}}},{"id":"08664a02-2de9-843b-988b-f838ed870ff1","name":"tests.FindClosestNumberToZeroTests.FindClosestNumber_ShouldReturnNegative100000","location":{"start":{"line":23,"column":5},"end":{"line":36,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MergeSortedArrayTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class MergeSortedArrayTests\r\n{\r\n    private readonly ILogger\u003CMergeSortedArray\u003E _logger;\r\n    public MergeSortedArrayTests() =\u003E _logger = Substitute.For\u003CILogger\u003CMergeSortedArray\u003E\u003E();\r\n    [Fact]\r\n    public void Merge_ShouldReturn1()\r\n    {\r\n        int[] nums1 = [1, 2, 3, 0, 0, 0]; // Corrected initialization\r\n        int m = 3;\r\n        int[] nums2 = [2, 5, 6]; // Corrected initialization\r\n        int n = 3;\r\n        MergeSortedArray mergeSortedArray = new(_logger);\r\n        mergeSortedArray.Merge(nums1, m, nums2, n);\r\n\r\n        nums1.Should().BeEquivalentTo(new[] { 1, 2, 2, 3, 5, 6 }); // Corrected initialization\r\n    }\r\n\r\n    [Fact]\r\n    public void Merge_ShouldReturn2()\r\n    {\r\n        int[] nums1 = [1]; // Corrected initialization\r\n        int m = 1;\r\n        int[] nums2 = []; // Corrected initialization (empty array)\r\n        int n = 0;\r\n        MergeSortedArray mergeSortedArray = new(_logger);\r\n        mergeSortedArray.Merge(nums1, m, nums2, n);\r\n\r\n        nums1.Should().BeEquivalentTo(new[] { 1 }); // Corrected initialization\r\n    }\r\n\r\n    [Fact]\r\n    public void Merge_ShouldReturn3()\r\n    {\r\n        int[] nums1 = [0]; // Corrected initialization\r\n        int m = 0; // Set m to 0 since there are no valid elements in nums1\r\n        int[] nums2 = [1]; // Corrected initialization\r\n        int n = 1; // n is 1 since nums2 has one element\r\n        MergeSortedArray mergeSortedArray = new(_logger);\r\n        mergeSortedArray.Merge(nums1, m, nums2, n);\r\n\r\n        nums1.Should().BeEquivalentTo(new[] { 1 }); // Corrected initialization\r\n    }\r\n\r\n    [Fact]\r\n    public void Merge_ShouldReturn_kus()\r\n    {\r\n        int[] nums1 = [10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n        int m = 46;\r\n        int[] nums2 = [11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99];\r\n        int n = 45;\r\n        MergeSortedArray mergeSortedArray = new(_logger);\r\n        mergeSortedArray.Merge(nums1, m, nums2, n);\r\n\r\n        nums1.Should().BeEquivalentTo(new[] { 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100 });\r\n    }\r\n\r\n    [Fact]\r\n    public void Merge_ShouldReturn_kus1()\r\n    {\r\n        int[] nums1 = [1, 2, 3, 0, 0, 0]; // Corrected initialization\r\n        int m = 3;\r\n        int[] nums2 = [5, 6, 99999]; // Corrected initialization\r\n        int n = 3;\r\n        MergeSortedArray mergeSortedArray = new(_logger);\r\n        mergeSortedArray.Merge(nums1, m, nums2, n);\r\n\r\n        nums1.Should().BeEquivalentTo(new[] { 1, 2, 3, 5, 6, 99999 }); // Corrected initialization\r\n    }\r\n\r\n}\r\n","tests":[{"id":"65258f36-dae1-2bd4-ca8d-823307b8109d","name":"tests.MergeSortedArrayTests.Merge_ShouldReturn1","location":{"start":{"line":7,"column":5},"end":{"line":18,"column":6}}},{"id":"c32bd78b-8e90-4f79-468b-5e408e2b8bf7","name":"tests.MergeSortedArrayTests.Merge_ShouldReturn2","location":{"start":{"line":20,"column":5},"end":{"line":31,"column":6}}},{"id":"a8841f0a-642e-cb55-601f-458db6aa9468","name":"tests.MergeSortedArrayTests.Merge_ShouldReturn3","location":{"start":{"line":33,"column":5},"end":{"line":44,"column":6}}},{"id":"a5391852-baf0-703a-959a-cf95d9487d89","name":"tests.MergeSortedArrayTests.Merge_ShouldReturn_kus","location":{"start":{"line":46,"column":5},"end":{"line":57,"column":6}}},{"id":"49d20908-252b-4f99-9619-406943f860eb","name":"tests.MergeSortedArrayTests.Merge_ShouldReturn_kus1","location":{"start":{"line":59,"column":5},"end":{"line":70,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MergeSortTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class MergeSortTests\r\n{\r\n    [Fact]\r\n    public void SortSingleElementSortedArray()\r\n    {\r\n        int[] input = [1];\r\n        int[] output = [1];\r\n        MergeSort.SortIntegers(output);\r\n        Assert.Equal(output, input);\r\n    }\r\n    [Fact]\r\n    public void SortTwoElementSortedArray()\r\n    {\r\n        int[] input = [1, 2];\r\n        int[] output = [1, 2];\r\n        MergeSort.SortIntegers(output);\r\n        Assert.Equal(output, input);\r\n    }\r\n    [Fact]\r\n    public void SortThreeElementSortedArray()\r\n    {\r\n        int[] input = [1, 2, 3];\r\n        int[] output = [1, 2, 3];\r\n        MergeSort.SortIntegers(output);\r\n        Assert.Equal(input, output);\r\n    }\r\n    [Fact]\r\n    public void SortFourElementSortedArray()\r\n    {\r\n        int[] input = [1, 2, 3, 4];\r\n        int[] output = [1, 2, 3, 4];\r\n        MergeSort.SortIntegers(output);\r\n        Assert.Equal(input, output);\r\n    }\r\n    [Fact]\r\n    public void SortThreeElementUnsortedArray()\r\n    {\r\n        int[] input = [3, 2, 1];\r\n        int[] output = [3, 2, 1];\r\n        int[] expectedOutput = [1, 2, 3];\r\n        MergeSort.SortIntegers(output);\r\n        Assert.Equal(expectedOutput, output);\r\n    }\r\n}","tests":[{"id":"3f698c7d-1231-8968-bf3f-81eebe657c3c","name":"tests.MergeSortTests.SortSingleElementSortedArray","location":{"start":{"line":5,"column":5},"end":{"line":12,"column":6}}},{"id":"30cac124-777d-663a-1fe1-44f61ccd7397","name":"tests.MergeSortTests.SortTwoElementSortedArray","location":{"start":{"line":13,"column":5},"end":{"line":20,"column":6}}},{"id":"6eff1893-fd79-6b68-0302-cf3ce50aa55b","name":"tests.MergeSortTests.SortThreeElementSortedArray","location":{"start":{"line":21,"column":5},"end":{"line":28,"column":6}}},{"id":"213f226b-7b73-f726-6a9e-fdd1787d3d19","name":"tests.MergeSortTests.SortFourElementSortedArray","location":{"start":{"line":29,"column":5},"end":{"line":36,"column":6}}},{"id":"82925366-6b7b-0319-625c-804cb9f2eb1c","name":"tests.MergeSortTests.SortThreeElementUnsortedArray","location":{"start":{"line":37,"column":5},"end":{"line":45,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MergeStringsAlternatelyTests.cs":{"language":"cs","source":"namespace tests;\r\npublic class MergeStringsAlternatelyTests\r\n{\r\n    private readonly ILogger\u003CMergeStringsAlternately\u003E _logger;\r\n    public MergeStringsAlternatelyTests() =\u003E _logger = Substitute.For\u003CILogger\u003CMergeStringsAlternately\u003E\u003E();\r\n    [Fact]\r\n    public void MergeAlternately_ShouldReturn1()\r\n    {\r\n        // arrange \r\n        string word1 = \u0022abcd\u0022;\r\n        string word2 = \u0022pq\u0022;\r\n        string expected = \u0022apbqcd\u0022;\r\n\r\n        // act \r\n        MergeStringsAlternately mergeStringsAlternately = new(_logger);\r\n        string actual = mergeStringsAlternately.MergeAlternately(word1, word2);\r\n\r\n        actual.Should().BeEquivalentTo(expected);\r\n    }\r\n}\r\n\r\n//You are given two strings word1 and word2.Merge the strings by adding letters in alternating order, starting with word1.If a string is longer than the other, append the additional letters onto the end of the merged string.\r\n\r\n//Return the merged string.\r\n\r\n\r\n\r\n\r\n//Example 1:\r\n\r\n//Input: word1 = \u0022abc\u0022, word2 = \u0022pqr\u0022\r\n//Output: \u0022apbqcr\u0022\r\n//Explanation: The merged string will be merged as so:\r\n//word1:  a b   c\r\n//word2:    p q   r\r\n//merged: a p b q c r\r\n\r\n//Example 2:\r\n\r\n//Input: word1 = \u0022ab\u0022, word2 = \u0022pqrs\u0022\r\n//Output: \u0022apbqrs\u0022\r\n//Explanation: Notice that as word2 is longer, \u0022rs\u0022 is appended to the end.\r\n//word1:  a b\r\n//word2:    p q   r s\r\n//merged: a p b q   r s\r\n\r\n//Example 3:\r\n\r\n//Input: word1 = \u0022abcd\u0022, word2 = \u0022pq\u0022\r\n//Output: \u0022apbqcd\u0022\r\n//Explanation: Notice that as word1 is longer, \u0022cd\u0022 is appended to the end.\r\n//word1:  a b   c d\r\n//word2:    p q\r\n//merged: a p b q c d\r\n\r\n\r\n\r\n\r\n//Constraints:\r\n\r\n//    1 \u003C= word1.length, word2.length \u003C= 100\r\n//    word1 and word2 consist of lowercase English letters.\r\n","tests":[{"id":"23f50c61-e421-773f-d87b-7c29592a1a35","name":"tests.MergeStringsAlternatelyTests.MergeAlternately_ShouldReturn1","location":{"start":{"line":6,"column":5},"end":{"line":19,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MinimumCoinTests.cs":{"language":"cs","source":"using System.Collections.Generic;\r\n\r\nnamespace tests;\r\n\r\npublic class MinimumCoinTests\r\n{\r\n    private MinimumCoin minimumCoin;\r\n    public MinimumCoinTests()\r\n    {\r\n        List\u003Cint\u003E coinValues = [1, 5, 10, 25];\r\n        minimumCoin = new MinimumCoin(CoinSet: coinValues, RepeatFactor: 5);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(2, 2, 4)]\r\n    [InlineData(1, 2, 3)]\r\n    [InlineData(0, 2, 2)]\r\n    [InlineData(2, 0, 2)]\r\n    [InlineData(9, 5, 14)]\r\n    [InlineData(24, 24, 48)]\r\n    public void Freebie(int firstNumber, int secondNumber, int expectedSum)\r\n    {\r\n        // Arrange, Act\r\n        int actualSum = firstNumber \u002B secondNumber;\r\n\r\n        // Assert \r\n        _ = actualSum.Should().Be(expectedSum, $\u0022because {firstNumber} \u002B {secondNumber} is {expectedSum}\u0022, new List\u003Cint\u003E[firstNumber, secondNumber, actualSum]);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(0)]\r\n    [InlineData(1)]\r\n    public void GetTrivialCase(int input)\r\n    {\r\n        Assert.Equal(input, minimumCoin.GetCount(input));\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCaseOfTwoCoins()\r\n    {\r\n        if (minimumCoin.CoinSet.Count \u003E 1 \u0026\u0026 !minimumCoin.CoinSet.Contains(minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1]))\r\n        {\r\n            int total = minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1];\r\n            int actual = minimumCoin.GetCount(total);\r\n            Assert.Equal(2, actual);\r\n        }\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCaseOfFourCoins()\r\n    {\r\n        int total = minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1] \u002B minimumCoin.CoinSet[2] \u002B minimumCoin.CoinSet[3];\r\n        if (minimumCoin.CoinSet.Count \u003E 1 \u0026\u0026 !minimumCoin.CoinSet.Contains(total))\r\n        {\r\n            ;\r\n            int actual = minimumCoin.GetCount(total);\r\n            Assert.Equal(4, actual);\r\n        }\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCaseOfEightCoins()\r\n    {\r\n        int total = minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1] \u002B minimumCoin.CoinSet[2] \u002B minimumCoin.CoinSet[3] \u002B minimumCoin.CoinSet[0] \u002B minimumCoin.CoinSet[1] \u002B minimumCoin.CoinSet[2] \u002B minimumCoin.CoinSet[3];\r\n        if (minimumCoin.CoinSet.Count \u003E 1 \u0026\u0026 !minimumCoin.CoinSet.Contains(total))\r\n        {\r\n            ;\r\n            int actual = minimumCoin.GetCount(total);\r\n            Assert.True(6 \u003E= actual);\r\n        }\r\n    }\r\n\r\n    [Fact]\r\n    public void GetFreqLabsTwoCoins()\r\n    {\r\n        List\u003Cint\u003E coinValues = [1, 120, 200];\r\n        minimumCoin = new MinimumCoin(CoinSet: coinValues, RepeatFactor: 6);\r\n        Assert.Equal(2, minimumCoin.GetCount(240));\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCount_ShouldReturnCorrectCount()\r\n    {\r\n        // Arrange\r\n        List\u003Cint\u003E coinSet = [1, 2, 5];\r\n        int repeatFactor = 3;\r\n        MinimumCoin minimumCoin = new(coinSet, repeatFactor);\r\n        int total = 11;\r\n        int expectedCount = 3; // 5 \u002B 5 \u002B 1\r\n\r\n        // Act\r\n        int count = minimumCoin.GetCount(total);\r\n\r\n        // Assert\r\n        count.Should().Be(expectedCount);\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCount_ShouldReturnZeroWhenTotalIsLessThanMinimumCoin()\r\n    {\r\n        // Arrange\r\n        List\u003Cint\u003E coinSet = [2, 3, 5];\r\n        int repeatFactor = 3;\r\n        MinimumCoin minimumCoin = new(coinSet, repeatFactor);\r\n        int total = 1;\r\n        int expectedCount = 0;\r\n\r\n        // Act\r\n        int count = minimumCoin.GetCount(total);\r\n\r\n        // Assert\r\n        count.Should().Be(expectedCount);\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCount_ShouldReturnOneWhenTotalIsInCoinSet()\r\n    {\r\n        // Arrange\r\n        List\u003Cint\u003E coinSet = [1, 2, 5];\r\n        int repeatFactor = 3;\r\n        MinimumCoin minimumCoin = new(coinSet, repeatFactor);\r\n        int total = 5;\r\n        int expectedCount = 1;\r\n\r\n        // Act\r\n        int count = minimumCoin.GetCount(total);\r\n\r\n        // Assert\r\n        count.Should().Be(expectedCount);\r\n    }\r\n}\r\n","tests":[{"id":"36345787-5abe-0ee4-2a25-0106b79db70f","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":14,"column":5},"end":{"line":28,"column":6}}},{"id":"f554cc68-03cb-8eaa-92d6-63e3722d7a5f","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":14,"column":5},"end":{"line":28,"column":6}}},{"id":"0adbef77-4d7b-89a9-4088-3bece7318510","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":14,"column":5},"end":{"line":28,"column":6}}},{"id":"9617d13e-ef0f-1bf2-9620-0744a5355f32","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":14,"column":5},"end":{"line":28,"column":6}}},{"id":"a3542765-1651-7e83-e505-6b38650cf024","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":14,"column":5},"end":{"line":28,"column":6}}},{"id":"18ee56c6-e9d7-1e7c-5117-6c248328801f","name":"tests.MinimumCoinTests.Freebie","location":{"start":{"line":14,"column":5},"end":{"line":28,"column":6}}},{"id":"3aa8fa23-3780-9b2b-35e0-6cff6fc19f04","name":"tests.MinimumCoinTests.GetTrivialCase","location":{"start":{"line":30,"column":5},"end":{"line":36,"column":6}}},{"id":"fd28fb8a-d8e7-d00a-442f-d2a83ac391bd","name":"tests.MinimumCoinTests.GetTrivialCase","location":{"start":{"line":30,"column":5},"end":{"line":36,"column":6}}},{"id":"7b12073b-4caf-0278-4223-253feac2f41f","name":"tests.MinimumCoinTests.GetCaseOfTwoCoins","location":{"start":{"line":38,"column":5},"end":{"line":47,"column":6}}},{"id":"a7b83bdd-5dd9-2392-f6fd-25d15a221026","name":"tests.MinimumCoinTests.GetCaseOfFourCoins","location":{"start":{"line":49,"column":5},"end":{"line":59,"column":6}}},{"id":"ff512f6b-7694-53ee-c9b9-ca025b3c2cd5","name":"tests.MinimumCoinTests.GetCaseOfEightCoins","location":{"start":{"line":61,"column":5},"end":{"line":71,"column":6}}},{"id":"2c593edd-2d3d-d18c-ecb1-e41bec15525f","name":"tests.MinimumCoinTests.GetFreqLabsTwoCoins","location":{"start":{"line":73,"column":5},"end":{"line":79,"column":6}}},{"id":"45e9a9b2-32f3-bde7-9a8f-8043ea479b17","name":"tests.MinimumCoinTests.GetCount_ShouldReturnCorrectCount","location":{"start":{"line":81,"column":5},"end":{"line":96,"column":6}}},{"id":"d304da0c-22d4-5b7f-329f-7295d2a66fe5","name":"tests.MinimumCoinTests.GetCount_ShouldReturnZeroWhenTotalIsLessThanMinimumCoin","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"b17f6b79-d0e0-c498-959d-505212340f53","name":"tests.MinimumCoinTests.GetCount_ShouldReturnOneWhenTotalIsInCoinSet","location":{"start":{"line":115,"column":5},"end":{"line":130,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MyCleanerTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class MyCleanerTests\r\n{\r\n    private readonly ILogger\u003CMyCleaner\u003E _logger;\r\n    private readonly HttpClient _httpClient;\r\n    private readonly MyCleaner _myCleaner;\r\n\r\n    public MyCleanerTests()\r\n    {\r\n        _logger = Substitute.For\u003CILogger\u003CMyCleaner\u003E\u003E();\r\n        _httpClient = new HttpClient(new HttpClientHandler { AllowAutoRedirect = true });\r\n        _myCleaner = new MyCleaner(_logger, _httpClient);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(\u0022\u0022, \u0022\u0022)]\r\n    [InlineData(\u0022           \u0022, \u0022\u0022)]\r\n    public async Task CleanUrl_ShouldReturnEmptyStringForEmptyInput(string input, string expectedOutput)\r\n    {\r\n        // Act \r\n        string actual = await _myCleaner.CleanUrlAsync(input);\r\n        actual.Should().Be(expectedOutput);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(\u0022https://www.ojrq.net/p/?return=https%3A%2F%2Felgato.sjv.io%2Fc%2F1378764%2F1064223%2F13666%3Fu%3Dhttps%253A%252F%252Fwww.elgato.com%252Fus%252Fen%252Fp%252Ffacecam-neo%26svlink%3D10538211%26level%3D1\u0026cid=13666\u0026tpsync=yes\u0026auth=5781a01fa17f6b33\u0022, \u0022https://www.elgato.com/us/en/p/facecam-neo\u0022)]\r\n    [InlineData(\u0022https://www.tkqlhce.com/click-4485850-13112209?sid=e4e977b23d4c11ef8314763100633dd80INT\u0026url=https%3A%2F%2Fcomputers.woot.com%2Foffers%2Flogitech-g920-driving-force-racing-wheel-and-floor-pedals-3\u0022, \u0022https://computers.woot.com/offers/logitech-g920-driving-force-racing-wheel-and-floor-pedals-3\u0022)]\r\n    [InlineData(\u0022https://goto.walmart.com/c/2189989/612734/9383?subid1=def01ed63d4e11efb8829a5345c674ba0INT\u0026sourceid=imp_000011112222333344\u0026u=https%3A%2F%2Fwww.walmart.com%2Fplus\u0022, \u0022https://www.walmart.com/plus\u0022)]\r\n    [InlineData(\u0022https://goto.walmart.com/c/2189989/612734/9383?subid1=39da70663d5011ef85e9ea7718e137e00INT\u0026sourceid=imp_000011112222333344\u0026u=https%3A%2F%2Fwww.walmart.com%2Fip%2FSwiss-Tech-Drop-Bottom-Travel-Weekender-Duffel-Olive-Black%2F948430794\u0022, \u0022https://www.walmart.com/ip/Swiss-Tech-Drop-Bottom-Travel-Weekender-Duffel-Olive-Black/948430794\u0022)]\r\n    [InlineData(\u0022https://costway.pxf.io/c/10451/1450865/17220?subid1=04bb92ca3d5011ef91bd7a43b62703820INT\u0026u=https%3A%2F%2Fwww.costway.com%2F12000-btu-22-seer2-208-230v-wifi-enabled-mini-split-air-conditioner-and-heater-white.html\u0022, \u0022https://www.costway.com/12000-btu-22-seer2-208-230v-wifi-enabled-mini-split-air-conditioner-and-heater-white.html\u0022)]\r\n    [InlineData(\u0022https://goto.target.com/c/10451/1216445/2092?subid1=afb43d763d5011efacb87ae1da200b850INT\u0026u=https%3A%2F%2Fwww.target.com%2Fp%2Ffae-farm-nintendo-switch-digital%2F-%2FA-89638075\u0022, \u0022https://www.target.com/p/fae-farm-nintendo-switch-digital/-/A-89638075\u0022)]\r\n    [InlineData(\u0022https://slickdeals.net/?adobeRef=d92c693a3d5011efb40f5e3ace1557e10001\u0026sdtrk=frontpage_recombee\u0026prop=diavail-false%7Cdincp-0%7Cdinpd-0%7Cdipgavail-false%7Crcmid=4d911dbd885c9d4514957dfd7e40cdbf\u0026afsrc=1\u0026trd=Get%20Deal%20at%20Amazon\u0026sdtid=17605128\u0026tid=17605128\u0026pno=972987\u0026pv=d934885e3d5011efb40f5e3ace1557e1\u0026au=880a0f2cfe1c4f9cab597d823947a3de\u0022, \u0022https://www.amazon.com/gp/product/B0B5M5YB9G/\u0022)]\r\n    [InlineData(\u0022https://slickdeals.net/?adobeRef=3600a9663d6311efbcdebafcfc5720790000\u0026sdtrk=jfy\u0026prop=diavail-false%7Cdincp-0%7Cdinpd-0%7Cdipgavail-false%7Crcmid-b410546529081f06acf4f98ecd492c65\u0026afsrc=1\u0026trd=Get%20Deal%20at%20Steam\u0026sdtid=17602899\u0026tid=17602899\u0026pv=36090a2a3d6311efbcdebafcfc572079\u0026au=880a0f2cfe1c4f9cab597d823947a3de\u0026attr_track=JFYCarousel%3APosition%3A4%7CJFYCarousel%3AType%3Athread\u0022, \u0022https://www.xbox.com/en-us/games/store/forza-horizon-4-1979-talbot-sunbeam-lotus/9nnm9m4t5j5q\u0022)]\r\n    [InlineData(\u0022https://goto.walmart.com/c/10451/567111/9383?subid1=bf60adae3df511efb3c85a85c909964f0INT\u0026veh=aff\u0026sourceid=imp_000011112222333344\u0026u=https%3A%2F%2Fwww.walmart.com%2Fip%2FHisense-75-Class-U7-Series-Mini-LED-ULED-4K-UHD-Google-Smart-TV-75U7K-QLED-Native-144Hz-1000-Nit-Dolby-Vision-IQ-Full-Array-Local-Dimming-Game-Mode-P%2F1300394852\u0022, \u0022https://www.walmart.com/ip/Hisense-75-Class-U7-Series-Mini-LED-ULED-4K-UHD-Google-Smart-TV-75U7K-QLED-Native-144Hz-1000-Nit-Dolby-Vision-IQ-Full-Array-Local-Dimming-Game-Mode-P/1300394852\u0022)]\r\n    [InlineData(\u0022https://www.tkqlhce.com/click-4485850-13112209?sid=3243752a45be11ef9cb92a70558bfcd60INT\u0026url=https%3A%2F%2Fcomputers.woot.com%2Foffers%2Famazon-kindle-2019-release-sd-1%3Fref%3Dw_cnt_lnd_cat_pc_6_1\u0022, \u0022https://computers.woot.com/offers/amazon-kindle-2019-release-sd-1\u0022)]\r\n    [InlineData(\u0022https://go.redirectingat.com/?id=355X561\u0026test=off\u0026xcust=c3445bf4492211ef9b8e768b6c08171e0INT\u0026url=https%3A%2F%2Fwww.casio.com%2Fus%2Fwatches%2Fcasio%2Fproduct.A158WA-1%2F\u0022, \u0022https://www.casio.com/us/watches/casio/product.A158WA-1/\u0022)]\r\n    // [InlineData(\u0022https://www.dpbolvw.net/click-4485850-10921729?sid=7ff429f4543711ef9cfbe634ded148ee0INT\u0026url=%2Fasus-vivobook-15-15-6-laptop-1-4ghz-intel-core-5-120u-16gb-memory-512gb-ssd-windows-11-home-f1504vp-sb54%2Fproduct_24595128\u0022, \u0022/asus-vivobook-15-15-6-laptop-1-4ghz-intel-core-5-120u-16gb-memory-512gb-ssd-windows-11-home-f1504vp-sb54/product_24595128\u0022)]\r\n    public async Task CleanUrl_ShouldReturnValidOutput(string input, string expectedOutput)\r\n    {\r\n        // Act \r\n        string actual = await _myCleaner.CleanUrlAsync(input);\r\n        actual.Should().Be(expectedOutput);\r\n    }\r\n    // https://www.dpbolvw.net/click-4485850-10921729?sid=7ff429f4543711ef9cfbe634ded148ee0INT\u0026url=%2Fasus-vivobook-15-15-6-laptop-1-4ghz-intel-core-5-120u-16gb-memory-512gb-ssd-windows-11-home-f1504vp-sb54%2Fproduct_24595128\r\n    // https://cj.dotomi.com/2b74nmvuC/mty/BAJCBHCJ/EEIFIFA/A/A/A?v=n2sn%3DHppECJpEFEDHBBopJmploGDEnonBEIooASXd%2641v%3D%25CPk242-5s5ylyyu-BF-BF-G-vkz3yz-B-Eqr9-sx3ov-my1o-F-BCA4-BGql-wowy18-FBCql-22n-6sxny62-BB-rywo-pBFAE5z-2lFE%25CPz1yn4m3_CEFJFBCI%3c%3cr33z2%3A%2F%2F666.nzlyv56.xo3%2Fmvsmu-EEIFIFA-BAJCBHCJ%3c%3cQ%3c%3c%3cB%3cB%3cA%3cA%3c\r\n}\r\n","tests":[{"id":"93f0458c-f90d-7313-7946-0aba561ea516","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnEmptyStringForEmptyInput","location":{"start":{"line":16,"column":5},"end":{"line":24,"column":6}}},{"id":"4b6a5dd0-98cc-f37e-3e3f-388391cbed46","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnEmptyStringForEmptyInput","location":{"start":{"line":16,"column":5},"end":{"line":24,"column":6}}},{"id":"1effa24c-0840-bf43-a015-b14d77db8f74","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"e8525802-2125-3e78-b97b-7a5551dc920b","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"7f6977c8-d0dd-3766-6bfe-b9eb5ad9515e","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"e284ffa2-64d9-3f23-53e9-67e114c21547","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"885941d6-acab-38a0-f09d-4bdb2c8635b9","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"c277e603-9b5d-b4df-4b2d-b7625c409a0c","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"5b966820-3107-d7a8-1a9e-153bb5eb264f","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"cebaa722-7fc3-47c3-6a7a-6ea25d6c5335","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"c0391ff4-b8b6-27ed-436a-296ce9d6f52a","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"16fd1fea-9ded-ecbd-90a9-54df83cbe5be","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}},{"id":"07ecbbbd-912f-7e64-b54c-89a16509e0f0","name":"tests.MyCleanerTests.CleanUrl_ShouldReturnValidOutput","location":{"start":{"line":26,"column":5},"end":{"line":44,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MyReverseBinarySearchTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class MyReverseBinarySearchTests\r\n{\r\n    [Fact]\r\n    public void BinarySearchDoesNotExist()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesNotExistOdd()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist2()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd2()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist3()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd3()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4Twice()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 4, 5, 6];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4Twice()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 4, 5, 6, 7];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.ReverseBinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchExistsKhan()\r\n    {\r\n        int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\r\n        int result = MySearch.ReverseBinarySearchIntegers(primes, 73);\r\n        Assert.Equal(20, result);\r\n    }\r\n}","tests":[{"id":"ab328b6e-7c35-9ca2-62ac-ddc9ebe1c12f","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesNotExist","location":{"start":{"line":5,"column":5},"end":{"line":11,"column":6}}},{"id":"22d3e955-f5d7-570a-db78-603e2def3d23","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesNotExistOdd","location":{"start":{"line":12,"column":5},"end":{"line":18,"column":6}}},{"id":"db4f3a93-b6de-53f9-1103-3efa90090697","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist","location":{"start":{"line":19,"column":5},"end":{"line":25,"column":6}}},{"id":"3f955e28-0bb7-fc0d-1447-b7d272cedeba","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd","location":{"start":{"line":26,"column":5},"end":{"line":32,"column":6}}},{"id":"17113666-da63-5ab3-a75b-e0cf4167fb8e","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist2","location":{"start":{"line":33,"column":5},"end":{"line":39,"column":6}}},{"id":"6c01b839-96f5-011f-f967-992d8632f626","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd2","location":{"start":{"line":40,"column":5},"end":{"line":46,"column":6}}},{"id":"bbdefb79-028f-be2b-05a7-ef4ea8be416f","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist3","location":{"start":{"line":47,"column":5},"end":{"line":53,"column":6}}},{"id":"2cf9d6d5-67a8-dce4-c2ad-40b50a41bf73","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd3","location":{"start":{"line":54,"column":5},"end":{"line":60,"column":6}}},{"id":"bb3e6de6-ec9f-19f5-2cee-430dfa54440c","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist4","location":{"start":{"line":61,"column":5},"end":{"line":67,"column":6}}},{"id":"837b18cf-2ffe-5b57-a17e-70344288cfc1","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd4","location":{"start":{"line":68,"column":5},"end":{"line":74,"column":6}}},{"id":"6ef2944e-9d8d-6b74-d27d-95bb0a893b14","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExist4Twice","location":{"start":{"line":75,"column":5},"end":{"line":81,"column":6}}},{"id":"9b442e8f-d064-71df-a253-e2f688be89be","name":"tests.MyReverseBinarySearchTests.BinarySearchDoesExistOdd4Twice","location":{"start":{"line":82,"column":5},"end":{"line":88,"column":6}}},{"id":"54126116-86fa-4260-3817-8332d0a799f6","name":"tests.MyReverseBinarySearchTests.BinarySearchExistsKhan","location":{"start":{"line":89,"column":5},"end":{"line":95,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\MySearchTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class MySearchTests\r\n{\r\n    [Fact]\r\n    public void LinearSearchTestDoesNotExist()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 9;\r\n        Assert.False(MySearch.LinearSearchIntegers(arrayToSearch, queryItem));\r\n    }\r\n    [Fact]\r\n    public void LinearSearchTestDoesExist()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.LinearSearchIntegers(arrayToSearch, queryItem));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesNotExist()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesNotExistOdd()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 9;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(-1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 1;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(0));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist2()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd2()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 2;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(1));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist3()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd3()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 3;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(2));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 5, 6, 7];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExist4Twice()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 4, 5, 6];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchDoesExistOdd4Twice()\r\n    {\r\n        int[] arrayToSearch = [1, 2, 3, 4, 4, 5, 6, 7];\r\n        int queryItem = 4;\r\n        Assert.True(MySearch.BinarySearchIntegers(arrayToSearch, queryItem).Equals(3));\r\n    }\r\n    [Fact]\r\n    public void BinarySearchExistsKhan()\r\n    {\r\n        int[] primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\r\n        int result = MySearch.BinarySearchIntegers(primes, 73);\r\n        Assert.Equal(20, result);\r\n    }\r\n}","tests":[{"id":"502c844e-261a-7cd0-9579-e4b580c23444","name":"tests.MySearchTests.LinearSearchTestDoesNotExist","location":{"start":{"line":5,"column":5},"end":{"line":11,"column":6}}},{"id":"26ae7b32-529d-b07a-f504-48dd302a8491","name":"tests.MySearchTests.LinearSearchTestDoesExist","location":{"start":{"line":12,"column":5},"end":{"line":18,"column":6}}},{"id":"7191c288-1d1b-359b-35d8-15911f29bb34","name":"tests.MySearchTests.BinarySearchDoesNotExist","location":{"start":{"line":19,"column":5},"end":{"line":25,"column":6}}},{"id":"3df404e0-c303-ce1a-90ba-d39c35bd1189","name":"tests.MySearchTests.BinarySearchDoesNotExistOdd","location":{"start":{"line":26,"column":5},"end":{"line":32,"column":6}}},{"id":"b9f67719-a803-f62e-9d59-ba43955028d8","name":"tests.MySearchTests.BinarySearchDoesExist","location":{"start":{"line":33,"column":5},"end":{"line":39,"column":6}}},{"id":"253c806f-2044-9dd3-fd26-dec5e8a56d29","name":"tests.MySearchTests.BinarySearchDoesExistOdd","location":{"start":{"line":40,"column":5},"end":{"line":46,"column":6}}},{"id":"73c3cbec-da95-5aed-833b-724cb0744820","name":"tests.MySearchTests.BinarySearchDoesExist2","location":{"start":{"line":47,"column":5},"end":{"line":53,"column":6}}},{"id":"f784e7c8-0af3-f319-779d-1a5cf328ce28","name":"tests.MySearchTests.BinarySearchDoesExistOdd2","location":{"start":{"line":54,"column":5},"end":{"line":60,"column":6}}},{"id":"6dedaf10-effa-2c3c-c774-db46b1a1a1ce","name":"tests.MySearchTests.BinarySearchDoesExist3","location":{"start":{"line":61,"column":5},"end":{"line":67,"column":6}}},{"id":"3c4f43bb-d883-884e-2619-ec62fcb59835","name":"tests.MySearchTests.BinarySearchDoesExistOdd3","location":{"start":{"line":68,"column":5},"end":{"line":74,"column":6}}},{"id":"5428c202-02ec-cdcb-0412-0edb0492d23f","name":"tests.MySearchTests.BinarySearchDoesExist4","location":{"start":{"line":75,"column":5},"end":{"line":81,"column":6}}},{"id":"51dd6172-85c2-5fdf-0907-cf19cd1714dd","name":"tests.MySearchTests.BinarySearchDoesExistOdd4","location":{"start":{"line":82,"column":5},"end":{"line":88,"column":6}}},{"id":"1347e4b5-77ff-ee53-efc0-51cdbe6a9be7","name":"tests.MySearchTests.BinarySearchDoesExist4Twice","location":{"start":{"line":89,"column":5},"end":{"line":95,"column":6}}},{"id":"4d0235b6-972b-2b6c-4a72-b2b320eb26f4","name":"tests.MySearchTests.BinarySearchDoesExistOdd4Twice","location":{"start":{"line":96,"column":5},"end":{"line":102,"column":6}}},{"id":"5507614f-2e67-d4ee-b0bd-b1a022f939fe","name":"tests.MySearchTests.BinarySearchExistsKhan","location":{"start":{"line":103,"column":5},"end":{"line":109,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\PascalTriangleTests.cs":{"language":"cs","source":"using System.Collections.Generic;\r\n\r\nnamespace tests;\r\npublic class PascalsTriangleTests\r\n{\r\n    [Fact]\r\n    public void GeneratePascalsTriangle_WithZeroRows_ReturnsEmptyList()\r\n    {\r\n        List\u003CList\u003Cint\u003E\u003E result = PascalTriangle.GeneratePascalsTriangle(0);\r\n        Assert.Empty(result);\r\n    }\r\n\r\n    [Fact]\r\n    public void GeneratePascalsTriangle_WithOneRow_ReturnsCorrectTriangle()\r\n    {\r\n        List\u003CList\u003Cint\u003E\u003E expected = [new List\u003Cint\u003E { 1 }];\r\n        List\u003CList\u003Cint\u003E\u003E result = PascalTriangle.GeneratePascalsTriangle(1);\r\n        Assert.Equal(expected, result);\r\n    }\r\n\r\n    [Fact]\r\n    public void GeneratePascalsTriangle_WithFiveRows_ReturnsCorrectTriangle()\r\n    {\r\n        List\u003CList\u003Cint\u003E\u003E expected =\r\n        [\r\n            new List\u003Cint\u003E { 1 },\r\n            new List\u003Cint\u003E { 1, 1 },\r\n            new List\u003Cint\u003E { 1, 2, 1 },\r\n            new List\u003Cint\u003E { 1, 3, 3, 1 },\r\n            new List\u003Cint\u003E { 1, 4, 6, 4, 1 }\r\n        ];\r\n        List\u003CList\u003Cint\u003E\u003E result = PascalTriangle.GeneratePascalsTriangle(5);\r\n        Assert.Equal(expected, result);\r\n    }\r\n}\r\n","tests":[{"id":"054241b3-70fd-2be8-807f-bf1a1d1181ed","name":"tests.PascalsTriangleTests.GeneratePascalsTriangle_WithZeroRows_ReturnsEmptyList","location":{"start":{"line":6,"column":5},"end":{"line":11,"column":6}}},{"id":"ba42db9c-1627-ecb1-da73-e9a837cb162e","name":"tests.PascalsTriangleTests.GeneratePascalsTriangle_WithOneRow_ReturnsCorrectTriangle","location":{"start":{"line":13,"column":5},"end":{"line":19,"column":6}}},{"id":"52814b59-92b9-7896-d9ce-b15ef9e61d50","name":"tests.PascalsTriangleTests.GeneratePascalsTriangle_WithFiveRows_ReturnsCorrectTriangle","location":{"start":{"line":21,"column":5},"end":{"line":34,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\PersonTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class PersonTests\r\n{\r\n    [Fact]\r\n    public void CreatePersonWithName_ShouldSucceed_WhenPasswordMatchesMinimumLength()\r\n    {\r\n        int MINIMUM_PASSWORD_LENGTH = 8;\r\n        Person person = PersonFactory.Create(\u0022\u0022, new string(\u0027X\u0027, MINIMUM_PASSWORD_LENGTH));\r\n        person.Name.Should().Be(\u0022\u0022);\r\n        person.CreatedBy.Should().Be(\u0022System\u0022);\r\n    }\r\n\r\n\r\n    [Fact]\r\n    public void CreatePersonWithName_ShouldSucceed_WhenPasswordIsBetweenMinimumAndMaximumLength()\r\n    {\r\n        // Arrange\r\n        int MINIMUM_PASSWORD_LENGTH = 8;\r\n        int MAXIMUM_PASSWORD_LENGTH = 128;\r\n        for (int i = 0; i \u003E MINIMUM_PASSWORD_LENGTH \u0026\u0026 i \u003C MAXIMUM_PASSWORD_LENGTH; i\u002B\u002B) \r\n        {\r\n            Person person = PersonFactory.Create(\u0022\u0022, new string(\u0027X\u0027, i));\r\n            person.Name.Should().Be(\u0022\u0022);\r\n            person.CreatedBy.Should().Be(\u0022System\u0022);\r\n        }\r\n    }\r\n\r\n    [Fact]\r\n    public void CreatePersonWithName_ShouldSucceed_WhenPasswordMatchesMaximumLength()\r\n    {\r\n        int MAXIMUM_PASSWORD_LENGTH = 128;\r\n        Person person = PersonFactory.Create(\u0022\u0022, new string(\u0027X\u0027, MAXIMUM_PASSWORD_LENGTH));\r\n        person.Name.Should().Be(\u0022\u0022);\r\n        person.CreatedBy.Should().Be(\u0022System\u0022);\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(\u002212345678\u0022)]\r\n    [InlineData(\u0022123456789\u0022)]\r\n    [InlineData(\u002212345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678\u0022)]\r\n    public void CheckPasswordMeetsRequirements_Should_ReturnTrue_When_WeAreWithinLengthLimit(string password)\r\n    {\r\n        bool actual = PersonFactory.CheckPasswordMeetsRequirements(password);\r\n        actual.Should().BeTrue();\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(\u0022hunter2\u0022)]\r\n    [InlineData(\u0022abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\u0022)]\r\n    public void CheckPasswordMeetsRequirements_Should_ReturnFalse_When_WeAreNotWithinLengthLimit(string password)\r\n    {\r\n        bool actual = PersonFactory.CheckPasswordMeetsRequirements(password);\r\n        actual.Should().BeFalse();\r\n    }\r\n\r\n    [Theory]\r\n    [InlineData(\u0022Pratikchhya Shrestha\u0022, \u0022hunter2\u0022)]\r\n    [InlineData(\u0022Pratikchhya Shrestha\u0022, \u0022abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\u0022)]\r\n    public void ShortOrLongPasswordsFail(string name, string password)\r\n    {\r\n        // Arrange\r\n        int MINIMUM_PASSWORD_LENGTH = 8;\r\n        int MAXIMUM_PASSWORD_LENGTH = 128;\r\n\r\n        // Act\r\n        Action act = () =\u003E PersonFactory.Create(name, password);\r\n\r\n        // Assert\r\n        act.Should().Throw\u003CArgumentException\u003E().WithMessage($\u0022The password provided to create user {name} is not valid. A password must have a minimum length no shorter than {MINIMUM_PASSWORD_LENGTH} and no longer than {MAXIMUM_PASSWORD_LENGTH}.\u0022);\r\n    }\r\n}\r\n","tests":[{"id":"b8061a32-c486-631b-d34d-ac7cc462e3ec","name":"tests.PersonTests.CreatePersonWithName_ShouldSucceed_WhenPasswordMatchesMinimumLength","location":{"start":{"line":5,"column":5},"end":{"line":12,"column":6}}},{"id":"b34f2f4b-4bd3-316d-b04a-eb8682395b29","name":"tests.PersonTests.CreatePersonWithName_ShouldSucceed_WhenPasswordIsBetweenMinimumAndMaximumLength","location":{"start":{"line":15,"column":5},"end":{"line":27,"column":6}}},{"id":"9dcf9682-55a1-efe4-1905-97bd193aa956","name":"tests.PersonTests.CreatePersonWithName_ShouldSucceed_WhenPasswordMatchesMaximumLength","location":{"start":{"line":29,"column":5},"end":{"line":36,"column":6}}},{"id":"6393fd07-043c-a846-c9a2-d3bb8af3d1d8","name":"tests.PersonTests.CheckPasswordMeetsRequirements_Should_ReturnTrue_When_WeAreWithinLengthLimit","location":{"start":{"line":38,"column":5},"end":{"line":46,"column":6}}},{"id":"663e77e5-49e2-b5ab-02f9-dba149da0007","name":"tests.PersonTests.CheckPasswordMeetsRequirements_Should_ReturnTrue_When_WeAreWithinLengthLimit","location":{"start":{"line":38,"column":5},"end":{"line":46,"column":6}}},{"id":"a94ab373-9e5e-4371-7ffb-873b026e9749","name":"tests.PersonTests.CheckPasswordMeetsRequirements_Should_ReturnTrue_When_WeAreWithinLengthLimit","location":{"start":{"line":38,"column":5},"end":{"line":46,"column":6}}},{"id":"336bf367-480c-53d7-1d6c-9b82da3bbbbf","name":"tests.PersonTests.CheckPasswordMeetsRequirements_Should_ReturnFalse_When_WeAreNotWithinLengthLimit","location":{"start":{"line":48,"column":5},"end":{"line":55,"column":6}}},{"id":"65c767eb-acf5-39be-4898-9d5f8c18c69f","name":"tests.PersonTests.CheckPasswordMeetsRequirements_Should_ReturnFalse_When_WeAreNotWithinLengthLimit","location":{"start":{"line":48,"column":5},"end":{"line":55,"column":6}}},{"id":"efd80742-3539-5f78-dc61-dd861e4c9bc7","name":"tests.PersonTests.ShortOrLongPasswordsFail","location":{"start":{"line":57,"column":5},"end":{"line":71,"column":6}}},{"id":"c113e76a-74f8-584c-423d-58e58bafe2a7","name":"tests.PersonTests.ShortOrLongPasswordsFail","location":{"start":{"line":57,"column":5},"end":{"line":71,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\RevocationTests.cs":{"language":"cs","source":"using System.Collections.Generic;\r\n\r\nnamespace tests;\r\n\r\npublic class RevocationTests\r\n{\r\n    [Fact]\r\n    public void Freebie()\r\n    {\r\n        Assert.True(true);\r\n    }\r\n\r\n    [Fact]\r\n    public void ReadCsv_ShouldReturnTokens()\r\n    {\r\n        // arrange\r\n        string filename = \u0022authorizations.csv\u0022;\r\n\r\n        // act\r\n        List\u003Cstring\u003E authorizationIds = Revocation.ReadCsv(filename);\r\n\r\n        // assert\r\n        _ = authorizationIds.Count.Should().Be(187749);\r\n    }\r\n\r\n\r\n    [Fact]\r\n    public void GetBatches()\r\n    {\r\n        // arrange\r\n        string filename = \u0022authorizations.csv\u0022;\r\n\r\n        // act\r\n        Revocation.GetBatches(filename, 10);\r\n\r\n        Assert.True(true);\r\n    }\r\n}\r\n","tests":[{"id":"ca5aa045-e0c3-5c00-9975-67bb64a583ea","name":"tests.RevocationTests.Freebie","location":{"start":{"line":7,"column":5},"end":{"line":11,"column":6}}},{"id":"61150559-0a50-a8ab-53ea-098d910e2676","name":"tests.RevocationTests.ReadCsv_ShouldReturnTokens","location":{"start":{"line":13,"column":5},"end":{"line":24,"column":6}}},{"id":"a4247d49-865b-8d8f-0004-3cf017e13f95","name":"tests.RevocationTests.GetBatches","location":{"start":{"line":27,"column":5},"end":{"line":37,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\TwoSumTests.cs":{"language":"cs","source":"namespace tests;\r\n\r\npublic class TwoSumTests\r\n{\r\n    [Fact]\r\n    public void Freebie()\r\n    {\r\n        Assert.True(true);\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 02, 8 }, 10)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 8 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 22, 8 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 32, 8 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 42, 8 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 52, 8 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 62, 8 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 72, 8 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 82, 8 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 92, 8 }, 100)]\r\n    public void SumExistsInCheckExists(int[] a, int X)\r\n    {\r\n        Assert.True(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 9 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 22, 9 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 32, 9 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 42, 9 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 52, 9 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 62, 9 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 72, 9 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 82, 9 }, 90)]\r\n    public void SumDoesNotExistInCheckExists(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 9 }, 90)]\r\n    public void SumDoesNotExistInCheckExistsTen(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 09 }, 10)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 19 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 29 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 39 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 49 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 59 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 69 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 79 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 89 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 10, 99 }, 100)]\r\n    public void SumExistsInCheckExistsTen(int[] a, int X)\r\n    {\r\n        Assert.True(TwoSum.CheckExists(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 08 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 18 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 28 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 38 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 48 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 58 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 68 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 78 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 88 }, 100)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 98 }, 110)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 108 }, 120)]\r\n    public void SumExistsInCheckExistsHashed(int[] a, int X)\r\n    {\r\n        Assert.True(TwoSum.CheckExistsHashed(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 09 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 19 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 29 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 39 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 49 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 59 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 69 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 79 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 89 }, 100)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 99 }, 110)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 10, 109 }, 120)]\r\n    public void SumDoesNotExistInCheckExistsHashedTen(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExistsHashed(a, X));\r\n    }\r\n    [Theory]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 09 }, 20)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 19 }, 30)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 29 }, 40)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 39 }, 50)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 49 }, 60)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 59 }, 70)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 69 }, 80)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 79 }, 90)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 89 }, 100)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 99 }, 110)]\r\n    [InlineData(new int[] { 1, 5, 3, 7, 12, 109 }, 120)]\r\n    public void SumDoesNotExistInCheckExistsHashed(int[] a, int X)\r\n    {\r\n        Assert.False(TwoSum.CheckExistsHashed(a, X));\r\n    }\r\n}","tests":[{"id":"7892f354-9019-c193-dd24-4ccb214c3e1a","name":"tests.TwoSumTests.Freebie","location":{"start":{"line":5,"column":5},"end":{"line":9,"column":6}}},{"id":"ac7005f9-c120-9f68-db0c-837753f4d23d","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"7d1faa54-9ed8-850a-42f8-1ac72b991096","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"608481ea-908e-18b6-d681-36ccb462fe56","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"04437ea8-6483-1983-94f5-7f08d8af11c3","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"5cae4439-6186-510b-510f-77fc6c9fbe5a","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"317f20a2-4fa7-b745-12bc-4b35744d32b9","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"64bb8968-acf9-8486-5353-844b40d6dc33","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"84a9af4e-bed9-6dd3-50b8-d68f5ce42207","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"d49ebcb9-a806-3ad1-bebd-767c8e8cdc81","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"b7ba0a58-ff77-61fe-b69c-51fb6eb33d4b","name":"tests.TwoSumTests.SumExistsInCheckExists","location":{"start":{"line":10,"column":5},"end":{"line":24,"column":6}}},{"id":"a62549c3-744b-dd7d-39d6-c12668dd43da","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"e41a5a97-12ce-1fd5-1355-d9281884c1ed","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"eab896d3-9ef7-00b2-ea5d-95fe475b37e5","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"c084bf5e-0ed2-43ed-aaab-241ac8484115","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"a6d81d04-2c53-4cc6-9ad5-53775a0fecf2","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"a2de0c10-def7-9c09-6c9f-244836cec741","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"63a7030c-92d9-2f9e-fcc4-f7e948560735","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"b94f1be9-669e-bb60-307c-4444860e3ee1","name":"tests.TwoSumTests.SumDoesNotExistInCheckExists","location":{"start":{"line":25,"column":5},"end":{"line":37,"column":6}}},{"id":"73021308-8aae-8a9f-70c7-7e07e560a013","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"5804925b-bd12-2b64-204b-2b035a8d0636","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"c6446a47-c8c3-3f65-2b4a-c8fc833c5a46","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"aeee52db-05ca-05a6-c53f-7934d77a09ae","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"897ce764-51e2-e29c-6cce-53652b60764f","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"5bd8cb63-c4d6-3b23-321d-0838756637bb","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"3536dcaf-765d-9f3f-b7e4-160ede70b67e","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"785d6c34-d3b1-3fc6-7696-68d06705592d","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsTen","location":{"start":{"line":38,"column":5},"end":{"line":50,"column":6}}},{"id":"b2c38874-79a9-9001-2967-f33f739e6399","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"bdbf39a5-77ed-5edb-92b2-c2c6bce3516c","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"b30ada94-4b96-ebb8-e446-9ed617496b77","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"2b75082e-1372-fb84-3dea-f03fa716e7b3","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"4daf281e-81c7-5f7c-5f06-89b54aa3f8d2","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"6126f356-3e97-57be-22e1-42c6e3f35908","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"f2bb961d-e444-d478-f4b7-2d6c11302f4a","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"72973bde-d9fe-aeae-1e53-19333d331717","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"27f8804b-5d58-248c-0fe3-da2a56e9feb0","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"6da3ab4b-de7a-2fbb-b38d-97c5153e9bea","name":"tests.TwoSumTests.SumExistsInCheckExistsTen","location":{"start":{"line":51,"column":5},"end":{"line":65,"column":6}}},{"id":"2400cf4c-aa29-c9d9-eb33-8f4d4803dc10","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"064bdf83-2ae4-041c-2cc1-6c38da27a3ff","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"fa42ce38-b0b1-d8a0-a161-a89cc11fc441","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"1caaaedf-702d-27fb-1265-12ea2cbd3429","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"e107eaca-fe43-f9a0-93bd-8c66bc6d0500","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"c50155c6-de10-7c86-525e-d974dd092f1f","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"453b0e23-8533-f6fa-8d95-243cb3de2130","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"f74f529a-1b71-de47-657b-e554fb36d102","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"39115b3a-df7a-306d-9b58-4cacd7bb902d","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"bcf2d386-11ea-47a6-9d08-adf1e1cb96dd","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"5e47aae2-d461-3b4d-1cbf-275b8f158cf6","name":"tests.TwoSumTests.SumExistsInCheckExistsHashed","location":{"start":{"line":66,"column":5},"end":{"line":81,"column":6}}},{"id":"676bac46-8023-7de1-08b0-0ffca48b80f5","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"20279295-c7db-b8f5-9928-e21a5ea38158","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"c59c8731-489a-12bb-7c4d-601a3e56f3be","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"cf3d4c76-e3d6-273a-c5e6-ee48b5eaf195","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"e6d71435-1ee0-ecd6-0f05-2f004239ce1f","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"689b64ae-b941-1202-5b8a-1a432eabfcea","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"86bed35d-c691-6540-5537-c7bf8753ebf2","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"7c6c86f4-0112-4c10-d71b-d6238cf9d130","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"455c26c7-7af6-aa25-4732-fe1f3162994a","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"c2e8211d-3e5f-e698-91c7-d4b29b2f2c1a","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"b4a8ee54-f203-fc9b-fc9d-756251e1175a","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashedTen","location":{"start":{"line":82,"column":5},"end":{"line":97,"column":6}}},{"id":"322bcf0d-5590-c062-9a3a-877e46c0d111","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"0699fa9e-0e1c-46b3-0a9a-8b06bb3845d5","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"4b31278f-2373-6dc2-757d-fd2137701f58","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"bf42e8fd-bbe0-ff3b-9417-ba03be245293","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"e17f67b4-9142-7a1f-c5af-0fc803648ffd","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"f1785c32-7006-eb93-6648-71fee0ae14fc","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"93cc05e6-46a2-a359-f226-759fe5f5a053","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"11d19e7c-9090-d0ca-0771-bfa3dd275e0c","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"50154462-352c-390f-509b-9019b196e971","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"3bffe4e0-9446-e6a5-6f1a-0695391b68a8","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}},{"id":"064472d4-99cb-18eb-cb8b-e268bcf3b3b6","name":"tests.TwoSumTests.SumDoesNotExistInCheckExistsHashed","location":{"start":{"line":98,"column":5},"end":{"line":113,"column":6}}}]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\usings.cs":{"language":"cs","source":"global using Xunit;\r\nglobal using System;\r\nglobal using FluentAssertions;\r\nglobal using Microsoft.Extensions.Logging;\r\nglobal using NSubstitute;\r\nglobal using System.Net.Http;\r\nglobal using System.Threading.Tasks;\r\n\r\nglobal using hellolib;\r\n","tests":[]},"C:\\Users\\kushal\\src\\mydotnet\\tests\\WeatherTests.cs":{"language":"cs","source":"using System.Net;\r\nusing System.Threading;\r\nusing System.Text.Json;\r\n\r\nnamespace tests;\r\npublic class WeatherTests\r\n{\r\n    [Fact]\r\n    public async Task GetCurrentWeatherAsync_ReturnsCurrentWeather_WhenRequestIsSuccessful()\r\n    {\r\n        // Arrange\r\n        CurrentWeather expectedWeather = new()\r\n        {\r\n            Temperature = \u002220\u0022,\r\n            Humidity = \u002230\u0022,\r\n            WindSpeed = \u002210\u0022,\r\n            WindDirection = \u0022North\u0022\r\n        };\r\n\r\n        HttpMessageHandlerStub messageHandler = new(new HttpResponseMessage\r\n        {\r\n            StatusCode = HttpStatusCode.OK,\r\n            Content = new StringContent(JsonSerializer.Serialize(expectedWeather))\r\n        });\r\n\r\n        HttpClient httpClient = new(messageHandler);\r\n        Weather weatherService = new(httpClient);\r\n\r\n        // Act\r\n        CurrentWeather result = await weatherService.GetCurrentWeatherAsync(\u002237.7833\u0022, \u0022-122.4167\u0022);\r\n\r\n        // Assert\r\n        result.Should().BeEquivalentTo(expectedWeather);\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCurrentWeatherAsync_ThrowsException_WhenRequestIsUnsuccessful()\r\n    {\r\n        // Arrange\r\n        HttpMessageHandlerStub messageHandler = new(new HttpResponseMessage\r\n        {\r\n            StatusCode = HttpStatusCode.NotFound\r\n        });\r\n\r\n        HttpClient httpClient = new(messageHandler);\r\n        Weather weatherService = new(httpClient);\r\n\r\n        // Act\r\n        Func\u003CTask\u003E act = async () =\u003E await weatherService.GetCurrentWeatherAsync(\u002237.7833\u0022, \u0022-122.4167\u0022);\r\n\r\n        // Assert\r\n        act.Should().ThrowAsync\u003CException\u003E().WithMessage(\u0022Failed to get weather information: NotFound\u0022);\r\n    }\r\n    [Fact]\r\n    public async Task GetCurrentWeatherAsync_ReturnsCurrentWeather_WhenRequestIsSuccessfulAndDataIsPartial()\r\n    {\r\n        // Arrange\r\n        CurrentWeather expectedWeather = new()\r\n        {\r\n            Temperature = \u002220\u0022,\r\n            Humidity = null,\r\n            WindSpeed = null,\r\n            WindDirection = null\r\n        };\r\n\r\n        HttpMessageHandlerStub messageHandler = new(new HttpResponseMessage\r\n        {\r\n            StatusCode = HttpStatusCode.OK,\r\n            Content = new StringContent(JsonSerializer.Serialize(expectedWeather))\r\n        });\r\n\r\n        HttpClient httpClient = new(messageHandler);\r\n        Weather weatherService = new(httpClient);\r\n\r\n        // Act\r\n        CurrentWeather result = await weatherService.GetCurrentWeatherAsync(\u002237.7833\u0022, \u0022-122.4167\u0022);\r\n\r\n        // Assert\r\n        result.Should().BeEquivalentTo(expectedWeather);\r\n    }\r\n\r\n    [Fact]\r\n    public async Task GetCurrentWeatherAsync_ReturnsCurrentWeather_WhenRequestIsSuccessfulAndDataIsEmpty()\r\n    {\r\n        // Arrange\r\n        CurrentWeather expectedWeather = new()\r\n        {\r\n            Temperature = null,\r\n            Humidity = null,\r\n            WindSpeed = null,\r\n            WindDirection = null\r\n        };\r\n\r\n        HttpMessageHandlerStub messageHandler = new(new HttpResponseMessage\r\n        {\r\n            StatusCode = HttpStatusCode.OK,\r\n            Content = new StringContent(JsonSerializer.Serialize(expectedWeather))\r\n        });\r\n\r\n        HttpClient httpClient = new(messageHandler);\r\n        Weather weatherService = new(httpClient);\r\n\r\n        // Act\r\n        CurrentWeather result = await weatherService.GetCurrentWeatherAsync(\u002237.7833\u0022, \u0022-122.4167\u0022);\r\n\r\n        // Assert\r\n        result.Should().BeEquivalentTo(expectedWeather);\r\n    }\r\n\r\n    [Fact]\r\n    public void GetCurrentWeatherAsync_ThrowsException_WhenRequestIsUnsuccessfulWithDifferentStatusCode()\r\n    {\r\n        // Arrange\r\n        HttpMessageHandlerStub messageHandler = new(new HttpResponseMessage\r\n        {\r\n            StatusCode = HttpStatusCode.InternalServerError\r\n        });\r\n\r\n        HttpClient httpClient = new(messageHandler);\r\n        Weather weatherService = new(httpClient);\r\n\r\n        // Act\r\n        Func\u003CTask\u003E act = async () =\u003E await weatherService.GetCurrentWeatherAsync(\u002237.7833\u0022, \u0022-122.4167\u0022);\r\n\r\n        // Assert\r\n        act.Should().ThrowAsync\u003CException\u003E().WithMessage(\u0022Failed to get weather information: InternalServerError\u0022);\r\n    }\r\n\r\n}\r\n\r\npublic class HttpMessageHandlerStub(HttpResponseMessage response) : HttpMessageHandler\r\n{\r\n    private readonly HttpResponseMessage _response = response;\r\n\r\n    protected override Task\u003CHttpResponseMessage\u003E SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\r\n    {\r\n        return Task.FromResult(_response);\r\n    }\r\n}\r\n","tests":[{"id":"cde98f5a-b0e7-e7a3-1b29-c6404288837f","name":"tests.WeatherTests.GetCurrentWeatherAsync_ReturnsCurrentWeather_WhenRequestIsSuccessful","location":{"start":{"line":8,"column":5},"end":{"line":34,"column":6}}},{"id":"27c3bf13-b343-33ad-333c-fc4b029e222d","name":"tests.WeatherTests.GetCurrentWeatherAsync_ThrowsException_WhenRequestIsUnsuccessful","location":{"start":{"line":36,"column":5},"end":{"line":53,"column":6}}},{"id":"5bb46809-2907-ebc0-2416-2522d6e1c34f","name":"tests.WeatherTests.GetCurrentWeatherAsync_ReturnsCurrentWeather_WhenRequestIsSuccessfulAndDataIsPartial","location":{"start":{"line":54,"column":5},"end":{"line":80,"column":6}}},{"id":"16836486-f27f-c01b-a7ff-31cea0bfc4a3","name":"tests.WeatherTests.GetCurrentWeatherAsync_ReturnsCurrentWeather_WhenRequestIsSuccessfulAndDataIsEmpty","location":{"start":{"line":82,"column":5},"end":{"line":108,"column":6}}},{"id":"125323dd-d717-d330-f2fc-52240996a02a","name":"tests.WeatherTests.GetCurrentWeatherAsync_ThrowsException_WhenRequestIsUnsuccessfulWithDifferentStatusCode","location":{"start":{"line":110,"column":5},"end":{"line":127,"column":6}}}]}}}