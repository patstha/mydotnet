// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SalesforceMapper.Znode;
//
//    var znodeContactPreference = ZnodeContactPreference.FromJson(jsonString);

namespace SalesforceMapper.Znode;

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

public partial class ZnodeContactPreference
{
    [JsonProperty("ContactId", Required = Required.Always)]
    public string ContactId { get; set; }

    [JsonProperty("Email", Required = Required.Always)]
    public string Email { get; set; }

    [JsonProperty("IsInternalUpdate", Required = Required.Always)]
    public bool IsInternalUpdate { get; set; }

    [JsonProperty("Preferences", Required = Required.Always)]
    public List<Preference> Preferences { get; set; }
}

public partial class Preference
{
    [JsonProperty("PrefCode", Required = Required.Always)]
    public string PrefCode { get; set; }

    [JsonProperty("CurrentValue", Required = Required.AllowNull)]
    public CurrentValue CurrentValue { get; set; }
}

public partial struct CurrentValue
{
    public bool? Bool;
    public string String;

    public static implicit operator CurrentValue(bool Bool) => new CurrentValue { Bool = Bool };
    public static implicit operator CurrentValue(string String) => new CurrentValue { String = String };
    public bool IsNull => Bool == null && String == null;
}

public partial class ZnodeContactPreference
{
    public static ZnodeContactPreference FromJson(string json) => JsonConvert.DeserializeObject<ZnodeContactPreference>(json, SalesforceMapper.Znode.Converter.Settings);
}

public static class Serialize
{
    public static string ToJson(this ZnodeContactPreference self) => JsonConvert.SerializeObject(self, SalesforceMapper.Znode.Converter.Settings);
}

internal static class Converter
{
    public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
    {
        MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
        DateParseHandling = DateParseHandling.None,
        Converters =
        {
            CurrentValueConverter.Singleton,
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
    };
}

internal class CurrentValueConverter : JsonConverter
{
    public override bool CanConvert(Type t) => t == typeof(CurrentValue) || t == typeof(CurrentValue?);

    public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
    {
        switch (reader.TokenType)
        {
            case JsonToken.Null:
                return new CurrentValue { };
            case JsonToken.Boolean:
                var boolValue = serializer.Deserialize<bool>(reader);
                return new CurrentValue { Bool = boolValue };
            case JsonToken.String:
            case JsonToken.Date:
                var stringValue = serializer.Deserialize<string>(reader);
                return new CurrentValue { String = stringValue };
        }
        throw new Exception("Cannot unmarshal type CurrentValue");
    }

    public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
    {
        var value = (CurrentValue)untypedValue;
        if (value.IsNull)
        {
            serializer.Serialize(writer, null);
            return;
        }
        if (value.Bool != null)
        {
            serializer.Serialize(writer, value.Bool.Value);
            return;
        }
        if (value.String != null)
        {
            serializer.Serialize(writer, value.String);
            return;
        }
        throw new Exception("Cannot marshal type CurrentValue");
    }

    public static readonly CurrentValueConverter Singleton = new CurrentValueConverter();
}
